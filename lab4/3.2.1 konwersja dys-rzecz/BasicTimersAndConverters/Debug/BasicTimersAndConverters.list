
BasicTimersAndConverters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bccc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800be80  0800be80  0001be80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b4  0800c2b4  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2bc  0800c2bc  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2c0  0800c2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800c2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000290  0800c554  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800c554  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c29  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7b  00000000  00000000  00040ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00044c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00046588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb8f  00000000  00000000  00047d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d600  00000000  00000000  0007688f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bafd  00000000  00000000  00093e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001af98c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b74  00000000  00000000  001af9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000290 	.word	0x20000290
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800be64 	.word	0x0800be64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000294 	.word	0x20000294
 80001ec:	0800be64 	.word	0x0800be64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <MX_ADC3_Init+0x124>)
 8000f8a:	4a3f      	ldr	r2, [pc, #252]	; (8001088 <MX_ADC3_Init+0x128>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <MX_ADC3_Init+0x124>)
 8000f90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <MX_ADC3_Init+0x124>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <MX_ADC3_Init+0x124>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <MX_ADC3_Init+0x124>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fea:	4826      	ldr	r0, [pc, #152]	; (8001084 <MX_ADC3_Init+0x124>)
 8000fec:	f001 ffee 	bl	8002fcc <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ff6:	f000 ffc7 	bl	8001f88 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_ADC3_Init+0x12c>)
 8000ffc:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000ffe:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001002:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_ADC3_Init+0x130>)
 8001006:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = ENABLE;
 8001008:	2301      	movs	r3, #1
 800100a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2500;
 800100e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 1000;
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4619      	mov	r1, r3
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <MX_ADC3_Init+0x124>)
 8001022:	f003 f839 	bl	8004098 <HAL_ADC_AnalogWDGConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800102c:	f000 ffac 	bl	8001f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x130>)
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2306      	movs	r3, #6
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103c:	237f      	movs	r3, #127	; 0x7f
 800103e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001040:	2304      	movs	r3, #4
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_ADC3_Init+0x124>)
 800104e:	f002 fc17 	bl	8003880 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC3_Init+0xfc>
  {
    Error_Handler();
 8001058:	f000 ff96 	bl	8001f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_ADC3_Init+0x134>)
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001060:	230c      	movs	r3, #12
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC3_Init+0x124>)
 800106e:	f002 fc07 	bl	8003880 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001078:	f000 ff86 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	; 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002d4 	.word	0x200002d4
 8001088:	50040200 	.word	0x50040200
 800108c:	7dc00000 	.word	0x7dc00000
 8001090:	c7520000 	.word	0xc7520000
 8001094:	0c900008 	.word	0x0c900008

08001098 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	; 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	228c      	movs	r2, #140	; 0x8c
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 f837 	bl	800912c <memset>
  if(adcHandle->Instance==ADC3)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <HAL_ADC_MspInit+0xd8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d14e      	bne.n	8001166 <HAL_ADC_MspInit+0xce>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010de:	2310      	movs	r3, #16
 80010e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 f81b 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001104:	f000 ff40 	bl	8001f88 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 800110e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_ADC_MspInit+0xdc>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001138:	2304      	movs	r3, #4
 800113a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113e:	230b      	movs	r3, #11
 8001140:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_ADC_MspInit+0xe0>)
 8001152:	f003 fe29 	bl	8004da8 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	202f      	movs	r0, #47	; 0x2f
 800115c:	f003 fc01 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001160:	202f      	movs	r0, #47	; 0x2f
 8001162:	f003 fc1a 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	37b0      	adds	r7, #176	; 0xb0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	50040200 	.word	0x50040200
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800

0800117c <SEG_Callback>:
	module &= 0x03;
	HAL_GPIO_WritePin(GPIOB, SEG_MOD_Msk, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, SEG_Module[module], GPIO_PIN_SET);
}

void SEG_Callback(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	static uint16_t SEG_Delay = 0;
	static uint32_t module = 0;
	if ((++SEG_Delay) == SEG_RefreshPeriodMs) {
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <SEG_Callback+0x74>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <SEG_Callback+0x74>)
 800118a:	801a      	strh	r2, [r3, #0]
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <SEG_Callback+0x74>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d12a      	bne.n	80011ea <SEG_Callback+0x6e>
		HAL_GPIO_WritePin(GPIOB, SEG_MOD_Msk, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	213c      	movs	r1, #60	; 0x3c
 8001198:	4816      	ldr	r0, [pc, #88]	; (80011f4 <SEG_Callback+0x78>)
 800119a:	f003 ffaf 	bl	80050fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, SEG_Msk, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f240 217f 	movw	r1, #639	; 0x27f
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <SEG_Callback+0x7c>)
 80011a6:	f003 ffa9 	bl	80050fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, SEG_Value[module], GPIO_PIN_SET);
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <SEG_Callback+0x80>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <SEG_Callback+0x84>)
 80011b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <SEG_Callback+0x7c>)
 80011ba:	f003 ff9f 	bl	80050fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_Module[module++], GPIO_PIN_SET);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <SEG_Callback+0x80>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <SEG_Callback+0x80>)
 80011c6:	600a      	str	r2, [r1, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <SEG_Callback+0x88>)
 80011ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <SEG_Callback+0x78>)
 80011d4:	f003 ff92 	bl	80050fc <HAL_GPIO_WritePin>
		SEG_Delay = 0;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SEG_Callback+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	801a      	strh	r2, [r3, #0]
		module &= 0x03;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <SEG_Callback+0x80>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SEG_Callback+0x80>)
 80011e8:	6013      	str	r3, [r2, #0]
	}
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002b4 	.word	0x200002b4
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48001800 	.word	0x48001800
 80011fc:	200002b8 	.word	0x200002b8
 8001200:	200002ac 	.word	0x200002ac
 8001204:	0800be84 	.word	0x0800be84

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_DMA_Init+0x70>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <MX_DMA_Init+0x70>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6493      	str	r3, [r2, #72]	; 0x48
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_DMA_Init+0x70>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_DMA_Init+0x70>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_DMA_Init+0x70>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6493      	str	r3, [r2, #72]	; 0x48
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_DMA_Init+0x70>)
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	200d      	movs	r0, #13
 8001244:	f003 fb8d 	bl	8004962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001248:	200d      	movs	r0, #13
 800124a:	f003 fba6 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2044      	movs	r0, #68	; 0x44
 8001254:	f003 fb85 	bl	8004962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001258:	2044      	movs	r0, #68	; 0x44
 800125a:	f003 fb9e 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2045      	movs	r0, #69	; 0x45
 8001264:	f003 fb7d 	bl	8004962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001268:	2045      	movs	r0, #69	; 0x45
 800126a:	f003 fb96 	bl	800499a <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <LEDs_SetValue>:
	if (led < LED_N) {
		HAL_GPIO_TogglePin(LEDs[led].port, LEDs[led].pin);
	}
}

void LEDs_SetValue(uint8_t value) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	for (uint32_t i = 0; i < LED_N; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e025      	b.n	80012d8 <LEDs_SetValue+0x5c>
		if (value & 1)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00d      	beq.n	80012b2 <LEDs_SetValue+0x36>
			HAL_GPIO_WritePin(LEDs[i].port, LEDs[i].pin, GPIO_PIN_SET);
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <LEDs_SetValue+0x6c>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <LEDs_SetValue+0x6c>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	f003 ff26 	bl	80050fc <HAL_GPIO_WritePin>
 80012b0:	e00c      	b.n	80012cc <LEDs_SetValue+0x50>
		else
			HAL_GPIO_WritePin(LEDs[i].port, LEDs[i].pin, GPIO_PIN_RESET);
 80012b2:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LEDs_SetValue+0x6c>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LEDs_SetValue+0x6c>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4413      	add	r3, r2
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f003 ff18 	bl	80050fc <HAL_GPIO_WritePin>
		value >>= 1;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
	for (uint32_t i = 0; i < LED_N; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9d6      	bls.n	800128c <LEDs_SetValue+0x10>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000

080012ec <SW_SysTickCallback>:

int8_t SW_GetVertical(void) {
	return SwVertical;
}

void SW_SysTickCallback(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	static uint32_t tick = SW_RefreshPeriodMs;
	static SW_State SwStateNew = SW_NULL;
	if (tick == 0) {
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <SW_SysTickCallback+0x11c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d17d      	bne.n	80013f6 <SW_SysTickCallback+0x10a>
		tick = SW_RefreshPeriodMs;
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <SW_SysTickCallback+0x11c>)
 80012fc:	2214      	movs	r2, #20
 80012fe:	601a      	str	r2, [r3, #0]
		SwStateNew = SW_NULL;
 8001300:	4b42      	ldr	r3, [pc, #264]	; (800140c <SW_SysTickCallback+0x120>)
 8001302:	2205      	movs	r2, #5
 8001304:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < NELEMS(SWs); i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e05f      	b.n	80013cc <SW_SysTickCallback+0xe0>
			if (HAL_GPIO_ReadPin(SWs[i].port, SWs[i].pin) == GPIO_PIN_RESET) {
 800130c:	4a40      	ldr	r2, [pc, #256]	; (8001410 <SW_SysTickCallback+0x124>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001314:	493e      	ldr	r1, [pc, #248]	; (8001410 <SW_SysTickCallback+0x124>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f003 fed3 	bl	80050cc <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d14c      	bne.n	80013c6 <SW_SysTickCallback+0xda>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d844      	bhi.n	80013bc <SW_SysTickCallback+0xd0>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <SW_SysTickCallback+0x4c>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001389 	.word	0x08001389
 800133c:	080013a3 	.word	0x080013a3
 8001340:	0800136f 	.word	0x0800136f
 8001344:	08001355 	.word	0x08001355
 8001348:	0800134d 	.word	0x0800134d
				switch (i) {
				case SW_OK:
					SwStateNew = SW_OK;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <SW_SysTickCallback+0x120>)
 800134e:	2204      	movs	r2, #4
 8001350:	701a      	strb	r2, [r3, #0]
					break;
 8001352:	e037      	b.n	80013c4 <SW_SysTickCallback+0xd8>
				case SW_UP:
					SwStateNew = SW_UP;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <SW_SysTickCallback+0x120>)
 8001356:	2203      	movs	r2, #3
 8001358:	701a      	strb	r2, [r3, #0]
					SwVertical++;
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <SW_SysTickCallback+0x128>)
 800135c:	f993 3000 	ldrsb.w	r3, [r3]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3301      	adds	r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25a      	sxtb	r2, r3
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <SW_SysTickCallback+0x128>)
 800136a:	701a      	strb	r2, [r3, #0]
					break;
 800136c:	e02a      	b.n	80013c4 <SW_SysTickCallback+0xd8>
				case SW_DOWN:
					SwStateNew = SW_DOWN;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <SW_SysTickCallback+0x120>)
 8001370:	2202      	movs	r2, #2
 8001372:	701a      	strb	r2, [r3, #0]
					SwVertical--;
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <SW_SysTickCallback+0x128>)
 8001376:	f993 3000 	ldrsb.w	r3, [r3]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b25a      	sxtb	r2, r3
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <SW_SysTickCallback+0x128>)
 8001384:	701a      	strb	r2, [r3, #0]
					break;
 8001386:	e01d      	b.n	80013c4 <SW_SysTickCallback+0xd8>
				case SW_RIGHT:
					SwStateNew = SW_RIGHT;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <SW_SysTickCallback+0x120>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
					SwHorizontal++;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <SW_SysTickCallback+0x12c>)
 8001390:	f993 3000 	ldrsb.w	r3, [r3]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	b25a      	sxtb	r2, r3
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <SW_SysTickCallback+0x12c>)
 800139e:	701a      	strb	r2, [r3, #0]
					break;
 80013a0:	e010      	b.n	80013c4 <SW_SysTickCallback+0xd8>
				case SW_LEFT:
					SwStateNew = SW_LEFT;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <SW_SysTickCallback+0x120>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
					SwHorizontal--;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <SW_SysTickCallback+0x12c>)
 80013aa:	f993 3000 	ldrsb.w	r3, [r3]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	b25a      	sxtb	r2, r3
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <SW_SysTickCallback+0x12c>)
 80013b8:	701a      	strb	r2, [r3, #0]
					break;
 80013ba:	e003      	b.n	80013c4 <SW_SysTickCallback+0xd8>
				default:
					SwStateNew = SW_NULL;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <SW_SysTickCallback+0x120>)
 80013be:	2205      	movs	r2, #5
 80013c0:	701a      	strb	r2, [r3, #0]
					break;
 80013c2:	bf00      	nop
				}
				break;
 80013c4:	e005      	b.n	80013d2 <SW_SysTickCallback+0xe6>
		for (uint32_t i = 0; i < NELEMS(SWs); i++) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d99c      	bls.n	800130c <SW_SysTickCallback+0x20>
			}
		}
		if (SwStateLast != SwStateNew) {
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <SW_SysTickCallback+0x130>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <SW_SysTickCallback+0x120>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d007      	beq.n	80013ee <SW_SysTickCallback+0x102>
			SwStateLast = SwStateNew;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <SW_SysTickCallback+0x120>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <SW_SysTickCallback+0x130>)
 80013e4:	701a      	strb	r2, [r3, #0]
			SwChange = 1;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <SW_SysTickCallback+0x134>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
			SwChange = 0;
		}
	} else {
		tick--;
	}
}
 80013ec:	e008      	b.n	8001400 <SW_SysTickCallback+0x114>
			SwChange = 0;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <SW_SysTickCallback+0x134>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	e004      	b.n	8001400 <SW_SysTickCallback+0x114>
		tick--;
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SW_SysTickCallback+0x11c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a02      	ldr	r2, [pc, #8]	; (8001408 <SW_SysTickCallback+0x11c>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000006c 	.word	0x2000006c
 800140c:	20000070 	.word	0x20000070
 8001410:	20000040 	.word	0x20000040
 8001414:	200002be 	.word	0x200002be
 8001418:	200002bd 	.word	0x200002bd
 800141c:	20000068 	.word	0x20000068
 8001420:	200002bc 	.word	0x200002bc

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b7c      	ldr	r3, [pc, #496]	; (800162c <MX_GPIO_Init+0x208>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a7b      	ldr	r2, [pc, #492]	; (800162c <MX_GPIO_Init+0x208>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b79      	ldr	r3, [pc, #484]	; (800162c <MX_GPIO_Init+0x208>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <MX_GPIO_Init+0x208>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <MX_GPIO_Init+0x208>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <MX_GPIO_Init+0x208>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b70      	ldr	r3, [pc, #448]	; (800162c <MX_GPIO_Init+0x208>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a6f      	ldr	r2, [pc, #444]	; (800162c <MX_GPIO_Init+0x208>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b6d      	ldr	r3, [pc, #436]	; (800162c <MX_GPIO_Init+0x208>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b6a      	ldr	r3, [pc, #424]	; (800162c <MX_GPIO_Init+0x208>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a69      	ldr	r2, [pc, #420]	; (800162c <MX_GPIO_Init+0x208>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <MX_GPIO_Init+0x208>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <MX_GPIO_Init+0x208>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <MX_GPIO_Init+0x208>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <MX_GPIO_Init+0x208>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b5e      	ldr	r3, [pc, #376]	; (800162c <MX_GPIO_Init+0x208>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <MX_GPIO_Init+0x208>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <MX_GPIO_Init+0x208>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014ca:	f003 fff7 	bl	80054bc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <MX_GPIO_Init+0x208>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <MX_GPIO_Init+0x208>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <MX_GPIO_Init+0x208>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80014ec:	4850      	ldr	r0, [pc, #320]	; (8001630 <MX_GPIO_Init+0x20c>)
 80014ee:	f003 fe05 	bl	80050fc <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	484f      	ldr	r0, [pc, #316]	; (8001634 <MX_GPIO_Init+0x210>)
 80014f8:	f003 fe00 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 80014fc:	2200      	movs	r2, #0
 80014fe:	f242 013c 	movw	r1, #8252	; 0x203c
 8001502:	484d      	ldr	r0, [pc, #308]	; (8001638 <MX_GPIO_Init+0x214>)
 8001504:	f003 fdfa 	bl	80050fc <HAL_GPIO_WritePin>
                          |SEG7_DIG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8001508:	2200      	movs	r2, #0
 800150a:	f240 217f 	movw	r1, #639	; 0x27f
 800150e:	484b      	ldr	r0, [pc, #300]	; (800163c <MX_GPIO_Init+0x218>)
 8001510:	f003 fdf4 	bl	80050fc <HAL_GPIO_WritePin>
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8001514:	2200      	movs	r2, #0
 8001516:	f24c 013b 	movw	r1, #49211	; 0xc03b
 800151a:	4849      	ldr	r0, [pc, #292]	; (8001640 <MX_GPIO_Init+0x21c>)
 800151c:	f003 fdee 	bl	80050fc <HAL_GPIO_WritePin>
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001526:	4847      	ldr	r0, [pc, #284]	; (8001644 <MX_GPIO_Init+0x220>)
 8001528:	f003 fde8 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DOWN_Pin|SW_UP_Pin|SW_OK_Pin|SW_LEFT_Pin;
 800152c:	f248 030e 	movw	r3, #32782	; 0x800e
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	483b      	ldr	r0, [pc, #236]	; (8001630 <MX_GPIO_Init+0x20c>)
 8001542:	f003 fc31 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 8001546:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800154a:	61fb      	str	r3, [r7, #28]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4834      	ldr	r0, [pc, #208]	; (8001630 <MX_GPIO_Init+0x20c>)
 8001560:	f003 fc22 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001564:	2304      	movs	r3, #4
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <MX_GPIO_Init+0x210>)
 800157c:	f003 fc14 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 8001580:	f242 033c 	movw	r3, #8252	; 0x203c
 8001584:	61fb      	str	r3, [r7, #28]
                          |SEG7_DIG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4827      	ldr	r0, [pc, #156]	; (8001638 <MX_GPIO_Init+0x214>)
 800159a:	f003 fc05 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 800159e:	f240 237f 	movw	r3, #639	; 0x27f
 80015a2:	61fb      	str	r3, [r7, #28]
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4821      	ldr	r0, [pc, #132]	; (800163c <MX_GPIO_Init+0x218>)
 80015b8:	f003 fbf6 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 80015bc:	f24c 033b 	movw	r3, #49211	; 0xc03b
 80015c0:	61fb      	str	r3, [r7, #28]
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <MX_GPIO_Init+0x21c>)
 80015d6:	f003 fbe7 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80015da:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <MX_GPIO_Init+0x220>)
 80015f4:	f003 fbd8 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LSM303C_RDY_MAG_Pin|LSM303C_INT_ACC_Pin|LSM303C_INT_MAG_Pin|LM75_INT_Pin;
 80015f8:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_GPIO_Init+0x224>)
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <MX_GPIO_Init+0x218>)
 800160e:	f003 fbcb 	bl	8004da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2028      	movs	r0, #40	; 0x28
 8001618:	f003 f9a3 	bl	8004962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f003 f9bc 	bl	800499a <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3730      	adds	r7, #48	; 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	48000400 	.word	0x48000400
 800163c:	48001800 	.word	0x48001800
 8001640:	48000c00 	.word	0x48000c00
 8001644:	48000800 	.word	0x48000800
 8001648:	10210000 	.word	0x10210000

0800164c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <MX_I2C1_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A60D20;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <MX_I2C1_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001688:	f003 fd73 	bl	8005172 <HAL_I2C_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001692:	f000 fc79 	bl	8001f88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x74>)
 800169a:	f003 fe13 	bl	80052c4 <HAL_I2CEx_ConfigAnalogFilter>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 fc70 	bl	8001f88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_I2C1_Init+0x74>)
 80016ac:	f003 fe55 	bl	800535a <HAL_I2CEx_ConfigDigitalFilter>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b6:	f000 fc67 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003d0 	.word	0x200003d0
 80016c4:	40005400 	.word	0x40005400
 80016c8:	20a60d20 	.word	0x20a60d20

080016cc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_I2C3_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <MX_I2C3_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20A60D20;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_I2C3_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <MX_I2C3_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 58;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_I2C3_Init+0x74>)
 80016de:	223a      	movs	r2, #58	; 0x3a
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_I2C3_Init+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_I2C3_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_I2C3_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_I2C3_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_I2C3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C3_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <MX_I2C3_Init+0x74>)
 8001708:	f003 fd33 	bl	8005172 <HAL_I2C_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001712:	f000 fc39 	bl	8001f88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_I2C3_Init+0x74>)
 800171a:	f003 fdd3 	bl	80052c4 <HAL_I2CEx_ConfigAnalogFilter>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 fc30 	bl	8001f88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_I2C3_Init+0x74>)
 800172c:	f003 fe15 	bl	800535a <HAL_I2CEx_ConfigDigitalFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fc27 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000033c 	.word	0x2000033c
 8001744:	40005c00 	.word	0x40005c00
 8001748:	20a60d20 	.word	0x20a60d20

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0ae      	sub	sp, #184	; 0xb8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	228c      	movs	r2, #140	; 0x8c
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f007 fcdd 	bl	800912c <memset>
  if(i2cHandle->Instance==I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a61      	ldr	r2, [pc, #388]	; (80018fc <HAL_I2C_MspInit+0x1b0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d146      	bne.n	800180a <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fcd3 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001794:	f000 fbf8 	bl	8001f88 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800179e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a4:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80017b0:	f003 fe84 	bl	80054bc <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = LM75_I2C1_SDA_Pin|LM75_I2C1_SCL_Pin;
 80017b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	2312      	movs	r3, #18
 80017be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ce:	2304      	movs	r3, #4
 80017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d8:	4619      	mov	r1, r3
 80017da:	484a      	ldr	r0, [pc, #296]	; (8001904 <HAL_I2C_MspInit+0x1b8>)
 80017dc:	f003 fae4 	bl	8004da8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	4a46      	ldr	r2, [pc, #280]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 80017e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ea:	6593      	str	r3, [r2, #88]	; 0x58
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	201f      	movs	r0, #31
 80017fe:	f003 f8b0 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001802:	201f      	movs	r0, #31
 8001804:	f003 f8c9 	bl	800499a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001808:	e074      	b.n	80018f4 <HAL_I2C_MspInit+0x1a8>
  else if(i2cHandle->Instance==I2C3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d16f      	bne.n	80018f4 <HAL_I2C_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800181a:	2300      	movs	r3, #0
 800181c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fc86 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_MspInit+0xe6>
      Error_Handler();
 800182e:	f000 fbab 	bl	8001f88 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a32      	ldr	r2, [pc, #200]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800184a:	f003 fe37 	bl	80054bc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = LSM303C_I2C3_SCL_Pin|LSM303C_I2C3_SDA_Pin;
 800184e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001868:	2304      	movs	r3, #4
 800186a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001872:	4619      	mov	r1, r3
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <HAL_I2C_MspInit+0x1b8>)
 8001876:	f003 fa97 	bl	8004da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001884:	6593      	str	r3, [r2, #88]	; 0x58
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 8001894:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_I2C_MspInit+0x1c4>)
 8001896:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 800189a:	2203      	movs	r2, #3
 800189c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018ca:	f003 f887 	bl	80049dc <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_MspInit+0x18c>
      Error_Handler();
 80018d4:	f000 fb58 	bl	8001f88 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2048      	movs	r0, #72	; 0x48
 80018ea:	f003 f83a 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80018ee:	2048      	movs	r0, #72	; 0x48
 80018f0:	f003 f853 	bl	800499a <HAL_NVIC_EnableIRQ>
}
 80018f4:	bf00      	nop
 80018f6:	37b8      	adds	r7, #184	; 0xb8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40005400 	.word	0x40005400
 8001900:	40021000 	.word	0x40021000
 8001904:	48001800 	.word	0x48001800
 8001908:	40005c00 	.word	0x40005c00
 800190c:	20000388 	.word	0x20000388
 8001910:	40020030 	.word	0x40020030

08001914 <LCD_Write>:
};
// @formatter:on

/* Private function prototypes -----------------------------------------------*/
/* Private user code ---------------------------------------------------------*/
static void LCD_Write(uint8_t data) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2110      	movs	r1, #16
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <LCD_Write+0x78>)
 8001924:	f003 fbea 	bl	80050fc <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < 8; ++i) {
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e016      	b.n	800195c <LCD_Write+0x48>
		HAL_GPIO_WritePin(LCD_IO[i].port, LCD_IO[i].pin, (data >> i) & 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <LCD_Write+0x7c>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001936:	4a16      	ldr	r2, [pc, #88]	; (8001990 <LCD_Write+0x7c>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	8899      	ldrh	r1, [r3, #4]
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	fa42 f303 	asr.w	r3, r2, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	f003 fbd3 	bl	80050fc <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 8; ++i) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9e5      	bls.n	800192e <LCD_Write+0x1a>
	}

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2120      	movs	r1, #32
 8001966:	4809      	ldr	r0, [pc, #36]	; (800198c <LCD_Write+0x78>)
 8001968:	f003 fbc8 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800196c:	2002      	movs	r0, #2
 800196e:	f001 f801 	bl	8002974 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2120      	movs	r1, #32
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <LCD_Write+0x78>)
 8001978:	f003 fbc0 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800197c:	2002      	movs	r0, #2
 800197e:	f000 fff9 	bl	8002974 <HAL_Delay>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	48000c00 	.word	0x48000c00
 8001990:	20000074 	.word	0x20000074

08001994 <LCD_Read>:

static uint8_t LCD_Read(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	uint8_t data;

	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	2110      	movs	r1, #16
 800199e:	481b      	ldr	r0, [pc, #108]	; (8001a0c <LCD_Read+0x78>)
 80019a0:	f003 fbac 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80019a4:	2002      	movs	r0, #2
 80019a6:	f000 ffe5 	bl	8002974 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2120      	movs	r1, #32
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <LCD_Read+0x78>)
 80019b0:	f003 fba4 	bl	80050fc <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < 8; ++i) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	e01a      	b.n	80019f0 <LCD_Read+0x5c>
		data |= ((uint8_t) HAL_GPIO_ReadPin(LCD_IO[i].port, LCD_IO[i].pin) << i);
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <LCD_Read+0x7c>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80019c2:	4913      	ldr	r1, [pc, #76]	; (8001a10 <LCD_Read+0x7c>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	440b      	add	r3, r1
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f003 fb7c 	bl	80050cc <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	71fb      	strb	r3, [r7, #7]
	for (uint32_t i = 0; i < 8; ++i) {
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b07      	cmp	r3, #7
 80019f4:	d9e1      	bls.n	80019ba <LCD_Read+0x26>
	}
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2120      	movs	r1, #32
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <LCD_Read+0x78>)
 80019fc:	f003 fb7e 	bl	80050fc <HAL_GPIO_WritePin>

	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	20000074 	.word	0x20000074

08001a14 <LCD_ReadStatus>:

static uint8_t LCD_ReadStatus(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
	unsigned char status = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]

	GPIO_InitStruct.Pin = LCD_D0_Pin | LCD_D1_Pin | LCD_D2_Pin | LCD_D3_Pin;
 8001a2a:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001a2e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <LCD_ReadStatus+0x84>)
 8001a36:	f003 f9b7 	bl	8004da8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8001a3a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001a3e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4815      	ldr	r0, [pc, #84]	; (8001a9c <LCD_ReadStatus+0x88>)
 8001a46:	f003 f9af 	bl	8004da8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <LCD_ReadStatus+0x84>)
 8001a50:	f003 fb54 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2104      	movs	r1, #4
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <LCD_ReadStatus+0x8c>)
 8001a5a:	f003 fb4f 	bl	80050fc <HAL_GPIO_WritePin>

	status = LCD_Read();
 8001a5e:	f7ff ff99 	bl	8001994 <LCD_Read>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]

	GPIO_InitStruct.Pin = LCD_D0_Pin | LCD_D1_Pin | LCD_D2_Pin | LCD_D3_Pin;
 8001a6e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001a72:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <LCD_ReadStatus+0x84>)
 8001a7a:	f003 f995 	bl	8004da8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8001a7e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001a82:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a84:	463b      	mov	r3, r7
 8001a86:	4619      	mov	r1, r3
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <LCD_ReadStatus+0x88>)
 8001a8a:	f003 f98d 	bl	8004da8 <HAL_GPIO_Init>

	return status;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48001000 	.word	0x48001000
 8001aa0:	48001400 	.word	0x48001400

08001aa4 <LCD_Cmd>:
/* Send command to LCD module */
static void LCD_Cmd(unsigned char cmd) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <LCD_Cmd+0x34>)
 8001ab4:	f003 fb22 	bl	80050fc <HAL_GPIO_WritePin>
	LCD_Write(cmd);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff2a 	bl	8001914 <LCD_Write>

	while (LCD_ReadStatus() & 0x80)
 8001ac0:	bf00      	nop
 8001ac2:	f7ff ffa7 	bl	8001a14 <LCD_ReadStatus>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	dbf9      	blt.n	8001ac2 <LCD_Cmd+0x1e>
		;
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	48001400 	.word	0x48001400

08001adc <LCD_Data>:

/* Send data to LCD module */
static void LCD_Data(uint8_t data) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <LCD_Data+0x34>)
 8001aec:	f003 fb06 	bl	80050fc <HAL_GPIO_WritePin>
	LCD_Write(data);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff0e 	bl	8001914 <LCD_Write>

	while (LCD_ReadStatus() & 0x80)
 8001af8:	bf00      	nop
 8001afa:	f7ff ff8b 	bl	8001a14 <LCD_ReadStatus>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	dbf9      	blt.n	8001afa <LCD_Data+0x1e>
		;
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	48001400 	.word	0x48001400

08001b14 <LCD_BacklightOn>:

/* Activate Power Pin that supplies LCD module */
void LCD_BacklightOn(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BKL_GPIO_Port, LCD_BKL_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <LCD_BacklightOn+0x14>)
 8001b20:	f003 faec 	bl	80050fc <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	48000400 	.word	0x48000400

08001b2c <LCD_Init>:
void LCD_Clear(void) {
	LCD_Cmd(HD44780_CLEAR);
}

/* Initializes HD44780 LCD module in 4-bit mode */
void LCD_Init(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2120      	movs	r1, #32
 8001b34:	4816      	ldr	r0, [pc, #88]	; (8001b90 <LCD_Init+0x64>)
 8001b36:	f003 fae1 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	4815      	ldr	r0, [pc, #84]	; (8001b94 <LCD_Init+0x68>)
 8001b40:	f003 fadc 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_Delay(40); 		//
 8001b44:	2028      	movs	r0, #40	; 0x28
 8001b46:	f000 ff15 	bl	8002974 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8001b4a:	2030      	movs	r0, #48	; 0x30
 8001b4c:	f7ff ffaa 	bl	8001aa4 <LCD_Cmd>
	HAL_Delay(5); 		//
 8001b50:	2005      	movs	r0, #5
 8001b52:	f000 ff0f 	bl	8002974 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8001b56:	2030      	movs	r0, #48	; 0x30
 8001b58:	f7ff ffa4 	bl	8001aa4 <LCD_Cmd>
	HAL_Delay(1); 		//
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f000 ff09 	bl	8002974 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8001b62:	2030      	movs	r0, #48	; 0x30
 8001b64:	f7ff ff9e 	bl	8001aa4 <LCD_Cmd>

	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 8001b68:	2038      	movs	r0, #56	; 0x38
 8001b6a:	f7ff ff9b 	bl	8001aa4 <LCD_Cmd>
	LCD_Cmd(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8001b6e:	2008      	movs	r0, #8
 8001b70:	f7ff ff98 	bl	8001aa4 <LCD_Cmd>
	LCD_Cmd(HD44780_CLEAR);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff ff95 	bl	8001aa4 <LCD_Cmd>
	HAL_Delay(5);
 8001b7a:	2005      	movs	r0, #5
 8001b7c:	f000 fefa 	bl	8002974 <HAL_Delay>
	LCD_Cmd(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8001b80:	2006      	movs	r0, #6
 8001b82:	f7ff ff8f 	bl	8001aa4 <LCD_Cmd>
	LCD_Cmd(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON);
 8001b86:	200c      	movs	r0, #12
 8001b88:	f7ff ff8c 	bl	8001aa4 <LCD_Cmd>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	48000c00 	.word	0x48000c00
 8001b94:	48001400 	.word	0x48001400

08001b98 <LCD_GoTo>:

/* Set Cursor to a specified location given by row and column information
 * @param  Row Number (1 to 2)
 * @param  Column Number (1 to 16) Assuming a 2 X 16 characters display */
void LCD_GoTo(uint8_t row, uint8_t column) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
	column--;
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	71bb      	strb	r3, [r7, #6]
	switch (row) {
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d002      	beq.n	8001bba <LCD_GoTo+0x22>
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d009      	beq.n	8001bcc <LCD_GoTo+0x34>
	case 2:
		/* Set cursor to 2nd row address and add index*/
		LCD_Cmd(column |= 0x40 | 0x80);
		break;
	default:
		break;
 8001bb8:	e011      	b.n	8001bde <LCD_GoTo+0x46>
		LCD_Cmd(column |= 0x80);
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc0:	71bb      	strb	r3, [r7, #6]
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff6d 	bl	8001aa4 <LCD_Cmd>
		break;
 8001bca:	e008      	b.n	8001bde <LCD_GoTo+0x46>
		LCD_Cmd(column |= 0x40 | 0x80);
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001bd2:	71bb      	strb	r3, [r7, #6]
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff64 	bl	8001aa4 <LCD_Cmd>
		break;
 8001bdc:	bf00      	nop
	}
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <LCD_WriteTextXY>:

/* Display a characters string */
void LCD_WriteTextXY(uint8_t *data, uint8_t len, uint8_t row, uint8_t col) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	70fb      	strb	r3, [r7, #3]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70bb      	strb	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
	LCD_GoTo(row, col);
 8001c00:	787a      	ldrb	r2, [r7, #1]
 8001c02:	78bb      	ldrb	r3, [r7, #2]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ffc6 	bl	8001b98 <LCD_GoTo>
	while (len-- > 0) {
 8001c0c:	e006      	b.n	8001c1c <LCD_WriteTextXY+0x36>
		LCD_Data(*data++);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff60 	bl	8001adc <LCD_Data>
	while (len-- > 0) {
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	70fa      	strb	r2, [r7, #3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f3      	bne.n	8001c0e <LCD_WriteTextXY+0x28>
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c36:	f000 fe28 	bl	800288a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3a:	f000 f8ed 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3e:	f7ff fbf1 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c42:	f7ff fae1 	bl	8001208 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001c46:	f000 fd0b 	bl	8002660 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001c4a:	f7ff fcff 	bl	800164c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c4e:	f7ff fd3d 	bl	80016cc <MX_I2C3_Init>
  MX_TIM4_Init();
 8001c52:	f000 fb65 	bl	8002320 <MX_TIM4_Init>
  MX_TIM16_Init();
 8001c56:	f000 fbf7 	bl	8002448 <MX_TIM16_Init>
  MX_ADC3_Init();
 8001c5a:	f7ff f981 	bl	8000f60 <MX_ADC3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char lcd[16];
  LCD_Init();
 8001c5e:	f7ff ff65 	bl	8001b2c <LCD_Init>
  LCD_BacklightOn();
 8001c62:	f7ff ff57 	bl	8001b14 <LCD_BacklightOn>
uint32_t i=0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t adcConversionValue[]={0,0};
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	803b      	strh	r3, [r7, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	807b      	strh	r3, [r7, #2]

 uint16_t  ADC_TEMP_3V3_30C =  (uint16_t*)(0x1FFF7A2C);
 8001c72:	f647 232c 	movw	r3, #31276	; 0x7a2c
 8001c76:	847b      	strh	r3, [r7, #34]	; 0x22
 uint16_t  ADC_TEMP_3V3_110C = (uint16_t*)(0x1FFF7A2E);
 8001c78:	f647 232e 	movw	r3, #31278	; 0x7a2e
 8001c7c:	843b      	strh	r3, [r7, #32]

float adcCalTemp30C = ADC_TEMP_3V3_30C * 1.1;
 8001c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc5f 	bl	8000544 <__aeabi_i2d>
 8001c86:	a362      	add	r3, pc, #392	; (adr r3, 8001e10 <main+0x1e0>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fcc4 	bl	8000618 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff96 	bl	8000bc8 <__aeabi_d2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	61fb      	str	r3, [r7, #28]
float adcCalTemp110C = ADC_TEMP_3V3_110C * 1.1;
 8001ca0:	8c3b      	ldrh	r3, [r7, #32]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc4e 	bl	8000544 <__aeabi_i2d>
 8001ca8:	a359      	add	r3, pc, #356	; (adr r3, 8001e10 <main+0x1e0>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fcb3 	bl	8000618 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff85 	bl	8000bc8 <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	61bb      	str	r3, [r7, #24]





if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001cc2:	217f      	movs	r1, #127	; 0x7f
 8001cc4:	484c      	ldr	r0, [pc, #304]	; (8001df8 <main+0x1c8>)
 8001cc6:	f002 fcdf 	bl	8004688 <HAL_ADCEx_Calibration_Start>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <main+0xa4>
	Error_Handler();
 8001cd0:	f000 f95a 	bl	8001f88 <Error_Handler>

	while (1) {



		if(HAL_ADC_Start(&hadc3) != HAL_OK)
 8001cd4:	4848      	ldr	r0, [pc, #288]	; (8001df8 <main+0x1c8>)
 8001cd6:	f001 fad3 	bl	8003280 <HAL_ADC_Start>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <main+0xb4>
			Error_Handler();
 8001ce0:	f000 f952 	bl	8001f88 <Error_Handler>

		//oczekiewanie na zakonczenie pomiaru na czujniku tempteratury
		while(__HAL_ADC_GET_FLAG(&hadc3, ADC_FLAG_EOC) != SET)
 8001ce4:	bf00      	nop
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <main+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d1f8      	bne.n	8001ce6 <main+0xb6>
			;


		adcConversionValue[0] = HAL_ADC_GetValue(&hadc3);
 8001cf4:	4840      	ldr	r0, [pc, #256]	; (8001df8 <main+0x1c8>)
 8001cf6:	f001 fb7d 	bl	80033f4 <HAL_ADC_GetValue>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	803b      	strh	r3, [r7, #0]



		//oczekiwanie na zakonczenie pomiaru na potencjometrze
		while(__HAL_ADC_GET_FLAG(&hadc3, ADC_FLAG_EOC) != SET);
 8001d00:	bf00      	nop
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <main+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d1f8      	bne.n	8001d02 <main+0xd2>


		adcConversionValue[1] = HAL_ADC_GetValue(&hadc3);
 8001d10:	4839      	ldr	r0, [pc, #228]	; (8001df8 <main+0x1c8>)
 8001d12:	f001 fb6f 	bl	80033f4 <HAL_ADC_GetValue>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	807b      	strh	r3, [r7, #2]
		//Naprzemienne wys zmierzonej wartosci


		sprintf(lcd, "%f",  adcConversionValue[1] * 3.3f/4096.0f);
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d26:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001dfc <main+0x1cc>
 8001d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e00 <main+0x1d0>
 8001d32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d36:	ee16 0a90 	vmov	r0, s13
 8001d3a:	f7fe fc15 	bl	8000568 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	1d38      	adds	r0, r7, #4
 8001d44:	492f      	ldr	r1, [pc, #188]	; (8001e04 <main+0x1d4>)
 8001d46:	f007 fe63 	bl	8009a10 <siprintf>
				 LCD_WriteTextXY((uint8_t*) lcd, strlen(lcd), 1, 1);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fa4f 	bl	80001f0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	1d38      	adds	r0, r7, #4
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f7ff ff43 	bl	8001be6 <LCD_WriteTextXY>

				 float temperature = ((float)(adcConversionValue[0]) - adcCalTemp30C)/(adcCalTemp110C - adcCalTemp30C) * (110.0F - 30.0F) + 30.0F;
 8001d60:	883b      	ldrh	r3, [r7, #0]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d72:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d82:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e08 <main+0x1d8>
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d92:	edc7 7a05 	vstr	s15, [r7, #20]

				   sprintf(lcd, "%f",  temperature);
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7fe fbe6 	bl	8000568 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	1d38      	adds	r0, r7, #4
 8001da2:	4918      	ldr	r1, [pc, #96]	; (8001e04 <main+0x1d4>)
 8001da4:	f007 fe34 	bl	8009a10 <siprintf>
				   				 LCD_WriteTextXY((uint8_t*) lcd, strlen(lcd), 2, 1);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fa20 	bl	80001f0 <strlen>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b2d9      	uxtb	r1, r3
 8001db4:	1d38      	adds	r0, r7, #4
 8001db6:	2301      	movs	r3, #1
 8001db8:	2202      	movs	r2, #2
 8001dba:	f7ff ff14 	bl	8001be6 <LCD_WriteTextXY>




		LEDs_SetValue((1<<(i++ & 1)) | (analogWatchdogStatus << 7));
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	627a      	str	r2, [r7, #36]	; 0x24
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2201      	movs	r2, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <main+0x1dc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fa4c 	bl	800127c <LEDs_SetValue>
		HAL_Delay(1000);
 8001de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de8:	f000 fdc4 	bl	8002974 <HAL_Delay>
		analogWatchdogStatus = RESET;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <main+0x1dc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
	while (1) {
 8001df2:	e76f      	b.n	8001cd4 <main+0xa4>
 8001df4:	f3af 8000 	nop.w
 8001df8:	200002d4 	.word	0x200002d4
 8001dfc:	40533333 	.word	0x40533333
 8001e00:	45800000 	.word	0x45800000
 8001e04:	0800be80 	.word	0x0800be80
 8001e08:	42a00000 	.word	0x42a00000
 8001e0c:	200002c4 	.word	0x200002c4
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	3ff19999 	.word	0x3ff19999

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b096      	sub	sp, #88	; 0x58
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	2244      	movs	r2, #68	; 0x44
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f007 f980 	bl	800912c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e3e:	f003 fae7 	bl	8005410 <HAL_PWREx_ControlVoltageScaling>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e48:	f000 f89e 	bl	8001f88 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001e4c:	2318      	movs	r3, #24
 8001e4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2302      	movs	r3, #2
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e64:	2301      	movs	r3, #1
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001e6c:	2328      	movs	r3, #40	; 0x28
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e70:	2302      	movs	r3, #2
 8001e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fb2b 	bl	80054dc <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001e8c:	f000 f87c 	bl	8001f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2303      	movs	r3, #3
 8001e96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 ff3d 	bl	8005d28 <HAL_RCC_ClockConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001eb4:	f000 f868 	bl	8001f88 <Error_Handler>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3758      	adds	r7, #88	; 0x58
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	SEG_Callback();
 8001ec4:	f7ff f95a 	bl	800117c <SEG_Callback>
	SW_SysTickCallback();
 8001ec8:	f7ff fa10 	bl	80012ec <SW_SysTickCallback>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16){
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d105      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x1e>
		second++;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001eec:	801a      	strh	r2, [r3, #0]
	}
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40014400 	.word	0x40014400
 8001f00:	200002c0 	.word	0x200002c0

08001f04 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d129      	bne.n	8001f6a <HAL_TIM_IC_CaptureCallback+0x66>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7f1b      	ldrb	r3, [r3, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d125      	bne.n	8001f6a <HAL_TIM_IC_CaptureCallback+0x66>
			uint32_t microsecond = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) * 20;
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f005 fa73 	bl	800740c <HAL_TIM_ReadCapturedValue>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	60fb      	str	r3, [r7, #12]
			timeStamp.second=second;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f38:	801a      	strh	r2, [r3, #0]
			timeStamp.milisecond = (uint16_t)(microsecond/1000);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f48:	805a      	strh	r2, [r3, #2]
			timeStamp.microsecond= (uint16_t)(microsecond%1000);
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f62:	809a      	strh	r2, [r3, #4]
			update=SET;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40014400 	.word	0x40014400
 8001f78:	200002c0 	.word	0x200002c0
 8001f7c:	2000041c 	.word	0x2000041c
 8001f80:	10624dd3 	.word	0x10624dd3
 8001f84:	200002c2 	.word	0x200002c2

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_MspInit+0x44>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <HardFault_Handler+0x4>

08001fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 fca5 	bl	8002934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001fea:	f002 fcf0 	bl	80049ce <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <DMA1_Channel3_IRQHandler+0x10>)
 8001ffa:	f002 fe26 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000388 	.word	0x20000388

08002008 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800200e:	f004 fe74 	bl	8006cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000470 	.word	0x20000470

0800201c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM4_IRQHandler+0x10>)
 8002022:	f004 fe6a 	bl	8006cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000424 	.word	0x20000424

08002030 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <I2C1_EV_IRQHandler+0x10>)
 8002036:	f003 f92b 	bl	8005290 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003d0 	.word	0x200003d0

08002044 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002048:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800204c:	f003 f86e 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002054:	f003 f86a 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002058:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800205c:	f003 f866 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002064:	f003 f862 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <ADC3_IRQHandler+0x10>)
 8002072:	f001 f9cd 	bl	8003410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002d4 	.word	0x200002d4

08002080 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_tx);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA2_Channel6_IRQHandler+0x10>)
 8002086:	f002 fde0 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000540 	.word	0x20000540

08002094 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA2_Channel7_IRQHandler+0x10>)
 800209a:	f002 fdd6 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000588 	.word	0x20000588

080020a8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <LPUART1_IRQHandler+0x10>)
 80020ae:	f006 f997 	bl	80083e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200004bc 	.word	0x200004bc

080020bc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <I2C3_EV_IRQHandler+0x10>)
 80020c2:	f003 f8e5 	bl	8005290 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000033c 	.word	0x2000033c

080020d0 <__io_putchar>:
char *__env[1] = { 0 };
char **environ = __env;


/* Functions */
int __io_putchar(int ch) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80020d8:	1d39      	adds	r1, r7, #4
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	2201      	movs	r2, #1
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <__io_putchar+0x20>)
 80020e2:	f006 f817 	bl	8008114 <HAL_UART_Transmit>
	return ch;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200004bc 	.word	0x200004bc

080020f4 <__io_getchar>:

int __io_getchar(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]

	__HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <__io_getchar+0x38>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2208      	movs	r2, #8
 8002104:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&hlpuart1, &ch, 1, HAL_MAX_DELAY);
 8002106:	1df9      	adds	r1, r7, #7
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	2201      	movs	r2, #1
 800210e:	4807      	ldr	r0, [pc, #28]	; (800212c <__io_getchar+0x38>)
 8002110:	f006 f894 	bl	800823c <HAL_UART_Receive>
	HAL_UART_Transmit(&hlpuart1, &ch, 1, HAL_MAX_DELAY);	// Echo
 8002114:	1df9      	adds	r1, r7, #7
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	2201      	movs	r2, #1
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <__io_getchar+0x38>)
 800211e:	f005 fff9 	bl	8008114 <HAL_UART_Transmit>
	return ch;
 8002122:	79fb      	ldrb	r3, [r7, #7]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200004bc 	.word	0x200004bc

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214a:	f006 ffc5 	bl	80090d8 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
	return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002172:	e7fe      	b.n	8002172 <_exit+0x12>

08002174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002186:	f7ff ffb5 	bl	80020f4 <__io_getchar>
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
	}

return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff81 	bl	80020d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf1      	blt.n	80021c0 <_write+0x12>
	}
	return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_close>:

int _close(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return -1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_isatty>:

int _isatty(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f006 ff2a 	bl	80090d8 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20040000 	.word	0x20040000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	200002c8 	.word	0x200002c8
 80022b8:	200005e8 	.word	0x200005e8

080022bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <SystemInit+0x5c>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <SystemInit+0x5c>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <SystemInit+0x60>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <SystemInit+0x60>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <SystemInit+0x60>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <SystemInit+0x60>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <SystemInit+0x60>)
 80022e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SystemInit+0x60>)
 80022f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <SystemInit+0x60>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <SystemInit+0x60>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <SystemInit+0x60>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	40021000 	.word	0x40021000

08002320 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <MX_TIM4_Init+0x120>)
 8002354:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <MX_TIM4_Init+0x124>)
 8002356:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <MX_TIM4_Init+0x120>)
 800235a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800235e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <MX_TIM4_Init+0x120>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <MX_TIM4_Init+0x120>)
 8002368:	f242 720f 	movw	r2, #9999	; 0x270f
 800236c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b34      	ldr	r3, [pc, #208]	; (8002440 <MX_TIM4_Init+0x120>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <MX_TIM4_Init+0x120>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800237a:	4831      	ldr	r0, [pc, #196]	; (8002440 <MX_TIM4_Init+0x120>)
 800237c:	f004 fba4 	bl	8006ac8 <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8002386:	f7ff fdff 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002394:	4619      	mov	r1, r3
 8002396:	482a      	ldr	r0, [pc, #168]	; (8002440 <MX_TIM4_Init+0x120>)
 8002398:	f004 ff72 	bl	8007280 <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80023a2:	f7ff fdf1 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023a6:	4826      	ldr	r0, [pc, #152]	; (8002440 <MX_TIM4_Init+0x120>)
 80023a8:	f004 fbe5 	bl	8006b76 <HAL_TIM_PWM_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80023b2:	f7ff fde9 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	481e      	ldr	r0, [pc, #120]	; (8002440 <MX_TIM4_Init+0x120>)
 80023c6:	f005 fdb1 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80023d0:	f7ff fdda 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	; 0x60
 80023d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80023d8:	2332      	movs	r3, #50	; 0x32
 80023da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	2200      	movs	r2, #0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4815      	ldr	r0, [pc, #84]	; (8002440 <MX_TIM4_Init+0x120>)
 80023ec:	f004 fe38 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80023f6:	f7ff fdc7 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 80023fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	2204      	movs	r2, #4
 8002404:	4619      	mov	r1, r3
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <MX_TIM4_Init+0x120>)
 8002408:	f004 fe2a 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 8002412:	f7ff fdb9 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8002416:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	2208      	movs	r2, #8
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <MX_TIM4_Init+0x120>)
 8002424:	f004 fe1c 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 800242e:	f7ff fdab 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <MX_TIM4_Init+0x120>)
 8002434:	f000 f8bc 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	; 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000424 	.word	0x20000424
 8002444:	40000800 	.word	0x40000800

08002448 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800244e:	463b      	mov	r3, r7
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <MX_TIM16_Init+0x90>)
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <MX_TIM16_Init+0x94>)
 800245e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1599;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM16_Init+0x90>)
 8002462:	f240 623f 	movw	r2, #1599	; 0x63f
 8002466:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM16_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_TIM16_Init+0x90>)
 8002470:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002474:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_TIM16_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_TIM16_Init+0x90>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <MX_TIM16_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002488:	4813      	ldr	r0, [pc, #76]	; (80024d8 <MX_TIM16_Init+0x90>)
 800248a:	f004 fb1d 	bl	8006ac8 <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8002494:	f7ff fd78 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <MX_TIM16_Init+0x90>)
 800249a:	f004 fbcd 	bl	8006c38 <HAL_TIM_IC_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80024a4:	f7ff fd70 	bl	8001f88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024a8:	2302      	movs	r3, #2
 80024aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024ac:	2301      	movs	r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <MX_TIM16_Init+0x90>)
 80024c0:	f004 fd3a 	bl	8006f38 <HAL_TIM_IC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 80024ca:	f7ff fd5d 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000470 	.word	0x20000470
 80024dc:	40014400 	.word	0x40014400

080024e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_TIM_Base_MspInit+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d114      	bne.n	800252c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	201e      	movs	r0, #30
 8002520:	f002 fa1f 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002524:	201e      	movs	r0, #30
 8002526:	f002 fa38 	bl	800499a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800252a:	e034      	b.n	8002596 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_TIM_Base_MspInit+0xc8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12f      	bne.n	8002596 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	6613      	str	r3, [r2, #96]	; 0x60
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_TIM_Base_MspInit+0xc4>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002576:	230e      	movs	r3, #14
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	480a      	ldr	r0, [pc, #40]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002582:	f002 fc11 	bl	8004da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2019      	movs	r0, #25
 800258c:	f002 f9e9 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002590:	2019      	movs	r0, #25
 8002592:	f002 fa02 	bl	800499a <HAL_NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	48001000 	.word	0x48001000

080025b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_TIM_MspPostInit+0xa0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d139      	bne.n	8002646 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_TIM_MspPostInit+0xa4>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002602:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002614:	2302      	movs	r3, #2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	480e      	ldr	r0, [pc, #56]	; (8002658 <HAL_TIM_MspPostInit+0xa8>)
 8002620:	f002 fbc2 	bl	8004da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002636:	2302      	movs	r3, #2
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <HAL_TIM_MspPostInit+0xac>)
 8002642:	f002 fbb1 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40000800 	.word	0x40000800
 8002654:	40021000 	.word	0x40021000
 8002658:	48000c00 	.word	0x48000c00
 800265c:	48000400 	.word	0x48000400

08002660 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <MX_LPUART1_UART_Init+0x54>)
 8002668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <MX_LPUART1_UART_Init+0x50>)
 800269e:	f005 fceb 	bl	8008078 <HAL_UART_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80026a8:	f7ff fc6e 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200004bc 	.word	0x200004bc
 80026b4:	40008000 	.word	0x40008000

080026b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0ac      	sub	sp, #176	; 0xb0
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	228c      	movs	r2, #140	; 0x8c
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f006 fd27 	bl	800912c <memset>
  if(uartHandle->Instance==LPUART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_UART_MspInit+0x164>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f040 8095 	bne.w	8002814 <HAL_UART_MspInit+0x15c>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026ea:	2320      	movs	r3, #32
 80026ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fd1c 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002702:	f7ff fc41 	bl	8001f88 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002706:	4b46      	ldr	r3, [pc, #280]	; (8002820 <HAL_UART_MspInit+0x168>)
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	4a45      	ldr	r2, [pc, #276]	; (8002820 <HAL_UART_MspInit+0x168>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002712:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_UART_MspInit+0x168>)
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_UART_MspInit+0x168>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <HAL_UART_MspInit+0x168>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_UART_MspInit+0x168>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002736:	2303      	movs	r3, #3
 8002738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800274e:	2308      	movs	r3, #8
 8002750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002758:	4619      	mov	r1, r3
 800275a:	4832      	ldr	r0, [pc, #200]	; (8002824 <HAL_UART_MspInit+0x16c>)
 800275c:	f002 fb24 	bl	8004da8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8002760:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002762:	4a32      	ldr	r2, [pc, #200]	; (800282c <HAL_UART_MspInit+0x174>)
 8002764:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002768:	2204      	movs	r2, #4
 800276a:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_UART_MspInit+0x170>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_UART_MspInit+0x170>)
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_UART_MspInit+0x170>)
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002792:	2200      	movs	r2, #0
 8002794:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8002796:	4824      	ldr	r0, [pc, #144]	; (8002828 <HAL_UART_MspInit+0x170>)
 8002798:	f002 f920 	bl	80049dc <HAL_DMA_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80027a2:	f7ff fbf1 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_UART_MspInit+0x170>)
 80027aa:	671a      	str	r2, [r3, #112]	; 0x70
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_UART_MspInit+0x170>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART_TX Init */
    hdma_lpuart_tx.Instance = DMA2_Channel6;
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_UART_MspInit+0x17c>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_lpuart_tx.Init.Request = DMA_REQUEST_4;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027ba:	2204      	movs	r2, #4
 80027bc:	605a      	str	r2, [r3, #4]
    hdma_lpuart_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027c0:	2210      	movs	r2, #16
 80027c2:	609a      	str	r2, [r3, #8]
    hdma_lpuart_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
    hdma_lpuart_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	611a      	str	r2, [r3, #16]
    hdma_lpuart_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]
    hdma_lpuart_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
    hdma_lpuart_tx.Init.Mode = DMA_NORMAL;
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
    hdma_lpuart_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_tx) != HAL_OK)
 80027e8:	4811      	ldr	r0, [pc, #68]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027ea:	f002 f8f7 	bl	80049dc <HAL_DMA_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80027f4:	f7ff fbc8 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart_tx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_UART_MspInit+0x178>)
 80027fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_UART_MspInit+0x178>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f002 f8aa 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800280e:	2046      	movs	r0, #70	; 0x46
 8002810:	f002 f8c3 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002814:	bf00      	nop
 8002816:	37b0      	adds	r7, #176	; 0xb0
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40008000 	.word	0x40008000
 8002820:	40021000 	.word	0x40021000
 8002824:	48000800 	.word	0x48000800
 8002828:	20000588 	.word	0x20000588
 800282c:	40020480 	.word	0x40020480
 8002830:	20000540 	.word	0x20000540
 8002834:	4002046c 	.word	0x4002046c

08002838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800283c:	f7ff fd3e 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002840:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002842:	e003      	b.n	800284c <LoopCopyDataInit>

08002844 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002846:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002848:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800284a:	3104      	adds	r1, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <LoopForever+0xa>)
	ldr	r3, =_edata
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002850:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002852:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002854:	d3f6      	bcc.n	8002844 <CopyDataInit>
	ldr	r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002858:	e002      	b.n	8002860 <LoopFillZerobss>

0800285a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800285a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800285c:	f842 3b04 	str.w	r3, [r2], #4

08002860 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <LoopForever+0x16>)
	cmp	r2, r3
 8002862:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002864:	d3f9      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f006 fc3d 	bl	80090e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286a:	f7ff f9e1 	bl	8001c30 <main>

0800286e <LoopForever>:

LoopForever:
    b LoopForever
 800286e:	e7fe      	b.n	800286e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002870:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8002874:	0800c2c4 	.word	0x0800c2c4
	ldr	r0, =_sdata
 8002878:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800287c:	20000290 	.word	0x20000290
	ldr	r2, =_sbss
 8002880:	20000290 	.word	0x20000290
	ldr	r3, = _ebss
 8002884:	200005e4 	.word	0x200005e4

08002888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC1_2_IRQHandler>

0800288a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002894:	2003      	movs	r0, #3
 8002896:	f002 f859 	bl	800494c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289a:	200f      	movs	r0, #15
 800289c:	f000 f80e 	bl	80028bc <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	e001      	b.n	80028b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ac:	f7ff fb72 	bl	8001f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_InitTick+0x6c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_InitTick+0x70>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_InitTick+0x6c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 f865 	bl	80049b6 <HAL_SYSTICK_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d809      	bhi.n	800290c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	2200      	movs	r2, #0
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f002 f82f 	bl	8004962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_InitTick+0x74>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e007      	b.n	800291c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e004      	b.n	800291c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	e001      	b.n	800291c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200000bc 	.word	0x200000bc
 800292c:	200000b4 	.word	0x200000b4
 8002930:	200000b8 	.word	0x200000b8

08002934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_IncTick+0x20>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_IncTick+0x24>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4413      	add	r3, r2
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_IncTick+0x24>)
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	200000bc 	.word	0x200000bc
 8002958:	200005d0 	.word	0x200005d0

0800295c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <HAL_GetTick+0x14>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	200005d0 	.word	0x200005d0

08002974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff ffee 	bl	800295c <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d005      	beq.n	800299a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_Delay+0x44>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800299a:	bf00      	nop
 800299c:	f7ff ffde 	bl	800295c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d8f7      	bhi.n	800299c <HAL_Delay+0x28>
  {
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200000bc 	.word	0x200000bc

080029bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <LL_ADC_SetOffset+0x44>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	03fff000 	.word	0x03fff000

08002a6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3360      	adds	r3, #96	; 0x60
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	615a      	str	r2, [r3, #20]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3330      	adds	r3, #48	; 0x30
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	4413      	add	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	211f      	movs	r1, #31
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	f003 011f 	and.w	r1, r3, #31
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	0e5b      	lsrs	r3, r3, #25
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	0d1b      	lsrs	r3, r3, #20
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2107      	movs	r1, #7
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	401a      	ands	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	0d1b      	lsrs	r3, r3, #20
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0318 	and.w	r3, r3, #24
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c14:	40d9      	lsrs	r1, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	400b      	ands	r3, r1
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	0007ffff 	.word	0x0007ffff

08002c38 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	330c      	adds	r3, #12
 8002c48:	4618      	mov	r0, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	0d1b      	lsrs	r3, r3, #20
 8002c4e:	f003 0103 	and.w	r1, r3, #3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0201 	and.w	r2, r3, #1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8002c72:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	400b      	ands	r3, r1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b087      	sub	sp, #28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3320      	adds	r3, #32
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	4413      	add	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0419      	lsls	r1, r3, #16
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6093      	str	r3, [r2, #8]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d46:	d101      	bne.n	8002d4c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <LL_ADC_IsEnabled+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_ADC_IsEnabled+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_IsDisableOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_IsDisableOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d101      	bne.n	8002eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	605a      	str	r2, [r3, #4]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	605a      	str	r2, [r3, #4]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	605a      	str	r2, [r3, #4]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	605a      	str	r2, [r3, #4]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e139      	b.n	800325a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f84f 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fe90 	bl	8002d32 <LL_ADC_IsDeepPowerDownEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe76 	bl	8002d0e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff feab 	bl	8002d82 <LL_ADC_IsInternalRegulatorEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fe8f 	bl	8002d5a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303c:	4b89      	ldr	r3, [pc, #548]	; (8003264 <HAL_ADC_Init+0x298>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	4a89      	ldr	r2, [pc, #548]	; (8003268 <HAL_ADC_Init+0x29c>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003050:	e002      	b.n	8003058 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3b01      	subs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fe8d 	bl	8002d82 <LL_ADC_IsInternalRegulatorEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff feed 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8003094:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80d2 	bne.w	8003248 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80ce 	bne.w	8003248 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe9a 	bl	8002dfa <LL_ADC_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030cc:	4867      	ldr	r0, [pc, #412]	; (800326c <HAL_ADC_Init+0x2a0>)
 80030ce:	f7ff fe94 	bl	8002dfa <LL_ADC_IsEnabled>
 80030d2:	4604      	mov	r4, r0
 80030d4:	4866      	ldr	r0, [pc, #408]	; (8003270 <HAL_ADC_Init+0x2a4>)
 80030d6:	f7ff fe90 	bl	8002dfa <LL_ADC_IsEnabled>
 80030da:	4603      	mov	r3, r0
 80030dc:	431c      	orrs	r4, r3
 80030de:	4865      	ldr	r0, [pc, #404]	; (8003274 <HAL_ADC_Init+0x2a8>)
 80030e0:	f7ff fe8b 	bl	8002dfa <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4323      	orrs	r3, r4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4861      	ldr	r0, [pc, #388]	; (8003278 <HAL_ADC_Init+0x2ac>)
 80030f4:	f7ff fc62 	bl	80029bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7e5b      	ldrb	r3, [r3, #25]
 80030fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003102:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003108:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800310e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003116:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d106      	bne.n	8003134 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	045b      	lsls	r3, r3, #17
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	4b49      	ldr	r3, [pc, #292]	; (800327c <HAL_ADC_Init+0x2b0>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	69b9      	ldr	r1, [r7, #24]
 8003160:	430b      	orrs	r3, r1
 8003162:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe80 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 800316e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fe8d 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 800317a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d140      	bne.n	8003204 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d13d      	bne.n	8003204 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e1b      	ldrb	r3, [r3, #24]
 8003190:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003192:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031aa:	f023 0306 	bic.w	r3, r3, #6
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d118      	bne.n	80031f4 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031d8:	4311      	orrs	r1, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031e4:	430a      	orrs	r2, r1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e007      	b.n	8003204 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10c      	bne.n	8003226 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f023 010f 	bic.w	r1, r3, #15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
 8003224:	e007      	b.n	8003236 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 020f 	bic.w	r2, r2, #15
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	659a      	str	r2, [r3, #88]	; 0x58
 8003246:	e007      	b.n	8003258 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f043 0210 	orr.w	r2, r3, #16
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003258:	7ffb      	ldrb	r3, [r7, #31]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	bf00      	nop
 8003264:	200000b4 	.word	0x200000b4
 8003268:	053e2d63 	.word	0x053e2d63
 800326c:	50040000 	.word	0x50040000
 8003270:	50040100 	.word	0x50040100
 8003274:	50040200 	.word	0x50040200
 8003278:	50040300 	.word	0x50040300
 800327c:	fff0c007 	.word	0xfff0c007

08003280 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003288:	4857      	ldr	r0, [pc, #348]	; (80033e8 <HAL_ADC_Start+0x168>)
 800328a:	f7ff fd24 	bl	8002cd6 <LL_ADC_GetMultimode>
 800328e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fdea 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 809c 	bne.w	80033da <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_Start+0x30>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e097      	b.n	80033e0 <HAL_ADC_Start+0x160>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f001 f8f7 	bl	80044ac <ADC_Enable>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8083 	bne.w	80033d0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a42      	ldr	r2, [pc, #264]	; (80033ec <HAL_ADC_Start+0x16c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d002      	beq.n	80032ee <HAL_ADC_Start+0x6e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	e000      	b.n	80032f0 <HAL_ADC_Start+0x70>
 80032ee:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_ADC_Start+0x170>)
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d002      	beq.n	80032fe <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d106      	bne.n	8003326 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f023 0206 	bic.w	r2, r3, #6
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
 8003324:	e002      	b.n	800332c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	221c      	movs	r2, #28
 8003332:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_ADC_Start+0x16c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d002      	beq.n	800334c <HAL_ADC_Start+0xcc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e000      	b.n	800334e <HAL_ADC_Start+0xce>
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_ADC_Start+0x170>)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4293      	cmp	r3, r2
 8003354:	d008      	beq.n	8003368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d002      	beq.n	8003368 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d114      	bne.n	8003392 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800337e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fd5b 	bl	8002e46 <LL_ADC_REG_StartConversion>
 8003390:	e025      	b.n	80033de <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <HAL_ADC_Start+0x16c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d002      	beq.n	80033ae <HAL_ADC_Start+0x12e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e000      	b.n	80033b0 <HAL_ADC_Start+0x130>
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_ADC_Start+0x170>)
 80033b0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00f      	beq.n	80033de <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	; 0x58
 80033ce:	e006      	b.n	80033de <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80033d8:	e001      	b.n	80033de <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033da:	2302      	movs	r3, #2
 80033dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	50040300 	.word	0x50040300
 80033ec:	50040100 	.word	0x50040100
 80033f0:	50040000 	.word	0x50040000

080033f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800342c:	4882      	ldr	r0, [pc, #520]	; (8003638 <HAL_ADC_IRQHandler+0x228>)
 800342e:	f7ff fc52 	bl	8002cd6 <LL_ADC_GetMultimode>
 8003432:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <HAL_ADC_IRQHandler+0x5e>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 f999 	bl	8004798 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2202      	movs	r2, #2
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_ADC_IRQHandler+0x72>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8083 	beq.w	8003594 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d07d      	beq.n	8003594 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fb1d 	bl	8002af4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d062      	beq.n	8003586 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_ADC_IRQHandler+0x22c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_IRQHandler+0xc0>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_IRQHandler+0xc2>
 80034d0:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_ADC_IRQHandler+0x230>)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d008      	beq.n	80034ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d002      	beq.n	80034ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d104      	bne.n	80034f6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	e00c      	b.n	8003510 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a50      	ldr	r2, [pc, #320]	; (800363c <HAL_ADC_IRQHandler+0x22c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	e000      	b.n	8003508 <HAL_ADC_IRQHandler+0xf8>
 8003506:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <HAL_ADC_IRQHandler+0x230>)
 8003508:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d135      	bne.n	8003586 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d12e      	bne.n	8003586 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fc9e 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11a      	bne.n	800356e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020c 	bic.w	r2, r2, #12
 8003546:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d112      	bne.n	8003586 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	659a      	str	r2, [r3, #88]	; 0x58
 800356c:	e00b      	b.n	8003586 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f95c 	bl	8003844 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	220c      	movs	r2, #12
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x198>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 809f 	beq.w	80036f2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8099 	beq.w	80036f2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fac8 	bl	8002b72 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035e2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fa83 	bl	8002af4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035ee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_ADC_IRQHandler+0x22c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d002      	beq.n	8003600 <HAL_ADC_IRQHandler+0x1f0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_ADC_IRQHandler+0x1f2>
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_ADC_IRQHandler+0x230>)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4293      	cmp	r3, r2
 8003608:	d008      	beq.n	800361c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d002      	beq.n	800361c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b07      	cmp	r3, #7
 800361a:	d104      	bne.n	8003626 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	e013      	b.n	800364e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <HAL_ADC_IRQHandler+0x22c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_ADC_IRQHandler+0x234>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_ADC_IRQHandler+0x236>
 8003636:	bf00      	nop
 8003638:	50040300 	.word	0x50040300
 800363c:	50040100 	.word	0x50040100
 8003640:	50040000 	.word	0x50040000
 8003644:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_ADC_IRQHandler+0x42c>)
 8003646:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d047      	beq.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_ADC_IRQHandler+0x25e>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d03f      	beq.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13a      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d133      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d12e      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fc02 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11a      	bne.n	80036cc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d112      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58
 80036ca:	e00b      	b.n	80036e4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f043 0210 	orr.w	r2, r3, #16
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 f82f 	bl	8004748 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2260      	movs	r2, #96	; 0x60
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d011      	beq.n	8003720 <HAL_ADC_IRQHandler+0x310>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8a0 	bl	8003858 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_ADC_IRQHandler+0x340>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 f815 	bl	8004770 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <HAL_ADC_IRQHandler+0x370>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 f807 	bl	8004784 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x3e8>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d031      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	e014      	b.n	80037cc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037a8:	4825      	ldr	r0, [pc, #148]	; (8003840 <HAL_ADC_IRQHandler+0x430>)
 80037aa:	f7ff faa2 	bl	8002cf2 <LL_ADC_GetMultiDMATransfer>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e008      	b.n	80037cc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80037c8:	2301      	movs	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10e      	bne.n	80037f0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f83e 	bl	800386c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2210      	movs	r2, #16
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <HAL_ADC_IRQHandler+0x424>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	f043 0208 	orr.w	r2, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 ff94 	bl	800475c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003834:	bf00      	nop
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	50040000 	.word	0x50040000
 8003840:	50040300 	.word	0x50040300

08003844 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b0b6      	sub	sp, #216	; 0xd8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x22>
 800389e:	2302      	movs	r3, #2
 80038a0:	e3e3      	b.n	800406a <HAL_ADC_ConfigChannel+0x7ea>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fadd 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 83c4 	bne.w	8004044 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d824      	bhi.n	800390e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	3b02      	subs	r3, #2
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d81b      	bhi.n	8003906 <HAL_ADC_ConfigChannel+0x86>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_ADC_ConfigChannel+0x54>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038ed 	.word	0x080038ed
 80038dc:	080038f5 	.word	0x080038f5
 80038e0:	080038fd 	.word	0x080038fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	220c      	movs	r2, #12
 80038e8:	605a      	str	r2, [r3, #4]
          break;
 80038ea:	e011      	b.n	8003910 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2212      	movs	r2, #18
 80038f0:	605a      	str	r2, [r3, #4]
          break;
 80038f2:	e00d      	b.n	8003910 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2218      	movs	r2, #24
 80038f8:	605a      	str	r2, [r3, #4]
          break;
 80038fa:	e009      	b.n	8003910 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003902:	605a      	str	r2, [r3, #4]
          break;
 8003904:	e004      	b.n	8003910 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2206      	movs	r2, #6
 800390a:	605a      	str	r2, [r3, #4]
          break;
 800390c:	e000      	b.n	8003910 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800390e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	f7ff f8fc 	bl	8002b1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff faa1 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 800392c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff faad 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 800393a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800393e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 81c1 	bne.w	8003cca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 81bc 	bne.w	8003cca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800395a:	d10f      	bne.n	800397c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2200      	movs	r2, #0
 8003966:	4619      	mov	r1, r3
 8003968:	f7ff f916 	bl	8002b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f8aa 	bl	8002ace <LL_ADC_SetSamplingTimeCommonConfig>
 800397a:	e00e      	b.n	800399a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	461a      	mov	r2, r3
 800398a:	f7ff f905 	bl	8002b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f89a 	bl	8002ace <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d00a      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6919      	ldr	r1, [r3, #16]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039cc:	f7ff f82a 	bl	8002a24 <LL_ADC_SetOffset>
 80039d0:	e17b      	b.n	8003cca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f847 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x17e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f83c 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	e01e      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x1bc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff f831 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	e004      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x1d4>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	e018      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x206>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e004      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d106      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f800 	bl	8002a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe ffe4 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x244>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ffd9 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003aba:	4603      	mov	r3, r0
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	f003 021f 	and.w	r2, r3, #31
 8003ac2:	e01e      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x282>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ffce 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e004      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x29a>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	e018      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x2cc>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003b3e:	2320      	movs	r3, #32
 8003b40:	e004      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d106      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ff9d 	bl	8002a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe ff81 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x30a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ff76 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	e01e      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x348>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2102      	movs	r1, #2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe ff6b 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e004      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x360>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	e016      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x38e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003c00:	2320      	movs	r3, #32
 8003c02:	e004      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d106      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	2102      	movs	r1, #2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe ff3c 	bl	8002a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2103      	movs	r1, #3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe ff20 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x3cc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe ff15 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 021f 	and.w	r2, r3, #31
 8003c4a:	e017      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x3fc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2103      	movs	r1, #3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe ff0a 	bl	8002a6c <LL_ADC_GetOffsetChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x414>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	e011      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x438>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003cac:	2320      	movs	r3, #32
 8003cae:	e003      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d106      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2103      	movs	r1, #3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fee7 	bl	8002a98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f893 	bl	8002dfa <LL_ADC_IsEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 8140 	bne.w	8003f5c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f7fe ff81 	bl	8002bf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a8f      	ldr	r2, [pc, #572]	; (8003f30 <HAL_ADC_ConfigChannel+0x6b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f040 8131 	bne.w	8003f5c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x4a2>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	3301      	adds	r3, #1
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	bf94      	ite	ls
 8003d1a:	2301      	movls	r3, #1
 8003d1c:	2300      	movhi	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e019      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x4d6>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e003      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d079      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x4f6>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	e015      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x522>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003d8e:	2320      	movs	r3, #32
 8003d90:	e003      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	069b      	lsls	r3, r3, #26
 8003d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x542>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	3301      	adds	r3, #1
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2101      	movs	r1, #1
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	e017      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x572>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003dda:	2320      	movs	r3, #32
 8003ddc:	e003      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x598>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f003 021f 	and.w	r2, r3, #31
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	051b      	lsls	r3, r3, #20
 8003e16:	e018      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x5ca>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	e081      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x5ea>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	0e9b      	lsrs	r3, r3, #26
 8003e60:	3301      	adds	r3, #1
 8003e62:	069b      	lsls	r3, r3, #26
 8003e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e68:	e015      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x616>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003e82:	2320      	movs	r3, #32
 8003e84:	e003      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	069b      	lsls	r3, r3, #26
 8003e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x636>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	e017      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x666>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003ece:	2320      	movs	r3, #32
 8003ed0:	e003      	b.n	8003eda <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	ea42 0103 	orr.w	r1, r2, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x692>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	3301      	adds	r3, #1
 8003efe:	f003 021f 	and.w	r2, r3, #31
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	3b1e      	subs	r3, #30
 8003f0a:	051b      	lsls	r3, r3, #20
 8003f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f10:	e01e      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x6d0>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	613b      	str	r3, [r7, #16]
  return result;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	e006      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x6bc>
 8003f2e:	bf00      	nop
 8003f30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	3b1e      	subs	r3, #30
 8003f4a:	051b      	lsls	r3, r3, #20
 8003f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f50:	430b      	orrs	r3, r1
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	6892      	ldr	r2, [r2, #8]
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7fe fe1e 	bl	8002b98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_ADC_ConfigChannel+0x7f4>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07a      	beq.n	800405e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f68:	4843      	ldr	r0, [pc, #268]	; (8004078 <HAL_ADC_ConfigChannel+0x7f8>)
 8003f6a:	f7fe fd4d 	bl	8002a08 <LL_ADC_GetCommonPathInternalCh>
 8003f6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a41      	ldr	r2, [pc, #260]	; (800407c <HAL_ADC_ConfigChannel+0x7fc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d12c      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d126      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <HAL_ADC_ConfigChannel+0x800>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x71c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HAL_ADC_ConfigChannel+0x804>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d15d      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4834      	ldr	r0, [pc, #208]	; (8004078 <HAL_ADC_ConfigChannel+0x7f8>)
 8003fa8:	f7fe fd1b 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_ADC_ConfigChannel+0x808>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	4a36      	ldr	r2, [pc, #216]	; (800408c <HAL_ADC_ConfigChannel+0x80c>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fc6:	e002      	b.n	8003fce <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f9      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd4:	e040      	b.n	8004058 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_ADC_ConfigChannel+0x810>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d118      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x792>
 8003fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d112      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	; (8004080 <HAL_ADC_ConfigChannel+0x800>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x780>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_ADC_ConfigChannel+0x804>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d12d      	bne.n	800405c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004008:	4619      	mov	r1, r3
 800400a:	481b      	ldr	r0, [pc, #108]	; (8004078 <HAL_ADC_ConfigChannel+0x7f8>)
 800400c:	f7fe fce9 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004010:	e024      	b.n	800405c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_ADC_ConfigChannel+0x814>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d120      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800401c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11a      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_ADC_ConfigChannel+0x800>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d115      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800403a:	4619      	mov	r1, r3
 800403c:	480e      	ldr	r0, [pc, #56]	; (8004078 <HAL_ADC_ConfigChannel+0x7f8>)
 800403e:	f7fe fcd0 	bl	80029e2 <LL_ADC_SetCommonPathInternalCh>
 8004042:	e00c      	b.n	800405e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004056:	e002      	b.n	800405e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800405c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800406a:	4618      	mov	r0, r3
 800406c:	37d8      	adds	r7, #216	; 0xd8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	80080000 	.word	0x80080000
 8004078:	50040300 	.word	0x50040300
 800407c:	c7520000 	.word	0xc7520000
 8004080:	50040000 	.word	0x50040000
 8004084:	50040200 	.word	0x50040200
 8004088:	200000b4 	.word	0x200000b4
 800408c:	053e2d63 	.word	0x053e2d63
 8004090:	cb840000 	.word	0xcb840000
 8004094:	80000001 	.word	0x80000001

08004098 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b0:	d003      	beq.n	80040ba <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80040b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_AnalogWDGConfig+0x30>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e1ea      	b.n	800449e <HAL_ADC_AnalogWDGConfig+0x406>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe feca 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80040da:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fed7 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 80040e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 81c8 	bne.w	8004480 <HAL_ADC_AnalogWDGConfig+0x3e8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 81c4 	bne.w	8004480 <HAL_ADC_AnalogWDGConfig+0x3e8>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4aaa      	ldr	r2, [pc, #680]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	f040 80a2 	bne.w	8004248 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800410c:	d034      	beq.n	8004178 <HAL_ADC_AnalogWDGConfig+0xe0>
 800410e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004112:	d856      	bhi.n	80041c2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004114:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004118:	d04b      	beq.n	80041b2 <HAL_ADC_AnalogWDGConfig+0x11a>
 800411a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411e:	d850      	bhi.n	80041c2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004120:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004124:	d01b      	beq.n	800415e <HAL_ADC_AnalogWDGConfig+0xc6>
 8004126:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800412a:	d84a      	bhi.n	80041c2 <HAL_ADC_AnalogWDGConfig+0x12a>
 800412c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004130:	d037      	beq.n	80041a2 <HAL_ADC_AnalogWDGConfig+0x10a>
 8004132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004136:	d844      	bhi.n	80041c2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800413c:	d029      	beq.n	8004192 <HAL_ADC_AnalogWDGConfig+0xfa>
 800413e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004142:	d13e      	bne.n	80041c2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004150:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004154:	461a      	mov	r2, r3
 8004156:	4994      	ldr	r1, [pc, #592]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004158:	f7fe fd6e 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800415c:	e039      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800416a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800416e:	461a      	mov	r2, r3
 8004170:	498d      	ldr	r1, [pc, #564]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004172:	f7fe fd61 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8004176:	e02c      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004184:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8004188:	461a      	mov	r2, r3
 800418a:	4987      	ldr	r1, [pc, #540]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 800418c:	f7fe fd54 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8004190:	e01f      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a85      	ldr	r2, [pc, #532]	; (80043ac <HAL_ADC_AnalogWDGConfig+0x314>)
 8004198:	4983      	ldr	r1, [pc, #524]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fd4c 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041a0:	e017      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a82      	ldr	r2, [pc, #520]	; (80043b0 <HAL_ADC_AnalogWDGConfig+0x318>)
 80041a8:	497f      	ldr	r1, [pc, #508]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fd44 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041b0:	e00f      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7f      	ldr	r2, [pc, #508]	; (80043b4 <HAL_ADC_AnalogWDGConfig+0x31c>)
 80041b8:	497b      	ldr	r1, [pc, #492]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fd3c 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041c0:	e007      	b.n	80041d2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	4977      	ldr	r1, [pc, #476]	; (80043a8 <HAL_ADC_AnalogWDGConfig+0x310>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fd34 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041d0:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	08db      	lsrs	r3, r3, #3
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420e:	f7fe fd40 	bl	8002c92 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fe49 	bl	8002eba <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	7b1b      	ldrb	r3, [r3, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fe69 	bl	8002f0c <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800423a:	e12a      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fe93 	bl	8002f6c <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004246:	e124      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004250:	d01b      	beq.n	800428a <HAL_ADC_AnalogWDGConfig+0x1f2>
 8004252:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004256:	f200 8086 	bhi.w	8004366 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800425a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800425e:	d079      	beq.n	8004354 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8004260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004264:	d87f      	bhi.n	8004366 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004266:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800426a:	d00e      	beq.n	800428a <HAL_ADC_AnalogWDGConfig+0x1f2>
 800426c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004270:	d879      	bhi.n	8004366 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004276:	d06d      	beq.n	8004354 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8004278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800427c:	d873      	bhi.n	8004366 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800427e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004282:	d067      	beq.n	8004354 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8004284:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004288:	d16d      	bne.n	8004366 <HAL_ADC_AnalogWDGConfig+0x2ce>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4a      	ldr	r2, [pc, #296]	; (80043b8 <HAL_ADC_AnalogWDGConfig+0x320>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d12f      	bne.n	80042f4 <HAL_ADC_AnalogWDGConfig+0x25c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <HAL_ADC_AnalogWDGConfig+0x21a>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	e016      	b.n	80042e0 <HAL_ADC_AnalogWDGConfig+0x248>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	61bb      	str	r3, [r7, #24]
  return result;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_AnalogWDGConfig+0x236>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e003      	b.n	80042d6 <HAL_ADC_AnalogWDGConfig+0x23e>
  return __builtin_clz(value);
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80042f2:	e041      	b.n	8004378 <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <HAL_ADC_AnalogWDGConfig+0x27a>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	e016      	b.n	8004340 <HAL_ADC_AnalogWDGConfig+0x2a8>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]
  return result;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_ADC_AnalogWDGConfig+0x296>
    return 32U;
 800432a:	2320      	movs	r3, #32
 800432c:	e003      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x29e>
  return __builtin_clz(value);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2201      	movs	r2, #1
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8004352:	e011      	b.n	8004378 <HAL_ADC_AnalogWDGConfig+0x2e0>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_ADC_AnalogWDGConfig+0x31c>)
 800435e:	4619      	mov	r1, r3
 8004360:	f7fe fc6a 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004364:	e008      	b.n	8004378 <HAL_ADC_AnalogWDGConfig+0x2e0>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	f7fe fc61 	bl	8002c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004376:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0318 	and.w	r3, r3, #24
 8004382:	2b18      	cmp	r3, #24
 8004384:	d01a      	beq.n	80043bc <HAL_ADC_AnalogWDGConfig+0x324>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	f1c3 0302 	rsb	r3, r3, #2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	f003 031e 	and.w	r3, r3, #30
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	e00d      	b.n	80043c2 <HAL_ADC_AnalogWDGConfig+0x32a>
 80043a6:	bf00      	nop
 80043a8:	7dc00000 	.word	0x7dc00000
 80043ac:	0087ffff 	.word	0x0087ffff
 80043b0:	0107ffff 	.word	0x0107ffff
 80043b4:	0187ffff 	.word	0x0187ffff
 80043b8:	0017ffff 	.word	0x0017ffff
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0318 	and.w	r3, r3, #24
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	d00f      	beq.n	80043f2 <HAL_ADC_AnalogWDGConfig+0x35a>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	08db      	lsrs	r3, r3, #3
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	f1c3 0302 	rsb	r3, r3, #2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	f003 031e 	and.w	r3, r3, #30
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	e002      	b.n	80043f8 <HAL_ADC_AnalogWDGConfig+0x360>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	f7fe fc44 	bl	8002c92 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <HAL_ADC_AnalogWDGConfig+0x410>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d11a      	bne.n	800444a <HAL_ADC_AnalogWDGConfig+0x3b2>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fd55 	bl	8002ed4 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	7b1b      	ldrb	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_ADC_AnalogWDGConfig+0x3a6>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fd78 	bl	8002f2c <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800443c:	e029      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fda2 	bl	8002f8c <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004448:	e023      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fd48 	bl	8002ef0 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	7b1b      	ldrb	r3, [r3, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_ADC_AnalogWDGConfig+0x3dc>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fd6d 	bl	8002f4c <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004472:	e00e      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fd97 	bl	8002fac <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800447e:	e008      	b.n	8004492 <HAL_ADC_AnalogWDGConfig+0x3fa>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800449a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3738      	adds	r7, #56	; 0x38
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	0017ffff 	.word	0x0017ffff

080044ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fc9e 	bl	8002dfa <LL_ADC_IsEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d14d      	bne.n	8004560 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b28      	ldr	r3, [pc, #160]	; (800456c <ADC_Enable+0xc0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e039      	b.n	8004562 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fc59 	bl	8002daa <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044f8:	f7fe fa30 	bl	800295c <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044fe:	e028      	b.n	8004552 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fc78 	bl	8002dfa <LL_ADC_IsEnabled>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fc48 	bl	8002daa <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800451a:	f7fe fa1f 	bl	800295c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d914      	bls.n	8004552 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d00d      	beq.n	8004552 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	f043 0210 	orr.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e007      	b.n	8004562 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d1cf      	bne.n	8004500 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	8000003f 	.word	0x8000003f

08004570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fc4f 	bl	8002e20 <LL_ADC_IsDisableOngoing>
 8004582:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fc36 	bl	8002dfa <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d047      	beq.n	8004624 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d144      	bne.n	8004624 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030d 	and.w	r3, r3, #13
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fc10 	bl	8002dd2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2203      	movs	r2, #3
 80045b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ba:	f7fe f9cf 	bl	800295c <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c0:	e029      	b.n	8004616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e023      	b.n	8004626 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045de:	f7fe f9bd 	bl	800295c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d914      	bls.n	8004616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	f043 0210 	orr.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1dc      	bne.n	80045de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <LL_ADC_StartCalibration>:
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800464a:	4313      	orrs	r3, r2
 800464c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_ADC_IsCalibrationOnGoing>:
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004674:	d101      	bne.n	800467a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e04d      	b.n	8004740 <HAL_ADCEx_Calibration_Start+0xb8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff5f 	bl	8004570 <ADC_Disable>
 80046b2:	4603      	mov	r3, r0
 80046b4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d136      	bne.n	800472a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046c4:	f023 0302 	bic.w	r3, r3, #2
 80046c8:	f043 0202 	orr.w	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ffa9 	bl	800462e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046dc:	e014      	b.n	8004708 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80046ea:	d30d      	bcc.n	8004708 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f023 0312 	bic.w	r3, r3, #18
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e01b      	b.n	8004740 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ffa7 	bl	8004660 <LL_ADC_IsCalibrationOnGoing>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e2      	bne.n	80046de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f023 0303 	bic.w	r3, r3, #3
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	659a      	str	r2, [r3, #88]	; 0x58
 8004728:	e005      	b.n	8004736 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f043 0210 	orr.w	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <__NVIC_SetPriorityGrouping+0x44>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047c8:	4013      	ands	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <__NVIC_SetPriorityGrouping+0x44>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	60d3      	str	r3, [r2, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <__NVIC_GetPriorityGrouping+0x18>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 0307 	and.w	r3, r3, #7
}
 8004802:	4618      	mov	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	2b00      	cmp	r3, #0
 8004820:	db0b      	blt.n	800483a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	f003 021f 	and.w	r2, r3, #31
 8004828:	4907      	ldr	r1, [pc, #28]	; (8004848 <__NVIC_EnableIRQ+0x38>)
 800482a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2001      	movs	r0, #1
 8004832:	fa00 f202 	lsl.w	r2, r0, r2
 8004836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e100 	.word	0xe000e100

0800484c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db0a      	blt.n	8004876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	490c      	ldr	r1, [pc, #48]	; (8004898 <__NVIC_SetPriority+0x4c>)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	0112      	lsls	r2, r2, #4
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	440b      	add	r3, r1
 8004870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004874:	e00a      	b.n	800488c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4908      	ldr	r1, [pc, #32]	; (800489c <__NVIC_SetPriority+0x50>)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3b04      	subs	r3, #4
 8004884:	0112      	lsls	r2, r2, #4
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	440b      	add	r3, r1
 800488a:	761a      	strb	r2, [r3, #24]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000e100 	.word	0xe000e100
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f1c3 0307 	rsb	r3, r3, #7
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf28      	it	cs
 80048be:	2304      	movcs	r3, #4
 80048c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d902      	bls.n	80048d0 <NVIC_EncodePriority+0x30>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3b03      	subs	r3, #3
 80048ce:	e000      	b.n	80048d2 <NVIC_EncodePriority+0x32>
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	401a      	ands	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e8:	f04f 31ff 	mov.w	r1, #4294967295
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	43d9      	mvns	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f8:	4313      	orrs	r3, r2
         );
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3724      	adds	r7, #36	; 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3b01      	subs	r3, #1
 8004914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004918:	d301      	bcc.n	800491e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800491a:	2301      	movs	r3, #1
 800491c:	e00f      	b.n	800493e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <SysTick_Config+0x40>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3b01      	subs	r3, #1
 8004924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004926:	210f      	movs	r1, #15
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	f7ff ff8e 	bl	800484c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <SysTick_Config+0x40>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <SysTick_Config+0x40>)
 8004938:	2207      	movs	r2, #7
 800493a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000e010 	.word	0xe000e010

0800494c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff29 	bl	80047ac <__NVIC_SetPriorityGrouping>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004974:	f7ff ff3e 	bl	80047f4 <__NVIC_GetPriorityGrouping>
 8004978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	6978      	ldr	r0, [r7, #20]
 8004980:	f7ff ff8e 	bl	80048a0 <NVIC_EncodePriority>
 8004984:	4602      	mov	r2, r0
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff5d 	bl	800484c <__NVIC_SetPriority>
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff31 	bl	8004810 <__NVIC_EnableIRQ>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffa2 	bl	8004908 <SysTick_Config>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80049d2:	f7fd fa75 	bl	8001ec0 <HAL_SYSTICK_Callback>
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e098      	b.n	8004b20 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <HAL_DMA_Init+0x150>)
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d80f      	bhi.n	8004a1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b4b      	ldr	r3, [pc, #300]	; (8004b30 <HAL_DMA_Init+0x154>)
 8004a02:	4413      	add	r3, r2
 8004a04:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <HAL_DMA_Init+0x158>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	009a      	lsls	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a48      	ldr	r2, [pc, #288]	; (8004b38 <HAL_DMA_Init+0x15c>)
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
 8004a18:	e00e      	b.n	8004a38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_DMA_Init+0x160>)
 8004a22:	4413      	add	r3, r2
 8004a24:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <HAL_DMA_Init+0x158>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	009a      	lsls	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a42      	ldr	r2, [pc, #264]	; (8004b40 <HAL_DMA_Init+0x164>)
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a92:	d039      	beq.n	8004b08 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_DMA_Init+0x15c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d11a      	bne.n	8004ad4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_DMA_Init+0x168>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f003 031c 	and.w	r3, r3, #28
 8004aaa:	210f      	movs	r1, #15
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	4924      	ldr	r1, [pc, #144]	; (8004b44 <HAL_DMA_Init+0x168>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ab8:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <HAL_DMA_Init+0x168>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	f003 031c 	and.w	r3, r3, #28
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	491d      	ldr	r1, [pc, #116]	; (8004b44 <HAL_DMA_Init+0x168>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
 8004ad2:	e019      	b.n	8004b08 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <HAL_DMA_Init+0x16c>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	f003 031c 	and.w	r3, r3, #28
 8004ae0:	210f      	movs	r1, #15
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	4917      	ldr	r1, [pc, #92]	; (8004b48 <HAL_DMA_Init+0x16c>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_DMA_Init+0x16c>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f003 031c 	and.w	r3, r3, #28
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	4911      	ldr	r1, [pc, #68]	; (8004b48 <HAL_DMA_Init+0x16c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40020407 	.word	0x40020407
 8004b30:	bffdfff8 	.word	0xbffdfff8
 8004b34:	cccccccd 	.word	0xcccccccd
 8004b38:	40020000 	.word	0x40020000
 8004b3c:	bffdfbf8 	.word	0xbffdfbf8
 8004b40:	40020400 	.word	0x40020400
 8004b44:	400200a8 	.word	0x400200a8
 8004b48:	400204a8 	.word	0x400204a8

08004b4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d008      	beq.n	8004b76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2204      	movs	r2, #4
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e022      	b.n	8004bbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 020e 	bic.w	r2, r2, #14
 8004b84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f003 021c 	and.w	r2, r3, #28
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d005      	beq.n	8004bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2204      	movs	r2, #4
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
 8004bea:	e029      	b.n	8004c40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 020e 	bic.w	r2, r2, #14
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f003 021c 	and.w	r2, r3, #28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
    }
  }
  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f003 031c 	and.w	r3, r3, #28
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d026      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d021      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0204 	bic.w	r2, r2, #4
 8004c9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f003 021c 	and.w	r2, r3, #28
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2104      	movs	r1, #4
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d071      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004cc2:	e06c      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f003 031c 	and.w	r3, r3, #28
 8004ccc:	2202      	movs	r2, #2
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d029      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 020a 	bic.w	r2, r2, #10
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f003 021c 	and.w	r2, r3, #28
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2102      	movs	r1, #2
 8004d16:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d038      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d34:	e033      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f003 031c 	and.w	r3, r3, #28
 8004d3e:	2208      	movs	r2, #8
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02a      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d025      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 020e 	bic.w	r2, r2, #14
 8004d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	f003 021c 	and.w	r2, r3, #28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2101      	movs	r1, #1
 8004d72:	fa01 f202 	lsl.w	r2, r1, r2
 8004d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
}
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004db6:	e166      	b.n	8005086 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8158 	beq.w	8005080 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d00b      	beq.n	8004df0 <HAL_GPIO_Init+0x48>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d007      	beq.n	8004df0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004de4:	2b11      	cmp	r3, #17
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b12      	cmp	r3, #18
 8004dee:	d130      	bne.n	8004e52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e26:	2201      	movs	r2, #1
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 0201 	and.w	r2, r3, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0xea>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b12      	cmp	r3, #18
 8004e90:	d123      	bne.n	8004eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	08da      	lsrs	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3208      	adds	r2, #8
 8004e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0203 	and.w	r2, r3, #3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80b2 	beq.w	8005080 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1c:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <HAL_GPIO_Init+0x2fc>)
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	4a60      	ldr	r2, [pc, #384]	; (80050a4 <HAL_GPIO_Init+0x2fc>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6613      	str	r3, [r2, #96]	; 0x60
 8004f28:	4b5e      	ldr	r3, [pc, #376]	; (80050a4 <HAL_GPIO_Init+0x2fc>)
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f34:	4a5c      	ldr	r2, [pc, #368]	; (80050a8 <HAL_GPIO_Init+0x300>)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	220f      	movs	r2, #15
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f5e:	d02b      	beq.n	8004fb8 <HAL_GPIO_Init+0x210>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a52      	ldr	r2, [pc, #328]	; (80050ac <HAL_GPIO_Init+0x304>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d025      	beq.n	8004fb4 <HAL_GPIO_Init+0x20c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a51      	ldr	r2, [pc, #324]	; (80050b0 <HAL_GPIO_Init+0x308>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01f      	beq.n	8004fb0 <HAL_GPIO_Init+0x208>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a50      	ldr	r2, [pc, #320]	; (80050b4 <HAL_GPIO_Init+0x30c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d019      	beq.n	8004fac <HAL_GPIO_Init+0x204>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a4f      	ldr	r2, [pc, #316]	; (80050b8 <HAL_GPIO_Init+0x310>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_GPIO_Init+0x200>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <HAL_GPIO_Init+0x314>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00d      	beq.n	8004fa4 <HAL_GPIO_Init+0x1fc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a4d      	ldr	r2, [pc, #308]	; (80050c0 <HAL_GPIO_Init+0x318>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <HAL_GPIO_Init+0x1f8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a4c      	ldr	r2, [pc, #304]	; (80050c4 <HAL_GPIO_Init+0x31c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_GPIO_Init+0x1f4>
 8004f98:	2307      	movs	r3, #7
 8004f9a:	e00e      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	e00c      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	e00a      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fa4:	2305      	movs	r3, #5
 8004fa6:	e008      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	e006      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fac:	2303      	movs	r3, #3
 8004fae:	e004      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e002      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_GPIO_Init+0x212>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	f002 0203 	and.w	r2, r2, #3
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	4093      	lsls	r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fca:	4937      	ldr	r1, [pc, #220]	; (80050a8 <HAL_GPIO_Init+0x300>)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ffc:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005002:	4b31      	ldr	r3, [pc, #196]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	43db      	mvns	r3, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4013      	ands	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005026:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800502c:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <HAL_GPIO_Init+0x320>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	43db      	mvns	r3, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <HAL_GPIO_Init+0x320>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	43db      	mvns	r3, r3
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <HAL_GPIO_Init+0x320>)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3301      	adds	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	f47f ae91 	bne.w	8004db8 <HAL_GPIO_Init+0x10>
  }
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40010000 	.word	0x40010000
 80050ac:	48000400 	.word	0x48000400
 80050b0:	48000800 	.word	0x48000800
 80050b4:	48000c00 	.word	0x48000c00
 80050b8:	48001000 	.word	0x48001000
 80050bc:	48001400 	.word	0x48001400
 80050c0:	48001800 	.word	0x48001800
 80050c4:	48001c00 	.word	0x48001c00
 80050c8:	40010400 	.word	0x40010400

080050cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e001      	b.n	80050ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
 8005108:	4613      	mov	r3, r2
 800510a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800510c:	787b      	ldrb	r3, [r7, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005118:	e002      	b.n	8005120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f806 	bl	800515c <HAL_GPIO_EXTI_Callback>
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40010400 	.word	0x40010400

0800515c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e081      	b.n	8005288 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7fc fad7 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2224      	movs	r2, #36	; 0x24
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d107      	bne.n	80051ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	e006      	b.n	80051fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d104      	bne.n	800520c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800520a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	ea42 0103 	orr.w	r1, r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69d9      	ldr	r1, [r3, #28]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
  }
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d138      	bne.n	800534c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e032      	b.n	800534e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	d139      	bne.n	80053e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800537a:	2302      	movs	r3, #2
 800537c:	e033      	b.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2224      	movs	r2, #36	; 0x24
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053f8:	4b04      	ldr	r3, [pc, #16]	; (800540c <HAL_PWREx_GetVoltageRange+0x18>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40007000 	.word	0x40007000

08005410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541e:	d130      	bne.n	8005482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005420:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d038      	beq.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800543c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2232      	movs	r2, #50	; 0x32
 8005444:	fb02 f303 	mul.w	r3, r2, r3
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005454:	e002      	b.n	800545c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d102      	bne.n	8005470 <HAL_PWREx_ControlVoltageScaling+0x60>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f2      	bne.n	8005456 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547c:	d110      	bne.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e00f      	b.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d007      	beq.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005498:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800549a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40007000 	.word	0x40007000
 80054b4:	200000b4 	.word	0x200000b4
 80054b8:	431bde83 	.word	0x431bde83

080054bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80054c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ca:	6053      	str	r3, [r2, #4]
}
 80054cc:	bf00      	nop
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40007000 	.word	0x40007000

080054dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f000 bc16 	b.w	8005d1c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f0:	4ba0      	ldr	r3, [pc, #640]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054fa:	4b9e      	ldr	r3, [pc, #632]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80e4 	beq.w	80056da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_RCC_OscConfig+0x4c>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	f040 808b 	bne.w	8005636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b01      	cmp	r3, #1
 8005524:	f040 8087 	bne.w	8005636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005528:	4b92      	ldr	r3, [pc, #584]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x64>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e3ed      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	4b8b      	ldr	r3, [pc, #556]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_RCC_OscConfig+0x7e>
 8005550:	4b88      	ldr	r3, [pc, #544]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005558:	e005      	b.n	8005566 <HAL_RCC_OscConfig+0x8a>
 800555a:	4b86      	ldr	r3, [pc, #536]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800555c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	4293      	cmp	r3, r2
 8005568:	d223      	bcs.n	80055b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fd80 	bl	8006074 <RCC_SetFlashLatencyFromMSIRange>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e3ce      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800557e:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7c      	ldr	r2, [pc, #496]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4b7a      	ldr	r3, [pc, #488]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4977      	ldr	r1, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	4972      	ldr	r1, [pc, #456]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
 80055b0:	e025      	b.n	80055fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	496a      	ldr	r1, [pc, #424]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d0:	4b68      	ldr	r3, [pc, #416]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	4965      	ldr	r1, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fd40 	bl	8006074 <RCC_SetFlashLatencyFromMSIRange>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e38e      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055fe:	f000 fc75 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005602:	4602      	mov	r2, r0
 8005604:	4b5b      	ldr	r3, [pc, #364]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	495a      	ldr	r1, [pc, #360]	; (8005778 <HAL_RCC_OscConfig+0x29c>)
 8005610:	5ccb      	ldrb	r3, [r1, r3]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x2a0>)
 800561c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800561e:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x2a4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd f94a 	bl	80028bc <HAL_InitTick>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d052      	beq.n	80056d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	e372      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d032      	beq.n	80056a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800563e:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a4c      	ldr	r2, [pc, #304]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800564a:	f7fd f987 	bl	800295c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005652:	f7fd f983 	bl	800295c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e35b      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005664:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005670:	4b40      	ldr	r3, [pc, #256]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a3f      	ldr	r2, [pc, #252]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005676:	f043 0308 	orr.w	r3, r3, #8
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	4b3d      	ldr	r3, [pc, #244]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	493a      	ldr	r1, [pc, #232]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4935      	ldr	r1, [pc, #212]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
 80056a2:	e01a      	b.n	80056da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056b0:	f7fd f954 	bl	800295c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056b8:	f7fd f950 	bl	800295c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e328      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056ca:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x1dc>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d073      	beq.n	80057ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_OscConfig+0x21c>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d10e      	bne.n	8005710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d10b      	bne.n	8005710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d063      	beq.n	80057cc <HAL_RCC_OscConfig+0x2f0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d15f      	bne.n	80057cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e305      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x24c>
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e01d      	b.n	8005764 <HAL_RCC_OscConfig+0x288>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x270>
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0x288>
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800575e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fd f8f6 	bl	800295c <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005772:	e010      	b.n	8005796 <HAL_RCC_OscConfig+0x2ba>
 8005774:	40021000 	.word	0x40021000
 8005778:	0800be8c 	.word	0x0800be8c
 800577c:	200000b4 	.word	0x200000b4
 8005780:	200000b8 	.word	0x200000b8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd f8ea 	bl	800295c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e2c2      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	4baf      	ldr	r3, [pc, #700]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x2a8>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd f8da 	bl	800295c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd f8d6 	bl	800295c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e2ae      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057be:	4ba5      	ldr	r3, [pc, #660]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x2d0>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d060      	beq.n	800589c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d005      	beq.n	80057ec <HAL_RCC_OscConfig+0x310>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d119      	bne.n	800581a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d116      	bne.n	800581a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	4b99      	ldr	r3, [pc, #612]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_OscConfig+0x328>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e28b      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005804:	4b93      	ldr	r3, [pc, #588]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	4990      	ldr	r1, [pc, #576]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005818:	e040      	b.n	800589c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d023      	beq.n	800586a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005822:	4b8c      	ldr	r3, [pc, #560]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a8b      	ldr	r2, [pc, #556]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fd f895 	bl	800295c <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005836:	f7fd f891 	bl	800295c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e269      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005848:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b7f      	ldr	r3, [pc, #508]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	497c      	ldr	r1, [pc, #496]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005864:	4313      	orrs	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
 8005868:	e018      	b.n	800589c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b7a      	ldr	r3, [pc, #488]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a79      	ldr	r2, [pc, #484]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fd f871 	bl	800295c <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fd f86d 	bl	800295c <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e245      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005890:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f0      	bne.n	800587e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03c      	beq.n	8005922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01c      	beq.n	80058ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b0:	4b68      	ldr	r3, [pc, #416]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b6:	4a67      	ldr	r2, [pc, #412]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fd f84c 	bl	800295c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c8:	f7fd f848 	bl	800295c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e220      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058da:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <HAL_RCC_OscConfig+0x3ec>
 80058e8:	e01b      	b.n	8005922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ea:	4b5a      	ldr	r3, [pc, #360]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f0:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fa:	f7fd f82f 	bl	800295c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005902:	f7fd f82b 	bl	800295c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e203      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005914:	4b4f      	ldr	r3, [pc, #316]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ef      	bne.n	8005902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a6 	beq.w	8005a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005934:	4b47      	ldr	r3, [pc, #284]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10d      	bne.n	800595c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005940:	4b44      	ldr	r3, [pc, #272]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	4a43      	ldr	r2, [pc, #268]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	6593      	str	r3, [r2, #88]	; 0x58
 800594c:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005958:	2301      	movs	r3, #1
 800595a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595c:	4b3e      	ldr	r3, [pc, #248]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d118      	bne.n	800599a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005974:	f7fc fff2 	bl	800295c <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fc ffee 	bl	800295c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1c6      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598e:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d108      	bne.n	80059b4 <HAL_RCC_OscConfig+0x4d8>
 80059a2:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b2:	e024      	b.n	80059fe <HAL_RCC_OscConfig+0x522>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d110      	bne.n	80059de <HAL_RCC_OscConfig+0x502>
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	4a24      	ldr	r2, [pc, #144]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059c4:	f043 0304 	orr.w	r3, r3, #4
 80059c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059dc:	e00f      	b.n	80059fe <HAL_RCC_OscConfig+0x522>
 80059de:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc ffa9 	bl	800295c <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0e:	f7fc ffa5 	bl	800295c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e17b      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ed      	beq.n	8005a0e <HAL_RCC_OscConfig+0x532>
 8005a32:	e01a      	b.n	8005a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fc ff92 	bl	800295c <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a3a:	e00f      	b.n	8005a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3c:	f7fc ff8e 	bl	800295c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d906      	bls.n	8005a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e164      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a5c:	4ba8      	ldr	r3, [pc, #672]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e8      	bne.n	8005a3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6a:	7ffb      	ldrb	r3, [r7, #31]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a70:	4ba3      	ldr	r3, [pc, #652]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	4aa2      	ldr	r2, [pc, #648]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a90:	4b9b      	ldr	r3, [pc, #620]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a96:	4a9a      	ldr	r2, [pc, #616]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fc ff5c 	bl	800295c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa8:	f7fc ff58 	bl	800295c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e130      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aba:	4b91      	ldr	r3, [pc, #580]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x5cc>
 8005ac8:	e01b      	b.n	8005b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aca:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad0:	4a8b      	ldr	r2, [pc, #556]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ada:	f7fc ff3f 	bl	800295c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae2:	f7fc ff3b 	bl	800295c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e113      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af4:	4b82      	ldr	r3, [pc, #520]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ef      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8107 	beq.w	8005d1a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	f040 80cb 	bne.w	8005cac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b16:	4b7a      	ldr	r3, [pc, #488]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 0203 	and.w	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d12c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	3b01      	subs	r3, #1
 8005b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d123      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d11b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d113      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d109      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d06d      	beq.n	8005c60 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d068      	beq.n	8005c5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b96:	4b5a      	ldr	r3, [pc, #360]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e0ba      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b56      	ldr	r3, [pc, #344]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a55      	ldr	r2, [pc, #340]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bb2:	f7fc fed3 	bl	800295c <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fc fecf 	bl	800295c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0a7      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bcc:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd8:	4b49      	ldr	r3, [pc, #292]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	4b49      	ldr	r3, [pc, #292]	; (8005d04 <HAL_RCC_OscConfig+0x828>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005be8:	3a01      	subs	r2, #1
 8005bea:	0112      	lsls	r2, r2, #4
 8005bec:	4311      	orrs	r1, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bf2:	0212      	lsls	r2, r2, #8
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bfa:	0852      	lsrs	r2, r2, #1
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0552      	lsls	r2, r2, #21
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c06:	0852      	lsrs	r2, r2, #1
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	0652      	lsls	r2, r2, #25
 8005c0c:	4311      	orrs	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c12:	06d2      	lsls	r2, r2, #27
 8005c14:	430a      	orrs	r2, r1
 8005c16:	493a      	ldr	r1, [pc, #232]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c1c:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a37      	ldr	r2, [pc, #220]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c28:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c34:	f7fc fe92 	bl	800295c <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fc fe8e 	bl	800295c <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e066      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4e:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c5a:	e05e      	b.n	8005d1a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e05d      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d156      	bne.n	8005d1a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c84:	f7fc fe6a 	bl	800295c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7fc fe66 	bl	800295c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e03e      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9e:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x7b0>
 8005caa:	e036      	b.n	8005d1a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b0c      	cmp	r3, #12
 8005cb0:	d031      	beq.n	8005d16 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a12      	ldr	r2, [pc, #72]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005cbe:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <HAL_RCC_OscConfig+0x824>)
 8005cdc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc fe39 	bl	800295c <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cec:	e00c      	b.n	8005d08 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cee:	f7fc fe35 	bl	800295c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d905      	bls.n	8005d08 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e00d      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
 8005d00:	40021000 	.word	0x40021000
 8005d04:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <HAL_RCC_OscConfig+0x848>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1ec      	bne.n	8005cee <HAL_RCC_OscConfig+0x812>
 8005d14:	e001      	b.n	8005d1a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0c8      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d910      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b63      	ldr	r3, [pc, #396]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4961      	ldr	r1, [pc, #388]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b5f      	ldr	r3, [pc, #380]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0b0      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d04c      	beq.n	8005e12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d80:	4b56      	ldr	r3, [pc, #344]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d121      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e09e      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d98:	4b50      	ldr	r3, [pc, #320]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d115      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e092      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005db0:	4b4a      	ldr	r3, [pc, #296]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e086      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc0:	4b46      	ldr	r3, [pc, #280]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e07e      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dd0:	4b42      	ldr	r3, [pc, #264]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 0203 	bic.w	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	493f      	ldr	r1, [pc, #252]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de2:	f7fc fdbb 	bl	800295c <HAL_GetTick>
 8005de6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dea:	f7fc fdb7 	bl	800295c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e066      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e00:	4b36      	ldr	r3, [pc, #216]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 020c 	and.w	r2, r3, #12
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d1eb      	bne.n	8005dea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e1e:	4b2f      	ldr	r3, [pc, #188]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	492c      	ldr	r1, [pc, #176]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e30:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d210      	bcs.n	8005e60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3e:	4b26      	ldr	r3, [pc, #152]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 0207 	bic.w	r2, r3, #7
 8005e46:	4924      	ldr	r1, [pc, #144]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e036      	b.n	8005ece <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4918      	ldr	r1, [pc, #96]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4910      	ldr	r1, [pc, #64]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e9e:	f000 f825 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	490c      	ldr	r1, [pc, #48]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	5ccb      	ldrb	r3, [r1, r3]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fc fcfa 	bl	80028bc <HAL_InitTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40022000 	.word	0x40022000
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	0800be8c 	.word	0x0800be8c
 8005ee4:	200000b4 	.word	0x200000b4
 8005ee8:	200000b8 	.word	0x200000b8

08005eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005efa:	4b3e      	ldr	r3, [pc, #248]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f04:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x34>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b0c      	cmp	r3, #12
 8005f18:	d121      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d11e      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f20:	4b34      	ldr	r3, [pc, #208]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d107      	bne.n	8005f3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e005      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d102      	bne.n	8005f6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	e004      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f70:	4b23      	ldr	r3, [pc, #140]	; (8006000 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d134      	bne.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d003      	beq.n	8005f98 <HAL_RCC_GetSysClockFreq+0xac>
 8005f90:	e005      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f92:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8005f94:	617b      	str	r3, [r7, #20]
      break;
 8005f96:	e005      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f9a:	617b      	str	r3, [r7, #20]
      break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	617b      	str	r3, [r7, #20]
      break;
 8005fa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	fb02 f203 	mul.w	r2, r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	0e5b      	lsrs	r3, r3, #25
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3724      	adds	r7, #36	; 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	0800bea4 	.word	0x0800bea4
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	007a1200 	.word	0x007a1200

08006004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	200000b4 	.word	0x200000b4

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4904      	ldr	r1, [pc, #16]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	0800be9c 	.word	0x0800be9c

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800604c:	f7ff ffda 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0adb      	lsrs	r3, r3, #11
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	0800be9c 	.word	0x0800be9c

08006074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800608c:	f7ff f9b2 	bl	80053f4 <HAL_PWREx_GetVoltageRange>
 8006090:	6178      	str	r0, [r7, #20]
 8006092:	e014      	b.n	80060be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6593      	str	r3, [r2, #88]	; 0x58
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060ac:	f7ff f9a2 	bl	80053f4 <HAL_PWREx_GetVoltageRange>
 80060b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060b2:	4b1e      	ldr	r3, [pc, #120]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	4a1d      	ldr	r2, [pc, #116]	; (800612c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c4:	d10b      	bne.n	80060de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d919      	bls.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2ba0      	cmp	r3, #160	; 0xa0
 80060d0:	d902      	bls.n	80060d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060d2:	2302      	movs	r3, #2
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	e013      	b.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060d8:	2301      	movs	r3, #1
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	e010      	b.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d902      	bls.n	80060ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060e4:	2303      	movs	r3, #3
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e00a      	b.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d102      	bne.n	80060f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060f0:	2302      	movs	r3, #2
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e004      	b.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d101      	bne.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060fc:	2301      	movs	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 0207 	bic.w	r2, r3, #7
 8006108:	4909      	ldr	r1, [pc, #36]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006110:	4b07      	ldr	r3, [pc, #28]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	429a      	cmp	r2, r3
 800611c:	d001      	beq.n	8006122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	40022000 	.word	0x40022000

08006134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800613c:	2300      	movs	r3, #0
 800613e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006140:	2300      	movs	r3, #0
 8006142:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614c:	2b00      	cmp	r3, #0
 800614e:	d041      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006158:	d02a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800615a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800615e:	d824      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006164:	d008      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616a:	d81e      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006174:	d010      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006176:	e018      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006178:	4b86      	ldr	r3, [pc, #536]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a85      	ldr	r2, [pc, #532]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800617e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006182:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006184:	e015      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	2100      	movs	r1, #0
 800618c:	4618      	mov	r0, r3
 800618e:	f000 facd 	bl	800672c <RCCEx_PLLSAI1_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006196:	e00c      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3320      	adds	r3, #32
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fbb6 	bl	8006910 <RCCEx_PLLSAI2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a8:	e003      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	74fb      	strb	r3, [r7, #19]
      break;
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b2:	7cfb      	ldrb	r3, [r7, #19]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b8:	4b76      	ldr	r3, [pc, #472]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c6:	4973      	ldr	r1, [pc, #460]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061ce:	e001      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
 80061d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d041      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061e8:	d02a      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80061ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061ee:	d824      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f4:	d008      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061fa:	d81e      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006204:	d010      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006206:	e018      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006208:	4b62      	ldr	r3, [pc, #392]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a61      	ldr	r2, [pc, #388]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006212:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006214:	e015      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3304      	adds	r3, #4
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fa85 	bl	800672c <RCCEx_PLLSAI1_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006226:	e00c      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3320      	adds	r3, #32
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fb6e 	bl	8006910 <RCCEx_PLLSAI2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006238:	e003      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	74fb      	strb	r3, [r7, #19]
      break;
 800623e:	e000      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006242:	7cfb      	ldrb	r3, [r7, #19]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006248:	4b52      	ldr	r3, [pc, #328]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006256:	494f      	ldr	r1, [pc, #316]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800625e:	e001      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a0 	beq.w	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006272:	2300      	movs	r3, #0
 8006274:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00d      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628c:	4b41      	ldr	r3, [pc, #260]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	4a40      	ldr	r2, [pc, #256]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
 8006298:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800629a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a4:	2301      	movs	r3, #1
 80062a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062a8:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062b4:	f7fc fb52 	bl	800295c <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ba:	e009      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062bc:	f7fc fb4e 	bl	800295c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d902      	bls.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	74fb      	strb	r3, [r7, #19]
        break;
 80062ce:	e005      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0ef      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d15c      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062e2:	4b2c      	ldr	r3, [pc, #176]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01f      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d019      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006300:	4b24      	ldr	r3, [pc, #144]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	4a1c      	ldr	r2, [pc, #112]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fc fb0d 	bl	800295c <HAL_GetTick>
 8006342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006344:	e00b      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006346:	f7fc fb09 	bl	800295c <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f241 3288 	movw	r2, #5000	; 0x1388
 8006354:	4293      	cmp	r3, r2
 8006356:	d902      	bls.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	74fb      	strb	r3, [r7, #19]
            break;
 800635c:	e006      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0ec      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006372:	4b08      	ldr	r3, [pc, #32]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	4904      	ldr	r1, [pc, #16]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800638a:	e009      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	74bb      	strb	r3, [r7, #18]
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7cfb      	ldrb	r3, [r7, #19]
 800639e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063a0:	7c7b      	ldrb	r3, [r7, #17]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d105      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a6:	4ba6      	ldr	r3, [pc, #664]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	4aa5      	ldr	r2, [pc, #660]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063be:	4ba0      	ldr	r3, [pc, #640]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	f023 0203 	bic.w	r2, r3, #3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	499c      	ldr	r1, [pc, #624]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e0:	4b97      	ldr	r3, [pc, #604]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 020c 	bic.w	r2, r3, #12
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	4994      	ldr	r1, [pc, #592]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006402:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	498b      	ldr	r1, [pc, #556]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006424:	4b86      	ldr	r3, [pc, #536]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	4983      	ldr	r1, [pc, #524]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006446:	4b7e      	ldr	r3, [pc, #504]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006454:	497a      	ldr	r1, [pc, #488]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006468:	4b75      	ldr	r3, [pc, #468]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	4972      	ldr	r1, [pc, #456]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800648a:	4b6d      	ldr	r3, [pc, #436]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	4969      	ldr	r1, [pc, #420]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ac:	4b64      	ldr	r3, [pc, #400]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ba:	4961      	ldr	r1, [pc, #388]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ce:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064dc:	4958      	ldr	r1, [pc, #352]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064f0:	4b53      	ldr	r3, [pc, #332]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	4950      	ldr	r1, [pc, #320]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006512:	4b4b      	ldr	r3, [pc, #300]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	4947      	ldr	r1, [pc, #284]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006534:	4b42      	ldr	r3, [pc, #264]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800653a:	f023 0203 	bic.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	493f      	ldr	r1, [pc, #252]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d028      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006556:	4b3a      	ldr	r3, [pc, #232]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4936      	ldr	r1, [pc, #216]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006574:	d106      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006576:	4b32      	ldr	r3, [pc, #200]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4a31      	ldr	r2, [pc, #196]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800657c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006580:	60d3      	str	r3, [r2, #12]
 8006582:	e011      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	2101      	movs	r1, #1
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f8c9 	bl	800672c <RCCEx_PLLSAI1_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800659e:	7cfb      	ldrb	r3, [r7, #19]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d028      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065b4:	4b22      	ldr	r3, [pc, #136]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	491f      	ldr	r1, [pc, #124]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d2:	d106      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	4a19      	ldr	r2, [pc, #100]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065de:	60d3      	str	r3, [r2, #12]
 80065e0:	e011      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ea:	d10c      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f89a 	bl	800672c <RCCEx_PLLSAI1_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d02a      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006620:	4907      	ldr	r1, [pc, #28]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006630:	d108      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006632:	4b03      	ldr	r3, [pc, #12]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a02      	ldr	r2, [pc, #8]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663c:	60d3      	str	r3, [r2, #12]
 800663e:	e013      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006640:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3304      	adds	r3, #4
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f869 	bl	800672c <RCCEx_PLLSAI1_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02f      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006674:	4b2c      	ldr	r3, [pc, #176]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006682:	4929      	ldr	r1, [pc, #164]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006692:	d10d      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2102      	movs	r1, #2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f846 	bl	800672c <RCCEx_PLLSAI1_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80066aa:	7cfb      	ldrb	r3, [r7, #19]
 80066ac:	74bb      	strb	r3, [r7, #18]
 80066ae:	e011      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3320      	adds	r3, #32
 80066be:	2102      	movs	r1, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f925 	bl	8006910 <RCCEx_PLLSAI2_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80066d0:	7cfb      	ldrb	r3, [r7, #19]
 80066d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f0:	490d      	ldr	r1, [pc, #52]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006704:	4b08      	ldr	r3, [pc, #32]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006714:	4904      	ldr	r1, [pc, #16]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800671c:	7cbb      	ldrb	r3, [r7, #18]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000

0800672c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800673a:	4b74      	ldr	r3, [pc, #464]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d018      	beq.n	8006778 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006746:	4b71      	ldr	r3, [pc, #452]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0203 	and.w	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d10d      	bne.n	8006772 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
       ||
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800675e:	4b6b      	ldr	r3, [pc, #428]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	091b      	lsrs	r3, r3, #4
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
       ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d047      	beq.n	8006802 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]
 8006776:	e044      	b.n	8006802 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d018      	beq.n	80067b2 <RCCEx_PLLSAI1_Config+0x86>
 8006780:	2b03      	cmp	r3, #3
 8006782:	d825      	bhi.n	80067d0 <RCCEx_PLLSAI1_Config+0xa4>
 8006784:	2b01      	cmp	r3, #1
 8006786:	d002      	beq.n	800678e <RCCEx_PLLSAI1_Config+0x62>
 8006788:	2b02      	cmp	r3, #2
 800678a:	d009      	beq.n	80067a0 <RCCEx_PLLSAI1_Config+0x74>
 800678c:	e020      	b.n	80067d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800678e:	4b5f      	ldr	r3, [pc, #380]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d11d      	bne.n	80067d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679e:	e01a      	b.n	80067d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067a0:	4b5a      	ldr	r3, [pc, #360]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d116      	bne.n	80067da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b0:	e013      	b.n	80067da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067b2:	4b56      	ldr	r3, [pc, #344]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067be:	4b53      	ldr	r3, [pc, #332]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067ce:	e006      	b.n	80067de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      break;
 80067d4:	e004      	b.n	80067e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067d6:	bf00      	nop
 80067d8:	e002      	b.n	80067e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067de:	bf00      	nop
    }

    if(status == HAL_OK)
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067e6:	4b49      	ldr	r3, [pc, #292]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	430b      	orrs	r3, r1
 80067fc:	4943      	ldr	r1, [pc, #268]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d17c      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006808:	4b40      	ldr	r3, [pc, #256]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a3f      	ldr	r2, [pc, #252]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 800680e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006814:	f7fc f8a2 	bl	800295c <HAL_GetTick>
 8006818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800681a:	e009      	b.n	8006830 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800681c:	f7fc f89e 	bl	800295c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d902      	bls.n	8006830 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	73fb      	strb	r3, [r7, #15]
        break;
 800682e:	e005      	b.n	800683c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006830:	4b36      	ldr	r3, [pc, #216]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ef      	bne.n	800681c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d15f      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d110      	bne.n	800686a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006848:	4b30      	ldr	r3, [pc, #192]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6892      	ldr	r2, [r2, #8]
 8006858:	0211      	lsls	r1, r2, #8
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68d2      	ldr	r2, [r2, #12]
 800685e:	06d2      	lsls	r2, r2, #27
 8006860:	430a      	orrs	r2, r1
 8006862:	492a      	ldr	r1, [pc, #168]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006864:	4313      	orrs	r3, r2
 8006866:	610b      	str	r3, [r1, #16]
 8006868:	e027      	b.n	80068ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d112      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006870:	4b26      	ldr	r3, [pc, #152]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006878:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6892      	ldr	r2, [r2, #8]
 8006880:	0211      	lsls	r1, r2, #8
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6912      	ldr	r2, [r2, #16]
 8006886:	0852      	lsrs	r2, r2, #1
 8006888:	3a01      	subs	r2, #1
 800688a:	0552      	lsls	r2, r2, #21
 800688c:	430a      	orrs	r2, r1
 800688e:	491f      	ldr	r1, [pc, #124]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	610b      	str	r3, [r1, #16]
 8006894:	e011      	b.n	80068ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800689e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6892      	ldr	r2, [r2, #8]
 80068a6:	0211      	lsls	r1, r2, #8
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6952      	ldr	r2, [r2, #20]
 80068ac:	0852      	lsrs	r2, r2, #1
 80068ae:	3a01      	subs	r2, #1
 80068b0:	0652      	lsls	r2, r2, #25
 80068b2:	430a      	orrs	r2, r1
 80068b4:	4915      	ldr	r1, [pc, #84]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068ba:	4b14      	ldr	r3, [pc, #80]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fc f849 	bl	800295c <HAL_GetTick>
 80068ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068cc:	e009      	b.n	80068e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ce:	f7fc f845 	bl	800295c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d902      	bls.n	80068e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	73fb      	strb	r3, [r7, #15]
          break;
 80068e0:	e005      	b.n	80068ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ef      	beq.n	80068ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	4903      	ldr	r1, [pc, #12]	; (800690c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40021000 	.word	0x40021000

08006910 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800691e:	4b69      	ldr	r3, [pc, #420]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800692a:	4b66      	ldr	r3, [pc, #408]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0203 	and.w	r2, r3, #3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d10d      	bne.n	8006956 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
       ||
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006942:	4b60      	ldr	r3, [pc, #384]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
       ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d047      	beq.n	80069e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e044      	b.n	80069e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d018      	beq.n	8006996 <RCCEx_PLLSAI2_Config+0x86>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d825      	bhi.n	80069b4 <RCCEx_PLLSAI2_Config+0xa4>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <RCCEx_PLLSAI2_Config+0x62>
 800696c:	2b02      	cmp	r3, #2
 800696e:	d009      	beq.n	8006984 <RCCEx_PLLSAI2_Config+0x74>
 8006970:	e020      	b.n	80069b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006972:	4b54      	ldr	r3, [pc, #336]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11d      	bne.n	80069ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006982:	e01a      	b.n	80069ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006984:	4b4f      	ldr	r3, [pc, #316]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d116      	bne.n	80069be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006994:	e013      	b.n	80069be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069a2:	4b48      	ldr	r3, [pc, #288]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069b2:	e006      	b.n	80069c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e004      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10d      	bne.n	80069e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ca:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6819      	ldr	r1, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	3b01      	subs	r3, #1
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	430b      	orrs	r3, r1
 80069e0:	4938      	ldr	r1, [pc, #224]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d166      	bne.n	8006aba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f8:	f7fb ffb0 	bl	800295c <HAL_GetTick>
 80069fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069fe:	e009      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a00:	f7fb ffac 	bl	800295c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d902      	bls.n	8006a14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	73fb      	strb	r3, [r7, #15]
        break;
 8006a12:	e005      	b.n	8006a20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1ef      	bne.n	8006a00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d149      	bne.n	8006aba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d110      	bne.n	8006a4e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a2c:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6892      	ldr	r2, [r2, #8]
 8006a3c:	0211      	lsls	r1, r2, #8
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68d2      	ldr	r2, [r2, #12]
 8006a42:	06d2      	lsls	r2, r2, #27
 8006a44:	430a      	orrs	r2, r1
 8006a46:	491f      	ldr	r1, [pc, #124]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	614b      	str	r3, [r1, #20]
 8006a4c:	e011      	b.n	8006a72 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6892      	ldr	r2, [r2, #8]
 8006a5e:	0211      	lsls	r1, r2, #8
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6912      	ldr	r2, [r2, #16]
 8006a64:	0852      	lsrs	r2, r2, #1
 8006a66:	3a01      	subs	r2, #1
 8006a68:	0652      	lsls	r2, r2, #25
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	4915      	ldr	r1, [pc, #84]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7e:	f7fb ff6d 	bl	800295c <HAL_GetTick>
 8006a82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a84:	e009      	b.n	8006a9a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a86:	f7fb ff69 	bl	800295c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d902      	bls.n	8006a9a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	73fb      	strb	r3, [r7, #15]
          break;
 8006a98:	e005      	b.n	8006aa6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ef      	beq.n	8006a86 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	4903      	ldr	r1, [pc, #12]	; (8006ac4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e049      	b.n	8006b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fb fcf6 	bl	80024e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f000 fce2 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e049      	b.n	8006c1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f841 	bl	8006c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f000 fc8b 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e049      	b.n	8006cde <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f841 	bl	8006ce6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f000 fc2a 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d122      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d11b      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f06f 0202 	mvn.w	r2, #2
 8006d26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fb f8e1 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8006d42:	e005      	b.n	8006d50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fba5 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fbac 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d122      	bne.n	8006daa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d11b      	bne.n	8006daa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f06f 0204 	mvn.w	r2, #4
 8006d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fb f8b7 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8006d96:	e005      	b.n	8006da4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fb7b 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb82 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d122      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d11b      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f06f 0208 	mvn.w	r2, #8
 8006dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fb f88d 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8006dea:	e005      	b.n	8006df8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb51 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fb58 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d122      	bne.n	8006e52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d11b      	bne.n	8006e52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f06f 0210 	mvn.w	r2, #16
 8006e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2208      	movs	r2, #8
 8006e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fb f863 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8006e3e:	e005      	b.n	8006e4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb27 	bl	8007494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb2e 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10e      	bne.n	8006e7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f06f 0201 	mvn.w	r2, #1
 8006e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fb f829 	bl	8001ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e88:	2b80      	cmp	r3, #128	; 0x80
 8006e8a:	d10e      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d107      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f8d3 	bl	8008050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b80      	cmp	r3, #128	; 0x80
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f8c6 	bl	8008064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d10e      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d107      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fadc 	bl	80074bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0220 	mvn.w	r2, #32
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f886 	bl	800803c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e082      	b.n	8007058 <HAL_TIM_IC_ConfigChannel+0x120>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11b      	bne.n	8006f98 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6819      	ldr	r1, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f000 fe1e 	bl	8007bb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 020c 	bic.w	r2, r2, #12
 8006f82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6999      	ldr	r1, [r3, #24]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	619a      	str	r2, [r3, #24]
 8006f96:	e05a      	b.n	800704e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d11c      	bne.n	8006fd8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f000 fe9c 	bl	8007cea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6999      	ldr	r1, [r3, #24]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	021a      	lsls	r2, r3, #8
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	619a      	str	r2, [r3, #24]
 8006fd6:	e03a      	b.n	800704e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d11b      	bne.n	8007016 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6819      	ldr	r1, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f000 fee9 	bl	8007dc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 020c 	bic.w	r2, r2, #12
 8007000:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69d9      	ldr	r1, [r3, #28]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	61da      	str	r2, [r3, #28]
 8007014:	e01b      	b.n	800704e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6819      	ldr	r1, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f000 ff09 	bl	8007e3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007038:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	021a      	lsls	r2, r3, #8
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007076:	2302      	movs	r3, #2
 8007078:	e0fd      	b.n	8007276 <HAL_TIM_PWM_ConfigChannel+0x216>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b14      	cmp	r3, #20
 8007086:	f200 80f0 	bhi.w	800726a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070e5 	.word	0x080070e5
 8007094:	0800726b 	.word	0x0800726b
 8007098:	0800726b 	.word	0x0800726b
 800709c:	0800726b 	.word	0x0800726b
 80070a0:	08007125 	.word	0x08007125
 80070a4:	0800726b 	.word	0x0800726b
 80070a8:	0800726b 	.word	0x0800726b
 80070ac:	0800726b 	.word	0x0800726b
 80070b0:	08007167 	.word	0x08007167
 80070b4:	0800726b 	.word	0x0800726b
 80070b8:	0800726b 	.word	0x0800726b
 80070bc:	0800726b 	.word	0x0800726b
 80070c0:	080071a7 	.word	0x080071a7
 80070c4:	0800726b 	.word	0x0800726b
 80070c8:	0800726b 	.word	0x0800726b
 80070cc:	0800726b 	.word	0x0800726b
 80070d0:	080071e9 	.word	0x080071e9
 80070d4:	0800726b 	.word	0x0800726b
 80070d8:	0800726b 	.word	0x0800726b
 80070dc:	0800726b 	.word	0x0800726b
 80070e0:	08007229 	.word	0x08007229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fa8a 	bl	8007604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0204 	bic.w	r2, r2, #4
 800710e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6999      	ldr	r1, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	619a      	str	r2, [r3, #24]
      break;
 8007122:	e0a3      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fafa 	bl	8007724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800713e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800714e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6999      	ldr	r1, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	021a      	lsls	r2, r3, #8
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	619a      	str	r2, [r3, #24]
      break;
 8007164:	e082      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fb63 	bl	8007838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0208 	orr.w	r2, r2, #8
 8007180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0204 	bic.w	r2, r2, #4
 8007190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	61da      	str	r2, [r3, #28]
      break;
 80071a4:	e062      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fbcb 	bl	8007948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69d9      	ldr	r1, [r3, #28]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	021a      	lsls	r2, r3, #8
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	61da      	str	r2, [r3, #28]
      break;
 80071e6:	e041      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fc14 	bl	8007a1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0208 	orr.w	r2, r2, #8
 8007202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0204 	bic.w	r2, r2, #4
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007226:	e021      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc58 	bl	8007ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	021a      	lsls	r2, r3, #8
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007268:	e000      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800726a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_TIM_ConfigClockSource+0x18>
 8007294:	2302      	movs	r3, #2
 8007296:	e0b5      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x184>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d4:	d03e      	beq.n	8007354 <HAL_TIM_ConfigClockSource+0xd4>
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	f200 8087 	bhi.w	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e2:	f000 8085 	beq.w	80073f0 <HAL_TIM_ConfigClockSource+0x170>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ea:	d87f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d01a      	beq.n	8007326 <HAL_TIM_ConfigClockSource+0xa6>
 80072f0:	2b70      	cmp	r3, #112	; 0x70
 80072f2:	d87b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b60      	cmp	r3, #96	; 0x60
 80072f6:	d050      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x11a>
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d877      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d03c      	beq.n	800737a <HAL_TIM_ConfigClockSource+0xfa>
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d873      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d058      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x13a>
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d86f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d064      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	2b30      	cmp	r3, #48	; 0x30
 8007312:	d86b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d060      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d867      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05c      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b10      	cmp	r3, #16
 8007322:	d05a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007324:	e062      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6899      	ldr	r1, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f000 fdd9 	bl	8007eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007348:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	609a      	str	r2, [r3, #8]
      break;
 8007352:	e04e      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f000 fdc2 	bl	8007eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007376:	609a      	str	r2, [r3, #8]
      break;
 8007378:	e03b      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	f000 fc80 	bl	8007c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2150      	movs	r1, #80	; 0x50
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd8f 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 8007398:	e02b      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 fcdc 	bl	8007d64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2160      	movs	r1, #96	; 0x60
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fd7f 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e01b      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 fc60 	bl	8007c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2140      	movs	r1, #64	; 0x40
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fd6f 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e00b      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f000 fd66 	bl	8007eb6 <TIM_ITRx_SetConfig>
        break;
 80073ea:	e002      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80073f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d831      	bhi.n	8007484 <HAL_TIM_ReadCapturedValue+0x78>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800745d 	.word	0x0800745d
 800742c:	08007485 	.word	0x08007485
 8007430:	08007485 	.word	0x08007485
 8007434:	08007485 	.word	0x08007485
 8007438:	08007467 	.word	0x08007467
 800743c:	08007485 	.word	0x08007485
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007471 	.word	0x08007471
 800744c:	08007485 	.word	0x08007485
 8007450:	08007485 	.word	0x08007485
 8007454:	08007485 	.word	0x08007485
 8007458:	0800747b 	.word	0x0800747b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	60fb      	str	r3, [r7, #12]

      break;
 8007464:	e00f      	b.n	8007486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	60fb      	str	r3, [r7, #12]

      break;
 800746e:	e00a      	b.n	8007486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007476:	60fb      	str	r3, [r7, #12]

      break;
 8007478:	e005      	b.n	8007486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	60fb      	str	r3, [r7, #12]

      break;
 8007482:	e000      	b.n	8007486 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007484:	bf00      	nop
  }

  return tmpreg;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a40      	ldr	r2, [pc, #256]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d00f      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3d      	ldr	r2, [pc, #244]	; (80075e8 <TIM_Base_SetConfig+0x118>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00b      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <TIM_Base_SetConfig+0x11c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d007      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3b      	ldr	r2, [pc, #236]	; (80075f0 <TIM_Base_SetConfig+0x120>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3a      	ldr	r2, [pc, #232]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d108      	bne.n	8007522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2f      	ldr	r2, [pc, #188]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d01f      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d01b      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2c      	ldr	r2, [pc, #176]	; (80075e8 <TIM_Base_SetConfig+0x118>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d017      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <TIM_Base_SetConfig+0x11c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2a      	ldr	r2, [pc, #168]	; (80075f0 <TIM_Base_SetConfig+0x120>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a28      	ldr	r2, [pc, #160]	; (80075f8 <TIM_Base_SetConfig+0x128>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a27      	ldr	r2, [pc, #156]	; (80075fc <TIM_Base_SetConfig+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a26      	ldr	r2, [pc, #152]	; (8007600 <TIM_Base_SetConfig+0x130>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d108      	bne.n	800757c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a10      	ldr	r2, [pc, #64]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_Base_SetConfig+0xf8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <TIM_Base_SetConfig+0x128>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a10      	ldr	r2, [pc, #64]	; (80075fc <TIM_Base_SetConfig+0x12c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a0f      	ldr	r2, [pc, #60]	; (8007600 <TIM_Base_SetConfig+0x130>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d103      	bne.n	80075d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	615a      	str	r2, [r3, #20]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40013400 	.word	0x40013400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800

08007604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0302 	bic.w	r3, r3, #2
 8007650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a2c      	ldr	r2, [pc, #176]	; (8007710 <TIM_OC1_SetConfig+0x10c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00f      	beq.n	8007684 <TIM_OC1_SetConfig+0x80>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a2b      	ldr	r2, [pc, #172]	; (8007714 <TIM_OC1_SetConfig+0x110>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00b      	beq.n	8007684 <TIM_OC1_SetConfig+0x80>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a2a      	ldr	r2, [pc, #168]	; (8007718 <TIM_OC1_SetConfig+0x114>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <TIM_OC1_SetConfig+0x80>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a29      	ldr	r2, [pc, #164]	; (800771c <TIM_OC1_SetConfig+0x118>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC1_SetConfig+0x80>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a28      	ldr	r2, [pc, #160]	; (8007720 <TIM_OC1_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d10c      	bne.n	800769e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0308 	bic.w	r3, r3, #8
 800768a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 0304 	bic.w	r3, r3, #4
 800769c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <TIM_OC1_SetConfig+0x10c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00f      	beq.n	80076c6 <TIM_OC1_SetConfig+0xc2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <TIM_OC1_SetConfig+0x110>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00b      	beq.n	80076c6 <TIM_OC1_SetConfig+0xc2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <TIM_OC1_SetConfig+0x114>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d007      	beq.n	80076c6 <TIM_OC1_SetConfig+0xc2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <TIM_OC1_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC1_SetConfig+0xc2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a17      	ldr	r2, [pc, #92]	; (8007720 <TIM_OC1_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d111      	bne.n	80076ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40013400 	.word	0x40013400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800

08007724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 0210 	bic.w	r2, r3, #16
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0320 	bic.w	r3, r3, #32
 8007772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a28      	ldr	r2, [pc, #160]	; (8007824 <TIM_OC2_SetConfig+0x100>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC2_SetConfig+0x6c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <TIM_OC2_SetConfig+0x104>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10d      	bne.n	80077ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <TIM_OC2_SetConfig+0x100>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00f      	beq.n	80077d4 <TIM_OC2_SetConfig+0xb0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1c      	ldr	r2, [pc, #112]	; (8007828 <TIM_OC2_SetConfig+0x104>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_OC2_SetConfig+0xb0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1b      	ldr	r2, [pc, #108]	; (800782c <TIM_OC2_SetConfig+0x108>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_OC2_SetConfig+0xb0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <TIM_OC2_SetConfig+0x10c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC2_SetConfig+0xb0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a19      	ldr	r2, [pc, #100]	; (8007834 <TIM_OC2_SetConfig+0x110>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d113      	bne.n	80077fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40013400 	.word	0x40013400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800

08007838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <TIM_OC3_SetConfig+0xfc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_OC3_SetConfig+0x6a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <TIM_OC3_SetConfig+0x100>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10d      	bne.n	80078be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <TIM_OC3_SetConfig+0xfc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00f      	beq.n	80078e6 <TIM_OC3_SetConfig+0xae>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <TIM_OC3_SetConfig+0x100>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00b      	beq.n	80078e6 <TIM_OC3_SetConfig+0xae>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1a      	ldr	r2, [pc, #104]	; (800793c <TIM_OC3_SetConfig+0x104>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_OC3_SetConfig+0xae>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <TIM_OC3_SetConfig+0x108>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC3_SetConfig+0xae>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <TIM_OC3_SetConfig+0x10c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d113      	bne.n	800790e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	621a      	str	r2, [r3, #32]
}
 8007928:	bf00      	nop
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40013400 	.word	0x40013400
 800793c:	40014000 	.word	0x40014000
 8007940:	40014400 	.word	0x40014400
 8007944:	40014800 	.word	0x40014800

08007948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <TIM_OC4_SetConfig+0xc0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00f      	beq.n	80079cc <TIM_OC4_SetConfig+0x84>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <TIM_OC4_SetConfig+0xc4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_OC4_SetConfig+0x84>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <TIM_OC4_SetConfig+0xc8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_OC4_SetConfig+0x84>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_OC4_SetConfig+0xcc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC4_SetConfig+0x84>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <TIM_OC4_SetConfig+0xd0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d109      	bne.n	80079e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	019b      	lsls	r3, r3, #6
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800

08007a1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	041b      	lsls	r3, r3, #16
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_OC5_SetConfig+0xb4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00f      	beq.n	8007a96 <TIM_OC5_SetConfig+0x7a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a16      	ldr	r2, [pc, #88]	; (8007ad4 <TIM_OC5_SetConfig+0xb8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <TIM_OC5_SetConfig+0x7a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <TIM_OC5_SetConfig+0xbc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_OC5_SetConfig+0x7a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a14      	ldr	r2, [pc, #80]	; (8007adc <TIM_OC5_SetConfig+0xc0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC5_SetConfig+0x7a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <TIM_OC5_SetConfig+0xc4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d109      	bne.n	8007aaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	621a      	str	r2, [r3, #32]
}
 8007ac4:	bf00      	nop
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800

08007ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	051b      	lsls	r3, r3, #20
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a18      	ldr	r2, [pc, #96]	; (8007b9c <TIM_OC6_SetConfig+0xb8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00f      	beq.n	8007b60 <TIM_OC6_SetConfig+0x7c>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <TIM_OC6_SetConfig+0xbc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <TIM_OC6_SetConfig+0x7c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <TIM_OC6_SetConfig+0xc0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d007      	beq.n	8007b60 <TIM_OC6_SetConfig+0x7c>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <TIM_OC6_SetConfig+0xc4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d003      	beq.n	8007b60 <TIM_OC6_SetConfig+0x7c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a14      	ldr	r2, [pc, #80]	; (8007bac <TIM_OC6_SetConfig+0xc8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d109      	bne.n	8007b74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	029b      	lsls	r3, r3, #10
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40014400 	.word	0x40014400
 8007bac:	40014800 	.word	0x40014800

08007bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a26      	ldr	r2, [pc, #152]	; (8007c74 <TIM_TI1_SetConfig+0xc4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d017      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be4:	d013      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <TIM_TI1_SetConfig+0xc8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00f      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a22      	ldr	r2, [pc, #136]	; (8007c7c <TIM_TI1_SetConfig+0xcc>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00b      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a21      	ldr	r2, [pc, #132]	; (8007c80 <TIM_TI1_SetConfig+0xd0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d007      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <TIM_TI1_SetConfig+0xd4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_TI1_SetConfig+0x5e>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <TIM_TI1_SetConfig+0xd8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d101      	bne.n	8007c12 <TIM_TI1_SetConfig+0x62>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <TIM_TI1_SetConfig+0x64>
 8007c12:	2300      	movs	r3, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e003      	b.n	8007c32 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f023 030a 	bic.w	r3, r3, #10
 8007c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f003 030a 	and.w	r3, r3, #10
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40012c00 	.word	0x40012c00
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000

08007c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	f023 0201 	bic.w	r2, r3, #1
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f023 030a 	bic.w	r3, r3, #10
 8007cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f023 0210 	bic.w	r2, r3, #16
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	031b      	lsls	r3, r3, #12
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	621a      	str	r2, [r3, #32]
}
 8007d58:	bf00      	nop
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f023 0210 	bic.w	r2, r3, #16
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	031b      	lsls	r3, r3, #12
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	621a      	str	r2, [r3, #32]
}
 8007db8:	bf00      	nop
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	621a      	str	r2, [r3, #32]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	031b      	lsls	r3, r3, #12
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	031b      	lsls	r3, r3, #12
 8007e94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f043 0307 	orr.w	r3, r3, #7
 8007ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e068      	b.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2e      	ldr	r2, [pc, #184]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2d      	ldr	r2, [pc, #180]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d108      	bne.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb6:	d018      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1b      	ldr	r2, [pc, #108]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1a      	ldr	r2, [pc, #104]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a18      	ldr	r2, [pc, #96]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a14      	ldr	r2, [pc, #80]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d10c      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40014000 	.word	0x40014000

0800803c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e040      	b.n	800810c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fa fb0c 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2224      	movs	r2, #36	; 0x24
 80080a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0201 	bic.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fbb4 	bl	8008824 <UART_SetConfig>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e022      	b.n	800810c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fe32 	bl	8008d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 feb9 	bl	8008e7c <UART_CheckIdleState>
 800810a:	4603      	mov	r3, r0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008128:	2b20      	cmp	r3, #32
 800812a:	f040 8082 	bne.w	8008232 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_UART_Transmit+0x26>
 8008134:	88fb      	ldrh	r3, [r7, #6]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e07a      	b.n	8008234 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_UART_Transmit+0x38>
 8008148:	2302      	movs	r3, #2
 800814a:	e073      	b.n	8008234 <HAL_UART_Transmit+0x120>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2221      	movs	r2, #33	; 0x21
 8008160:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008162:	f7fa fbfb 	bl	800295c <HAL_GetTick>
 8008166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008180:	d108      	bne.n	8008194 <HAL_UART_Transmit+0x80>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	e003      	b.n	800819c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80081a4:	e02d      	b.n	8008202 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2180      	movs	r1, #128	; 0x80
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 feac 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e039      	b.n	8008234 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	881a      	ldrh	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081d2:	b292      	uxth	r2, r2
 80081d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	3302      	adds	r3, #2
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	e008      	b.n	80081f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	b292      	uxth	r2, r2
 80081e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	3301      	adds	r3, #1
 80081ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1cb      	bne.n	80081a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2200      	movs	r2, #0
 8008216:	2140      	movs	r1, #64	; 0x40
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fe78 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e005      	b.n	8008234 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3720      	adds	r7, #32
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008250:	2b20      	cmp	r3, #32
 8008252:	f040 80bf 	bne.w	80083d4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_UART_Receive+0x26>
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e0b7      	b.n	80083d6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800826c:	2b01      	cmp	r3, #1
 800826e:	d101      	bne.n	8008274 <HAL_UART_Receive+0x38>
 8008270:	2302      	movs	r3, #2
 8008272:	e0b0      	b.n	80083d6 <HAL_UART_Receive+0x19a>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2222      	movs	r2, #34	; 0x22
 8008288:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008290:	f7fa fb64 	bl	800295c <HAL_GetTick>
 8008294:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d10e      	bne.n	80082ce <HAL_UART_Receive+0x92>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d105      	bne.n	80082c4 <HAL_UART_Receive+0x88>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082c2:	e02d      	b.n	8008320 <HAL_UART_Receive+0xe4>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	22ff      	movs	r2, #255	; 0xff
 80082c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082cc:	e028      	b.n	8008320 <HAL_UART_Receive+0xe4>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <HAL_UART_Receive+0xb6>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <HAL_UART_Receive+0xac>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	22ff      	movs	r2, #255	; 0xff
 80082e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082e6:	e01b      	b.n	8008320 <HAL_UART_Receive+0xe4>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	227f      	movs	r2, #127	; 0x7f
 80082ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082f0:	e016      	b.n	8008320 <HAL_UART_Receive+0xe4>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fa:	d10d      	bne.n	8008318 <HAL_UART_Receive+0xdc>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_UART_Receive+0xd2>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	227f      	movs	r2, #127	; 0x7f
 8008308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800830c:	e008      	b.n	8008320 <HAL_UART_Receive+0xe4>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	223f      	movs	r2, #63	; 0x3f
 8008312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008316:	e003      	b.n	8008320 <HAL_UART_Receive+0xe4>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008326:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d108      	bne.n	8008344 <HAL_UART_Receive+0x108>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e003      	b.n	800834c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008354:	e033      	b.n	80083be <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2200      	movs	r2, #0
 800835e:	2120      	movs	r1, #32
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fdd4 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e032      	b.n	80083d6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10c      	bne.n	8008390 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800837c:	b29a      	uxth	r2, r3
 800837e:	8a7b      	ldrh	r3, [r7, #18]
 8008380:	4013      	ands	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3302      	adds	r3, #2
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	e00d      	b.n	80083ac <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008396:	b29b      	uxth	r3, r3
 8008398:	b2da      	uxtb	r2, r3
 800839a:	8a7b      	ldrh	r3, [r7, #18]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	4013      	ands	r3, r2
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	3301      	adds	r3, #1
 80083aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1c5      	bne.n	8008356 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2220      	movs	r2, #32
 80083ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e000      	b.n	80083d6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80083d4:	2302      	movs	r3, #2
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	f640 030f 	movw	r3, #2063	; 0x80f
 8008406:	4013      	ands	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d113      	bne.n	8008438 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00e      	beq.n	8008438 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 81ce 	beq.w	80087ca <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
      }
      return;
 8008436:	e1c8      	b.n	80087ca <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80e3 	beq.w	8008606 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	4ba6      	ldr	r3, [pc, #664]	; (80086e8 <HAL_UART_IRQHandler+0x308>)
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80d8 	beq.w	8008606 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d010      	beq.n	8008482 <HAL_UART_IRQHandler+0xa2>
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008478:	f043 0201 	orr.w	r2, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d010      	beq.n	80084ae <HAL_UART_IRQHandler+0xce>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2202      	movs	r2, #2
 800849c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a4:	f043 0204 	orr.w	r2, r3, #4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d010      	beq.n	80084da <HAL_UART_IRQHandler+0xfa>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2204      	movs	r2, #4
 80084c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d0:	f043 0202 	orr.w	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2208      	movs	r2, #8
 80084fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008506:	f043 0208 	orr.w	r2, r3, #8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008516:	2b00      	cmp	r3, #0
 8008518:	d011      	beq.n	800853e <HAL_UART_IRQHandler+0x15e>
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800852c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008534:	f043 0220 	orr.w	r2, r3, #32
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8142 	beq.w	80087ce <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008574:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008580:	2b40      	cmp	r3, #64	; 0x40
 8008582:	d004      	beq.n	800858e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800858a:	2b00      	cmp	r3, #0
 800858c:	d031      	beq.n	80085f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fd39 	bl	8009006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d123      	bne.n	80085ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d013      	beq.n	80085e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085be:	4a4b      	ldr	r2, [pc, #300]	; (80086ec <HAL_UART_IRQHandler+0x30c>)
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fc fafe 	bl	8004bc8 <HAL_DMA_Abort_IT>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d017      	beq.n	8008602 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	e00f      	b.n	8008602 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f908 	bl	80087f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e8:	e00b      	b.n	8008602 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f904 	bl	80087f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	e007      	b.n	8008602 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f900 	bl	80087f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008600:	e0e5      	b.n	80087ce <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008602:	bf00      	nop
    return;
 8008604:	e0e3      	b.n	80087ce <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800860a:	2b01      	cmp	r3, #1
 800860c:	f040 80a9 	bne.w	8008762 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80a3 	beq.w	8008762 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 809d 	beq.w	8008762 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2210      	movs	r2, #16
 800862e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d158      	bne.n	80086f0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008648:	893b      	ldrh	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80c1 	beq.w	80087d2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008656:	893a      	ldrh	r2, [r7, #8]
 8008658:	429a      	cmp	r2, r3
 800865a:	f080 80ba 	bcs.w	80087d2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	893a      	ldrh	r2, [r7, #8]
 8008662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d12a      	bne.n	80086cc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008684:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0201 	bic.w	r2, r2, #1
 8008694:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0210 	bic.w	r2, r2, #16
 80086c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fc fa40 	bl	8004b4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f893 	bl	800880c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086e6:	e074      	b.n	80087d2 <HAL_UART_IRQHandler+0x3f2>
 80086e8:	04000120 	.word	0x04000120
 80086ec:	08009065 	.word	0x08009065
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800870e:	897b      	ldrh	r3, [r7, #10]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d060      	beq.n	80087d6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008722:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0210 	bic.w	r2, r2, #16
 8008754:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008756:	897b      	ldrh	r3, [r7, #10]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f856 	bl	800880c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008760:	e039      	b.n	80087d6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <HAL_UART_IRQHandler+0x3a8>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800877e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc9e 	bl	80090c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008786:	e029      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008798:	2b00      	cmp	r3, #0
 800879a:	d008      	beq.n	80087ae <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01a      	beq.n	80087da <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
    }
    return;
 80087ac:	e015      	b.n	80087da <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d011      	beq.n	80087dc <HAL_UART_IRQHandler+0x3fc>
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fc64 	bl	8009090 <UART_EndTransmit_IT>
    return;
 80087c8:	e008      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80087ca:	bf00      	nop
 80087cc:	e006      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80087ce:	bf00      	nop
 80087d0:	e004      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80087da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008824:	b5b0      	push	{r4, r5, r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	4313      	orrs	r3, r2
 8008846:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4bad      	ldr	r3, [pc, #692]	; (8008b04 <UART_SetConfig+0x2e0>)
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	69f9      	ldr	r1, [r7, #28]
 8008858:	430b      	orrs	r3, r1
 800885a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4aa2      	ldr	r2, [pc, #648]	; (8008b08 <UART_SetConfig+0x2e4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d004      	beq.n	800888c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	4313      	orrs	r3, r2
 800888a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	430a      	orrs	r2, r1
 800889e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a99      	ldr	r2, [pc, #612]	; (8008b0c <UART_SetConfig+0x2e8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d121      	bne.n	80088ee <UART_SetConfig+0xca>
 80088aa:	4b99      	ldr	r3, [pc, #612]	; (8008b10 <UART_SetConfig+0x2ec>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d817      	bhi.n	80088e8 <UART_SetConfig+0xc4>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x9c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088d7 	.word	0x080088d7
 80088cc:	080088e3 	.word	0x080088e3
 80088d0:	2301      	movs	r3, #1
 80088d2:	76fb      	strb	r3, [r7, #27]
 80088d4:	e0e7      	b.n	8008aa6 <UART_SetConfig+0x282>
 80088d6:	2302      	movs	r3, #2
 80088d8:	76fb      	strb	r3, [r7, #27]
 80088da:	e0e4      	b.n	8008aa6 <UART_SetConfig+0x282>
 80088dc:	2304      	movs	r3, #4
 80088de:	76fb      	strb	r3, [r7, #27]
 80088e0:	e0e1      	b.n	8008aa6 <UART_SetConfig+0x282>
 80088e2:	2308      	movs	r3, #8
 80088e4:	76fb      	strb	r3, [r7, #27]
 80088e6:	e0de      	b.n	8008aa6 <UART_SetConfig+0x282>
 80088e8:	2310      	movs	r3, #16
 80088ea:	76fb      	strb	r3, [r7, #27]
 80088ec:	e0db      	b.n	8008aa6 <UART_SetConfig+0x282>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a88      	ldr	r2, [pc, #544]	; (8008b14 <UART_SetConfig+0x2f0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d132      	bne.n	800895e <UART_SetConfig+0x13a>
 80088f8:	4b85      	ldr	r3, [pc, #532]	; (8008b10 <UART_SetConfig+0x2ec>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	f003 030c 	and.w	r3, r3, #12
 8008902:	2b0c      	cmp	r3, #12
 8008904:	d828      	bhi.n	8008958 <UART_SetConfig+0x134>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0xe8>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008941 	.word	0x08008941
 8008910:	08008959 	.word	0x08008959
 8008914:	08008959 	.word	0x08008959
 8008918:	08008959 	.word	0x08008959
 800891c:	0800894d 	.word	0x0800894d
 8008920:	08008959 	.word	0x08008959
 8008924:	08008959 	.word	0x08008959
 8008928:	08008959 	.word	0x08008959
 800892c:	08008947 	.word	0x08008947
 8008930:	08008959 	.word	0x08008959
 8008934:	08008959 	.word	0x08008959
 8008938:	08008959 	.word	0x08008959
 800893c:	08008953 	.word	0x08008953
 8008940:	2300      	movs	r3, #0
 8008942:	76fb      	strb	r3, [r7, #27]
 8008944:	e0af      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008946:	2302      	movs	r3, #2
 8008948:	76fb      	strb	r3, [r7, #27]
 800894a:	e0ac      	b.n	8008aa6 <UART_SetConfig+0x282>
 800894c:	2304      	movs	r3, #4
 800894e:	76fb      	strb	r3, [r7, #27]
 8008950:	e0a9      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008952:	2308      	movs	r3, #8
 8008954:	76fb      	strb	r3, [r7, #27]
 8008956:	e0a6      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008958:	2310      	movs	r3, #16
 800895a:	76fb      	strb	r3, [r7, #27]
 800895c:	e0a3      	b.n	8008aa6 <UART_SetConfig+0x282>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a6d      	ldr	r2, [pc, #436]	; (8008b18 <UART_SetConfig+0x2f4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d120      	bne.n	80089aa <UART_SetConfig+0x186>
 8008968:	4b69      	ldr	r3, [pc, #420]	; (8008b10 <UART_SetConfig+0x2ec>)
 800896a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008972:	2b30      	cmp	r3, #48	; 0x30
 8008974:	d013      	beq.n	800899e <UART_SetConfig+0x17a>
 8008976:	2b30      	cmp	r3, #48	; 0x30
 8008978:	d814      	bhi.n	80089a4 <UART_SetConfig+0x180>
 800897a:	2b20      	cmp	r3, #32
 800897c:	d009      	beq.n	8008992 <UART_SetConfig+0x16e>
 800897e:	2b20      	cmp	r3, #32
 8008980:	d810      	bhi.n	80089a4 <UART_SetConfig+0x180>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <UART_SetConfig+0x168>
 8008986:	2b10      	cmp	r3, #16
 8008988:	d006      	beq.n	8008998 <UART_SetConfig+0x174>
 800898a:	e00b      	b.n	80089a4 <UART_SetConfig+0x180>
 800898c:	2300      	movs	r3, #0
 800898e:	76fb      	strb	r3, [r7, #27]
 8008990:	e089      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008992:	2302      	movs	r3, #2
 8008994:	76fb      	strb	r3, [r7, #27]
 8008996:	e086      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008998:	2304      	movs	r3, #4
 800899a:	76fb      	strb	r3, [r7, #27]
 800899c:	e083      	b.n	8008aa6 <UART_SetConfig+0x282>
 800899e:	2308      	movs	r3, #8
 80089a0:	76fb      	strb	r3, [r7, #27]
 80089a2:	e080      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089a4:	2310      	movs	r3, #16
 80089a6:	76fb      	strb	r3, [r7, #27]
 80089a8:	e07d      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a5b      	ldr	r2, [pc, #364]	; (8008b1c <UART_SetConfig+0x2f8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d120      	bne.n	80089f6 <UART_SetConfig+0x1d2>
 80089b4:	4b56      	ldr	r3, [pc, #344]	; (8008b10 <UART_SetConfig+0x2ec>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089be:	2bc0      	cmp	r3, #192	; 0xc0
 80089c0:	d013      	beq.n	80089ea <UART_SetConfig+0x1c6>
 80089c2:	2bc0      	cmp	r3, #192	; 0xc0
 80089c4:	d814      	bhi.n	80089f0 <UART_SetConfig+0x1cc>
 80089c6:	2b80      	cmp	r3, #128	; 0x80
 80089c8:	d009      	beq.n	80089de <UART_SetConfig+0x1ba>
 80089ca:	2b80      	cmp	r3, #128	; 0x80
 80089cc:	d810      	bhi.n	80089f0 <UART_SetConfig+0x1cc>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <UART_SetConfig+0x1b4>
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d006      	beq.n	80089e4 <UART_SetConfig+0x1c0>
 80089d6:	e00b      	b.n	80089f0 <UART_SetConfig+0x1cc>
 80089d8:	2300      	movs	r3, #0
 80089da:	76fb      	strb	r3, [r7, #27]
 80089dc:	e063      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089de:	2302      	movs	r3, #2
 80089e0:	76fb      	strb	r3, [r7, #27]
 80089e2:	e060      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089e4:	2304      	movs	r3, #4
 80089e6:	76fb      	strb	r3, [r7, #27]
 80089e8:	e05d      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089ea:	2308      	movs	r3, #8
 80089ec:	76fb      	strb	r3, [r7, #27]
 80089ee:	e05a      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089f0:	2310      	movs	r3, #16
 80089f2:	76fb      	strb	r3, [r7, #27]
 80089f4:	e057      	b.n	8008aa6 <UART_SetConfig+0x282>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a49      	ldr	r2, [pc, #292]	; (8008b20 <UART_SetConfig+0x2fc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d125      	bne.n	8008a4c <UART_SetConfig+0x228>
 8008a00:	4b43      	ldr	r3, [pc, #268]	; (8008b10 <UART_SetConfig+0x2ec>)
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a0e:	d017      	beq.n	8008a40 <UART_SetConfig+0x21c>
 8008a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a14:	d817      	bhi.n	8008a46 <UART_SetConfig+0x222>
 8008a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a1a:	d00b      	beq.n	8008a34 <UART_SetConfig+0x210>
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a20:	d811      	bhi.n	8008a46 <UART_SetConfig+0x222>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <UART_SetConfig+0x20a>
 8008a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2a:	d006      	beq.n	8008a3a <UART_SetConfig+0x216>
 8008a2c:	e00b      	b.n	8008a46 <UART_SetConfig+0x222>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	76fb      	strb	r3, [r7, #27]
 8008a32:	e038      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a34:	2302      	movs	r3, #2
 8008a36:	76fb      	strb	r3, [r7, #27]
 8008a38:	e035      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	76fb      	strb	r3, [r7, #27]
 8008a3e:	e032      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a40:	2308      	movs	r3, #8
 8008a42:	76fb      	strb	r3, [r7, #27]
 8008a44:	e02f      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a46:	2310      	movs	r3, #16
 8008a48:	76fb      	strb	r3, [r7, #27]
 8008a4a:	e02c      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2d      	ldr	r2, [pc, #180]	; (8008b08 <UART_SetConfig+0x2e4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d125      	bne.n	8008aa2 <UART_SetConfig+0x27e>
 8008a56:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <UART_SetConfig+0x2ec>)
 8008a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a64:	d017      	beq.n	8008a96 <UART_SetConfig+0x272>
 8008a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a6a:	d817      	bhi.n	8008a9c <UART_SetConfig+0x278>
 8008a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a70:	d00b      	beq.n	8008a8a <UART_SetConfig+0x266>
 8008a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a76:	d811      	bhi.n	8008a9c <UART_SetConfig+0x278>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <UART_SetConfig+0x260>
 8008a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a80:	d006      	beq.n	8008a90 <UART_SetConfig+0x26c>
 8008a82:	e00b      	b.n	8008a9c <UART_SetConfig+0x278>
 8008a84:	2300      	movs	r3, #0
 8008a86:	76fb      	strb	r3, [r7, #27]
 8008a88:	e00d      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	76fb      	strb	r3, [r7, #27]
 8008a8e:	e00a      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a90:	2304      	movs	r3, #4
 8008a92:	76fb      	strb	r3, [r7, #27]
 8008a94:	e007      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a96:	2308      	movs	r3, #8
 8008a98:	76fb      	strb	r3, [r7, #27]
 8008a9a:	e004      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	76fb      	strb	r3, [r7, #27]
 8008aa0:	e001      	b.n	8008aa6 <UART_SetConfig+0x282>
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <UART_SetConfig+0x2e4>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	f040 8087 	bne.w	8008bc0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ab2:	7efb      	ldrb	r3, [r7, #27]
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d837      	bhi.n	8008b28 <UART_SetConfig+0x304>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <UART_SetConfig+0x29c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008b29 	.word	0x08008b29
 8008ac8:	08008aed 	.word	0x08008aed
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008af3 	.word	0x08008af3
 8008ad4:	08008b29 	.word	0x08008b29
 8008ad8:	08008b29 	.word	0x08008b29
 8008adc:	08008b29 	.word	0x08008b29
 8008ae0:	08008afb 	.word	0x08008afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae4:	f7fd fa9a 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008ae8:	6178      	str	r0, [r7, #20]
        break;
 8008aea:	e022      	b.n	8008b32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <UART_SetConfig+0x300>)
 8008aee:	617b      	str	r3, [r7, #20]
        break;
 8008af0:	e01f      	b.n	8008b32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008af2:	f7fd f9fb 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8008af6:	6178      	str	r0, [r7, #20]
        break;
 8008af8:	e01b      	b.n	8008b32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008afe:	617b      	str	r3, [r7, #20]
        break;
 8008b00:	e017      	b.n	8008b32 <UART_SetConfig+0x30e>
 8008b02:	bf00      	nop
 8008b04:	efff69f3 	.word	0xefff69f3
 8008b08:	40008000 	.word	0x40008000
 8008b0c:	40013800 	.word	0x40013800
 8008b10:	40021000 	.word	0x40021000
 8008b14:	40004400 	.word	0x40004400
 8008b18:	40004800 	.word	0x40004800
 8008b1c:	40004c00 	.word	0x40004c00
 8008b20:	40005000 	.word	0x40005000
 8008b24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	76bb      	strb	r3, [r7, #26]
        break;
 8008b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80f1 	beq.w	8008d1c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d305      	bcc.n	8008b56 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d902      	bls.n	8008b5c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	76bb      	strb	r3, [r7, #26]
 8008b5a:	e0df      	b.n	8008d1c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f04f 0100 	mov.w	r1, #0
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	020b      	lsls	r3, r1, #8
 8008b6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b72:	0202      	lsls	r2, r0, #8
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	6849      	ldr	r1, [r1, #4]
 8008b78:	0849      	lsrs	r1, r1, #1
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	f04f 0100 	mov.w	r1, #0
 8008b80:	1814      	adds	r4, r2, r0
 8008b82:	eb43 0501 	adc.w	r5, r3, r1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f8 f868 	bl	8000c68 <__aeabi_uldivmod>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba6:	d308      	bcc.n	8008bba <UART_SetConfig+0x396>
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bae:	d204      	bcs.n	8008bba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	60da      	str	r2, [r3, #12]
 8008bb8:	e0b0      	b.n	8008d1c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	76bb      	strb	r3, [r7, #26]
 8008bbe:	e0ad      	b.n	8008d1c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc8:	d15c      	bne.n	8008c84 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008bca:	7efb      	ldrb	r3, [r7, #27]
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d828      	bhi.n	8008c22 <UART_SetConfig+0x3fe>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <UART_SetConfig+0x3b4>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c05 	.word	0x08008c05
 8008be0:	08008c0d 	.word	0x08008c0d
 8008be4:	08008c23 	.word	0x08008c23
 8008be8:	08008c13 	.word	0x08008c13
 8008bec:	08008c23 	.word	0x08008c23
 8008bf0:	08008c23 	.word	0x08008c23
 8008bf4:	08008c23 	.word	0x08008c23
 8008bf8:	08008c1b 	.word	0x08008c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bfc:	f7fd fa0e 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008c00:	6178      	str	r0, [r7, #20]
        break;
 8008c02:	e013      	b.n	8008c2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c04:	f7fd fa20 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8008c08:	6178      	str	r0, [r7, #20]
        break;
 8008c0a:	e00f      	b.n	8008c2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c0c:	4b49      	ldr	r3, [pc, #292]	; (8008d34 <UART_SetConfig+0x510>)
 8008c0e:	617b      	str	r3, [r7, #20]
        break;
 8008c10:	e00c      	b.n	8008c2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c12:	f7fd f96b 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8008c16:	6178      	str	r0, [r7, #20]
        break;
 8008c18:	e008      	b.n	8008c2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1e:	617b      	str	r3, [r7, #20]
        break;
 8008c20:	e004      	b.n	8008c2c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	76bb      	strb	r3, [r7, #26]
        break;
 8008c2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d074      	beq.n	8008d1c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	005a      	lsls	r2, r3, #1
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	441a      	add	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b0f      	cmp	r3, #15
 8008c4e:	d916      	bls.n	8008c7e <UART_SetConfig+0x45a>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c56:	d212      	bcs.n	8008c7e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f023 030f 	bic.w	r3, r3, #15
 8008c60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	89fa      	ldrh	r2, [r7, #14]
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	e04e      	b.n	8008d1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	76bb      	strb	r3, [r7, #26]
 8008c82:	e04b      	b.n	8008d1c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c84:	7efb      	ldrb	r3, [r7, #27]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d827      	bhi.n	8008cda <UART_SetConfig+0x4b6>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x46c>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cbd 	.word	0x08008cbd
 8008c98:	08008cc5 	.word	0x08008cc5
 8008c9c:	08008cdb 	.word	0x08008cdb
 8008ca0:	08008ccb 	.word	0x08008ccb
 8008ca4:	08008cdb 	.word	0x08008cdb
 8008ca8:	08008cdb 	.word	0x08008cdb
 8008cac:	08008cdb 	.word	0x08008cdb
 8008cb0:	08008cd3 	.word	0x08008cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb4:	f7fd f9b2 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008cb8:	6178      	str	r0, [r7, #20]
        break;
 8008cba:	e013      	b.n	8008ce4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cbc:	f7fd f9c4 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8008cc0:	6178      	str	r0, [r7, #20]
        break;
 8008cc2:	e00f      	b.n	8008ce4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	; (8008d34 <UART_SetConfig+0x510>)
 8008cc6:	617b      	str	r3, [r7, #20]
        break;
 8008cc8:	e00c      	b.n	8008ce4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cca:	f7fd f90f 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8008cce:	6178      	str	r0, [r7, #20]
        break;
 8008cd0:	e008      	b.n	8008ce4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd6:	617b      	str	r3, [r7, #20]
        break;
 8008cd8:	e004      	b.n	8008ce4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	76bb      	strb	r3, [r7, #26]
        break;
 8008ce2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d018      	beq.n	8008d1c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	085a      	lsrs	r2, r3, #1
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	441a      	add	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2b0f      	cmp	r3, #15
 8008d04:	d908      	bls.n	8008d18 <UART_SetConfig+0x4f4>
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0c:	d204      	bcs.n	8008d18 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	60da      	str	r2, [r3, #12]
 8008d16:	e001      	b.n	8008d1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d28:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bdb0      	pop	{r4, r5, r7, pc}
 8008d32:	bf00      	nop
 8008d34:	00f42400 	.word	0x00f42400

08008d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01a      	beq.n	8008e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e36:	d10a      	bne.n	8008e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	605a      	str	r2, [r3, #4]
  }
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e8c:	f7f9 fd66 	bl	800295c <HAL_GetTick>
 8008e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d10e      	bne.n	8008ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f82d 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e023      	b.n	8008f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d10e      	bne.n	8008eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f817 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e00d      	b.n	8008f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	603b      	str	r3, [r7, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1e:	e05e      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d05a      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f28:	f7f9 fd18 	bl	800295c <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d302      	bcc.n	8008f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d11b      	bne.n	8008f76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2220      	movs	r2, #32
 8008f62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2220      	movs	r2, #32
 8008f68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e043      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02c      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f92:	d124      	bne.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e00f      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69da      	ldr	r2, [r3, #28]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d091      	beq.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800901c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0201 	bic.w	r2, r2, #1
 800902c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009032:	2b01      	cmp	r3, #1
 8009034:	d107      	bne.n	8009046 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 0210 	bic.w	r2, r2, #16
 8009044:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fbb8 	bl	80087f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fb95 	bl	80087e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
	...

080090d8 <__errno>:
 80090d8:	4b01      	ldr	r3, [pc, #4]	; (80090e0 <__errno+0x8>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	200000c0 	.word	0x200000c0

080090e4 <__libc_init_array>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4d0d      	ldr	r5, [pc, #52]	; (800911c <__libc_init_array+0x38>)
 80090e8:	4c0d      	ldr	r4, [pc, #52]	; (8009120 <__libc_init_array+0x3c>)
 80090ea:	1b64      	subs	r4, r4, r5
 80090ec:	10a4      	asrs	r4, r4, #2
 80090ee:	2600      	movs	r6, #0
 80090f0:	42a6      	cmp	r6, r4
 80090f2:	d109      	bne.n	8009108 <__libc_init_array+0x24>
 80090f4:	4d0b      	ldr	r5, [pc, #44]	; (8009124 <__libc_init_array+0x40>)
 80090f6:	4c0c      	ldr	r4, [pc, #48]	; (8009128 <__libc_init_array+0x44>)
 80090f8:	f002 feb4 	bl	800be64 <_init>
 80090fc:	1b64      	subs	r4, r4, r5
 80090fe:	10a4      	asrs	r4, r4, #2
 8009100:	2600      	movs	r6, #0
 8009102:	42a6      	cmp	r6, r4
 8009104:	d105      	bne.n	8009112 <__libc_init_array+0x2e>
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	f855 3b04 	ldr.w	r3, [r5], #4
 800910c:	4798      	blx	r3
 800910e:	3601      	adds	r6, #1
 8009110:	e7ee      	b.n	80090f0 <__libc_init_array+0xc>
 8009112:	f855 3b04 	ldr.w	r3, [r5], #4
 8009116:	4798      	blx	r3
 8009118:	3601      	adds	r6, #1
 800911a:	e7f2      	b.n	8009102 <__libc_init_array+0x1e>
 800911c:	0800c2bc 	.word	0x0800c2bc
 8009120:	0800c2bc 	.word	0x0800c2bc
 8009124:	0800c2bc 	.word	0x0800c2bc
 8009128:	0800c2c0 	.word	0x0800c2c0

0800912c <memset>:
 800912c:	4402      	add	r2, r0
 800912e:	4603      	mov	r3, r0
 8009130:	4293      	cmp	r3, r2
 8009132:	d100      	bne.n	8009136 <memset+0xa>
 8009134:	4770      	bx	lr
 8009136:	f803 1b01 	strb.w	r1, [r3], #1
 800913a:	e7f9      	b.n	8009130 <memset+0x4>

0800913c <__cvt>:
 800913c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	ec55 4b10 	vmov	r4, r5, d0
 8009144:	2d00      	cmp	r5, #0
 8009146:	460e      	mov	r6, r1
 8009148:	4619      	mov	r1, r3
 800914a:	462b      	mov	r3, r5
 800914c:	bfbb      	ittet	lt
 800914e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009152:	461d      	movlt	r5, r3
 8009154:	2300      	movge	r3, #0
 8009156:	232d      	movlt	r3, #45	; 0x2d
 8009158:	700b      	strb	r3, [r1, #0]
 800915a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009160:	4691      	mov	r9, r2
 8009162:	f023 0820 	bic.w	r8, r3, #32
 8009166:	bfbc      	itt	lt
 8009168:	4622      	movlt	r2, r4
 800916a:	4614      	movlt	r4, r2
 800916c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009170:	d005      	beq.n	800917e <__cvt+0x42>
 8009172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009176:	d100      	bne.n	800917a <__cvt+0x3e>
 8009178:	3601      	adds	r6, #1
 800917a:	2102      	movs	r1, #2
 800917c:	e000      	b.n	8009180 <__cvt+0x44>
 800917e:	2103      	movs	r1, #3
 8009180:	ab03      	add	r3, sp, #12
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	ab02      	add	r3, sp, #8
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	ec45 4b10 	vmov	d0, r4, r5
 800918c:	4653      	mov	r3, sl
 800918e:	4632      	mov	r2, r6
 8009190:	f000 fcea 	bl	8009b68 <_dtoa_r>
 8009194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009198:	4607      	mov	r7, r0
 800919a:	d102      	bne.n	80091a2 <__cvt+0x66>
 800919c:	f019 0f01 	tst.w	r9, #1
 80091a0:	d022      	beq.n	80091e8 <__cvt+0xac>
 80091a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091a6:	eb07 0906 	add.w	r9, r7, r6
 80091aa:	d110      	bne.n	80091ce <__cvt+0x92>
 80091ac:	783b      	ldrb	r3, [r7, #0]
 80091ae:	2b30      	cmp	r3, #48	; 0x30
 80091b0:	d10a      	bne.n	80091c8 <__cvt+0x8c>
 80091b2:	2200      	movs	r2, #0
 80091b4:	2300      	movs	r3, #0
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80091be:	b918      	cbnz	r0, 80091c8 <__cvt+0x8c>
 80091c0:	f1c6 0601 	rsb	r6, r6, #1
 80091c4:	f8ca 6000 	str.w	r6, [sl]
 80091c8:	f8da 3000 	ldr.w	r3, [sl]
 80091cc:	4499      	add	r9, r3
 80091ce:	2200      	movs	r2, #0
 80091d0:	2300      	movs	r3, #0
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f7 fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80091da:	b108      	cbz	r0, 80091e0 <__cvt+0xa4>
 80091dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80091e0:	2230      	movs	r2, #48	; 0x30
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	454b      	cmp	r3, r9
 80091e6:	d307      	bcc.n	80091f8 <__cvt+0xbc>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ec:	1bdb      	subs	r3, r3, r7
 80091ee:	4638      	mov	r0, r7
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	b004      	add	sp, #16
 80091f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f8:	1c59      	adds	r1, r3, #1
 80091fa:	9103      	str	r1, [sp, #12]
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	e7f0      	b.n	80091e2 <__cvt+0xa6>

08009200 <__exponent>:
 8009200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009202:	4603      	mov	r3, r0
 8009204:	2900      	cmp	r1, #0
 8009206:	bfb8      	it	lt
 8009208:	4249      	neglt	r1, r1
 800920a:	f803 2b02 	strb.w	r2, [r3], #2
 800920e:	bfb4      	ite	lt
 8009210:	222d      	movlt	r2, #45	; 0x2d
 8009212:	222b      	movge	r2, #43	; 0x2b
 8009214:	2909      	cmp	r1, #9
 8009216:	7042      	strb	r2, [r0, #1]
 8009218:	dd2a      	ble.n	8009270 <__exponent+0x70>
 800921a:	f10d 0407 	add.w	r4, sp, #7
 800921e:	46a4      	mov	ip, r4
 8009220:	270a      	movs	r7, #10
 8009222:	46a6      	mov	lr, r4
 8009224:	460a      	mov	r2, r1
 8009226:	fb91 f6f7 	sdiv	r6, r1, r7
 800922a:	fb07 1516 	mls	r5, r7, r6, r1
 800922e:	3530      	adds	r5, #48	; 0x30
 8009230:	2a63      	cmp	r2, #99	; 0x63
 8009232:	f104 34ff 	add.w	r4, r4, #4294967295
 8009236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800923a:	4631      	mov	r1, r6
 800923c:	dcf1      	bgt.n	8009222 <__exponent+0x22>
 800923e:	3130      	adds	r1, #48	; 0x30
 8009240:	f1ae 0502 	sub.w	r5, lr, #2
 8009244:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009248:	1c44      	adds	r4, r0, #1
 800924a:	4629      	mov	r1, r5
 800924c:	4561      	cmp	r1, ip
 800924e:	d30a      	bcc.n	8009266 <__exponent+0x66>
 8009250:	f10d 0209 	add.w	r2, sp, #9
 8009254:	eba2 020e 	sub.w	r2, r2, lr
 8009258:	4565      	cmp	r5, ip
 800925a:	bf88      	it	hi
 800925c:	2200      	movhi	r2, #0
 800925e:	4413      	add	r3, r2
 8009260:	1a18      	subs	r0, r3, r0
 8009262:	b003      	add	sp, #12
 8009264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800926a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800926e:	e7ed      	b.n	800924c <__exponent+0x4c>
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	3130      	adds	r1, #48	; 0x30
 8009274:	7083      	strb	r3, [r0, #2]
 8009276:	70c1      	strb	r1, [r0, #3]
 8009278:	1d03      	adds	r3, r0, #4
 800927a:	e7f1      	b.n	8009260 <__exponent+0x60>

0800927c <_printf_float>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	ed2d 8b02 	vpush	{d8}
 8009284:	b08d      	sub	sp, #52	; 0x34
 8009286:	460c      	mov	r4, r1
 8009288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800928c:	4616      	mov	r6, r2
 800928e:	461f      	mov	r7, r3
 8009290:	4605      	mov	r5, r0
 8009292:	f001 fa55 	bl	800a740 <_localeconv_r>
 8009296:	f8d0 a000 	ldr.w	sl, [r0]
 800929a:	4650      	mov	r0, sl
 800929c:	f7f6 ffa8 	bl	80001f0 <strlen>
 80092a0:	2300      	movs	r3, #0
 80092a2:	930a      	str	r3, [sp, #40]	; 0x28
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	9305      	str	r3, [sp, #20]
 80092a8:	f8d8 3000 	ldr.w	r3, [r8]
 80092ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092b0:	3307      	adds	r3, #7
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	f103 0208 	add.w	r2, r3, #8
 80092ba:	f8c8 2000 	str.w	r2, [r8]
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80092ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092ce:	9307      	str	r3, [sp, #28]
 80092d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80092d4:	ee08 0a10 	vmov	s16, r0
 80092d8:	4b9f      	ldr	r3, [pc, #636]	; (8009558 <_printf_float+0x2dc>)
 80092da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	f7f7 fc33 	bl	8000b4c <__aeabi_dcmpun>
 80092e6:	bb88      	cbnz	r0, 800934c <_printf_float+0xd0>
 80092e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ec:	4b9a      	ldr	r3, [pc, #616]	; (8009558 <_printf_float+0x2dc>)
 80092ee:	f04f 32ff 	mov.w	r2, #4294967295
 80092f2:	f7f7 fc0d 	bl	8000b10 <__aeabi_dcmple>
 80092f6:	bb48      	cbnz	r0, 800934c <_printf_float+0xd0>
 80092f8:	2200      	movs	r2, #0
 80092fa:	2300      	movs	r3, #0
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 fbfc 	bl	8000afc <__aeabi_dcmplt>
 8009304:	b110      	cbz	r0, 800930c <_printf_float+0x90>
 8009306:	232d      	movs	r3, #45	; 0x2d
 8009308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800930c:	4b93      	ldr	r3, [pc, #588]	; (800955c <_printf_float+0x2e0>)
 800930e:	4894      	ldr	r0, [pc, #592]	; (8009560 <_printf_float+0x2e4>)
 8009310:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009314:	bf94      	ite	ls
 8009316:	4698      	movls	r8, r3
 8009318:	4680      	movhi	r8, r0
 800931a:	2303      	movs	r3, #3
 800931c:	6123      	str	r3, [r4, #16]
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	f023 0204 	bic.w	r2, r3, #4
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	f04f 0900 	mov.w	r9, #0
 800932a:	9700      	str	r7, [sp, #0]
 800932c:	4633      	mov	r3, r6
 800932e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f9d8 	bl	80096e8 <_printf_common>
 8009338:	3001      	adds	r0, #1
 800933a:	f040 8090 	bne.w	800945e <_printf_float+0x1e2>
 800933e:	f04f 30ff 	mov.w	r0, #4294967295
 8009342:	b00d      	add	sp, #52	; 0x34
 8009344:	ecbd 8b02 	vpop	{d8}
 8009348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934c:	4642      	mov	r2, r8
 800934e:	464b      	mov	r3, r9
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 fbfa 	bl	8000b4c <__aeabi_dcmpun>
 8009358:	b140      	cbz	r0, 800936c <_printf_float+0xf0>
 800935a:	464b      	mov	r3, r9
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfbc      	itt	lt
 8009360:	232d      	movlt	r3, #45	; 0x2d
 8009362:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009366:	487f      	ldr	r0, [pc, #508]	; (8009564 <_printf_float+0x2e8>)
 8009368:	4b7f      	ldr	r3, [pc, #508]	; (8009568 <_printf_float+0x2ec>)
 800936a:	e7d1      	b.n	8009310 <_printf_float+0x94>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009372:	9206      	str	r2, [sp, #24]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	d13f      	bne.n	80093f8 <_printf_float+0x17c>
 8009378:	2306      	movs	r3, #6
 800937a:	6063      	str	r3, [r4, #4]
 800937c:	9b05      	ldr	r3, [sp, #20]
 800937e:	6861      	ldr	r1, [r4, #4]
 8009380:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009384:	2300      	movs	r3, #0
 8009386:	9303      	str	r3, [sp, #12]
 8009388:	ab0a      	add	r3, sp, #40	; 0x28
 800938a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800938e:	ab09      	add	r3, sp, #36	; 0x24
 8009390:	ec49 8b10 	vmov	d0, r8, r9
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff fecd 	bl	800913c <__cvt>
 80093a2:	9b06      	ldr	r3, [sp, #24]
 80093a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093a6:	2b47      	cmp	r3, #71	; 0x47
 80093a8:	4680      	mov	r8, r0
 80093aa:	d108      	bne.n	80093be <_printf_float+0x142>
 80093ac:	1cc8      	adds	r0, r1, #3
 80093ae:	db02      	blt.n	80093b6 <_printf_float+0x13a>
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	4299      	cmp	r1, r3
 80093b4:	dd41      	ble.n	800943a <_printf_float+0x1be>
 80093b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80093ba:	fa5f fb8b 	uxtb.w	fp, fp
 80093be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093c2:	d820      	bhi.n	8009406 <_printf_float+0x18a>
 80093c4:	3901      	subs	r1, #1
 80093c6:	465a      	mov	r2, fp
 80093c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093cc:	9109      	str	r1, [sp, #36]	; 0x24
 80093ce:	f7ff ff17 	bl	8009200 <__exponent>
 80093d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d4:	1813      	adds	r3, r2, r0
 80093d6:	2a01      	cmp	r2, #1
 80093d8:	4681      	mov	r9, r0
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	dc02      	bgt.n	80093e4 <_printf_float+0x168>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	07d2      	lsls	r2, r2, #31
 80093e2:	d501      	bpl.n	80093e8 <_printf_float+0x16c>
 80093e4:	3301      	adds	r3, #1
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d09c      	beq.n	800932a <_printf_float+0xae>
 80093f0:	232d      	movs	r3, #45	; 0x2d
 80093f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f6:	e798      	b.n	800932a <_printf_float+0xae>
 80093f8:	9a06      	ldr	r2, [sp, #24]
 80093fa:	2a47      	cmp	r2, #71	; 0x47
 80093fc:	d1be      	bne.n	800937c <_printf_float+0x100>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1bc      	bne.n	800937c <_printf_float+0x100>
 8009402:	2301      	movs	r3, #1
 8009404:	e7b9      	b.n	800937a <_printf_float+0xfe>
 8009406:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800940a:	d118      	bne.n	800943e <_printf_float+0x1c2>
 800940c:	2900      	cmp	r1, #0
 800940e:	6863      	ldr	r3, [r4, #4]
 8009410:	dd0b      	ble.n	800942a <_printf_float+0x1ae>
 8009412:	6121      	str	r1, [r4, #16]
 8009414:	b913      	cbnz	r3, 800941c <_printf_float+0x1a0>
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	07d0      	lsls	r0, r2, #31
 800941a:	d502      	bpl.n	8009422 <_printf_float+0x1a6>
 800941c:	3301      	adds	r3, #1
 800941e:	440b      	add	r3, r1
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	65a1      	str	r1, [r4, #88]	; 0x58
 8009424:	f04f 0900 	mov.w	r9, #0
 8009428:	e7de      	b.n	80093e8 <_printf_float+0x16c>
 800942a:	b913      	cbnz	r3, 8009432 <_printf_float+0x1b6>
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	07d2      	lsls	r2, r2, #31
 8009430:	d501      	bpl.n	8009436 <_printf_float+0x1ba>
 8009432:	3302      	adds	r3, #2
 8009434:	e7f4      	b.n	8009420 <_printf_float+0x1a4>
 8009436:	2301      	movs	r3, #1
 8009438:	e7f2      	b.n	8009420 <_printf_float+0x1a4>
 800943a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800943e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009440:	4299      	cmp	r1, r3
 8009442:	db05      	blt.n	8009450 <_printf_float+0x1d4>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	6121      	str	r1, [r4, #16]
 8009448:	07d8      	lsls	r0, r3, #31
 800944a:	d5ea      	bpl.n	8009422 <_printf_float+0x1a6>
 800944c:	1c4b      	adds	r3, r1, #1
 800944e:	e7e7      	b.n	8009420 <_printf_float+0x1a4>
 8009450:	2900      	cmp	r1, #0
 8009452:	bfd4      	ite	le
 8009454:	f1c1 0202 	rsble	r2, r1, #2
 8009458:	2201      	movgt	r2, #1
 800945a:	4413      	add	r3, r2
 800945c:	e7e0      	b.n	8009420 <_printf_float+0x1a4>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	055a      	lsls	r2, r3, #21
 8009462:	d407      	bmi.n	8009474 <_printf_float+0x1f8>
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	4642      	mov	r2, r8
 8009468:	4631      	mov	r1, r6
 800946a:	4628      	mov	r0, r5
 800946c:	47b8      	blx	r7
 800946e:	3001      	adds	r0, #1
 8009470:	d12c      	bne.n	80094cc <_printf_float+0x250>
 8009472:	e764      	b.n	800933e <_printf_float+0xc2>
 8009474:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009478:	f240 80e0 	bls.w	800963c <_printf_float+0x3c0>
 800947c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009480:	2200      	movs	r2, #0
 8009482:	2300      	movs	r3, #0
 8009484:	f7f7 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 8009488:	2800      	cmp	r0, #0
 800948a:	d034      	beq.n	80094f6 <_printf_float+0x27a>
 800948c:	4a37      	ldr	r2, [pc, #220]	; (800956c <_printf_float+0x2f0>)
 800948e:	2301      	movs	r3, #1
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af51 	beq.w	800933e <_printf_float+0xc2>
 800949c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094a0:	429a      	cmp	r2, r3
 80094a2:	db02      	blt.n	80094aa <_printf_float+0x22e>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	07d8      	lsls	r0, r3, #31
 80094a8:	d510      	bpl.n	80094cc <_printf_float+0x250>
 80094aa:	ee18 3a10 	vmov	r3, s16
 80094ae:	4652      	mov	r2, sl
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af41 	beq.w	800933e <_printf_float+0xc2>
 80094bc:	f04f 0800 	mov.w	r8, #0
 80094c0:	f104 091a 	add.w	r9, r4, #26
 80094c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4543      	cmp	r3, r8
 80094ca:	dc09      	bgt.n	80094e0 <_printf_float+0x264>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	079b      	lsls	r3, r3, #30
 80094d0:	f100 8105 	bmi.w	80096de <_printf_float+0x462>
 80094d4:	68e0      	ldr	r0, [r4, #12]
 80094d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d8:	4298      	cmp	r0, r3
 80094da:	bfb8      	it	lt
 80094dc:	4618      	movlt	r0, r3
 80094de:	e730      	b.n	8009342 <_printf_float+0xc6>
 80094e0:	2301      	movs	r3, #1
 80094e2:	464a      	mov	r2, r9
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af27 	beq.w	800933e <_printf_float+0xc2>
 80094f0:	f108 0801 	add.w	r8, r8, #1
 80094f4:	e7e6      	b.n	80094c4 <_printf_float+0x248>
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc39      	bgt.n	8009570 <_printf_float+0x2f4>
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <_printf_float+0x2f0>)
 80094fe:	2301      	movs	r3, #1
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f af19 	beq.w	800933e <_printf_float+0xc2>
 800950c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009510:	4313      	orrs	r3, r2
 8009512:	d102      	bne.n	800951a <_printf_float+0x29e>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	07d9      	lsls	r1, r3, #31
 8009518:	d5d8      	bpl.n	80094cc <_printf_float+0x250>
 800951a:	ee18 3a10 	vmov	r3, s16
 800951e:	4652      	mov	r2, sl
 8009520:	4631      	mov	r1, r6
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	f43f af09 	beq.w	800933e <_printf_float+0xc2>
 800952c:	f04f 0900 	mov.w	r9, #0
 8009530:	f104 0a1a 	add.w	sl, r4, #26
 8009534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009536:	425b      	negs	r3, r3
 8009538:	454b      	cmp	r3, r9
 800953a:	dc01      	bgt.n	8009540 <_printf_float+0x2c4>
 800953c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953e:	e792      	b.n	8009466 <_printf_float+0x1ea>
 8009540:	2301      	movs	r3, #1
 8009542:	4652      	mov	r2, sl
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f aef7 	beq.w	800933e <_printf_float+0xc2>
 8009550:	f109 0901 	add.w	r9, r9, #1
 8009554:	e7ee      	b.n	8009534 <_printf_float+0x2b8>
 8009556:	bf00      	nop
 8009558:	7fefffff 	.word	0x7fefffff
 800955c:	0800bed8 	.word	0x0800bed8
 8009560:	0800bedc 	.word	0x0800bedc
 8009564:	0800bee4 	.word	0x0800bee4
 8009568:	0800bee0 	.word	0x0800bee0
 800956c:	0800bee8 	.word	0x0800bee8
 8009570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009574:	429a      	cmp	r2, r3
 8009576:	bfa8      	it	ge
 8009578:	461a      	movge	r2, r3
 800957a:	2a00      	cmp	r2, #0
 800957c:	4691      	mov	r9, r2
 800957e:	dc37      	bgt.n	80095f0 <_printf_float+0x374>
 8009580:	f04f 0b00 	mov.w	fp, #0
 8009584:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009588:	f104 021a 	add.w	r2, r4, #26
 800958c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	eba3 0309 	sub.w	r3, r3, r9
 8009594:	455b      	cmp	r3, fp
 8009596:	dc33      	bgt.n	8009600 <_printf_float+0x384>
 8009598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800959c:	429a      	cmp	r2, r3
 800959e:	db3b      	blt.n	8009618 <_printf_float+0x39c>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07da      	lsls	r2, r3, #31
 80095a4:	d438      	bmi.n	8009618 <_printf_float+0x39c>
 80095a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	eba2 0901 	sub.w	r9, r2, r1
 80095b2:	4599      	cmp	r9, r3
 80095b4:	bfa8      	it	ge
 80095b6:	4699      	movge	r9, r3
 80095b8:	f1b9 0f00 	cmp.w	r9, #0
 80095bc:	dc35      	bgt.n	800962a <_printf_float+0x3ae>
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095c6:	f104 0a1a 	add.w	sl, r4, #26
 80095ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095ce:	1a9b      	subs	r3, r3, r2
 80095d0:	eba3 0309 	sub.w	r3, r3, r9
 80095d4:	4543      	cmp	r3, r8
 80095d6:	f77f af79 	ble.w	80094cc <_printf_float+0x250>
 80095da:	2301      	movs	r3, #1
 80095dc:	4652      	mov	r2, sl
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f aeaa 	beq.w	800933e <_printf_float+0xc2>
 80095ea:	f108 0801 	add.w	r8, r8, #1
 80095ee:	e7ec      	b.n	80095ca <_printf_float+0x34e>
 80095f0:	4613      	mov	r3, r2
 80095f2:	4631      	mov	r1, r6
 80095f4:	4642      	mov	r2, r8
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	d1c0      	bne.n	8009580 <_printf_float+0x304>
 80095fe:	e69e      	b.n	800933e <_printf_float+0xc2>
 8009600:	2301      	movs	r3, #1
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	9205      	str	r2, [sp, #20]
 8009608:	47b8      	blx	r7
 800960a:	3001      	adds	r0, #1
 800960c:	f43f ae97 	beq.w	800933e <_printf_float+0xc2>
 8009610:	9a05      	ldr	r2, [sp, #20]
 8009612:	f10b 0b01 	add.w	fp, fp, #1
 8009616:	e7b9      	b.n	800958c <_printf_float+0x310>
 8009618:	ee18 3a10 	vmov	r3, s16
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	d1be      	bne.n	80095a6 <_printf_float+0x32a>
 8009628:	e689      	b.n	800933e <_printf_float+0xc2>
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	464b      	mov	r3, r9
 800962e:	4442      	add	r2, r8
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	d1c1      	bne.n	80095be <_printf_float+0x342>
 800963a:	e680      	b.n	800933e <_printf_float+0xc2>
 800963c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963e:	2a01      	cmp	r2, #1
 8009640:	dc01      	bgt.n	8009646 <_printf_float+0x3ca>
 8009642:	07db      	lsls	r3, r3, #31
 8009644:	d538      	bpl.n	80096b8 <_printf_float+0x43c>
 8009646:	2301      	movs	r3, #1
 8009648:	4642      	mov	r2, r8
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	f43f ae74 	beq.w	800933e <_printf_float+0xc2>
 8009656:	ee18 3a10 	vmov	r3, s16
 800965a:	4652      	mov	r2, sl
 800965c:	4631      	mov	r1, r6
 800965e:	4628      	mov	r0, r5
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f ae6b 	beq.w	800933e <_printf_float+0xc2>
 8009668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800966c:	2200      	movs	r2, #0
 800966e:	2300      	movs	r3, #0
 8009670:	f7f7 fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009674:	b9d8      	cbnz	r0, 80096ae <_printf_float+0x432>
 8009676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009678:	f108 0201 	add.w	r2, r8, #1
 800967c:	3b01      	subs	r3, #1
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	d10e      	bne.n	80096a6 <_printf_float+0x42a>
 8009688:	e659      	b.n	800933e <_printf_float+0xc2>
 800968a:	2301      	movs	r3, #1
 800968c:	4652      	mov	r2, sl
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	f43f ae52 	beq.w	800933e <_printf_float+0xc2>
 800969a:	f108 0801 	add.w	r8, r8, #1
 800969e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a0:	3b01      	subs	r3, #1
 80096a2:	4543      	cmp	r3, r8
 80096a4:	dcf1      	bgt.n	800968a <_printf_float+0x40e>
 80096a6:	464b      	mov	r3, r9
 80096a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096ac:	e6dc      	b.n	8009468 <_printf_float+0x1ec>
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	f104 0a1a 	add.w	sl, r4, #26
 80096b6:	e7f2      	b.n	800969e <_printf_float+0x422>
 80096b8:	2301      	movs	r3, #1
 80096ba:	4642      	mov	r2, r8
 80096bc:	e7df      	b.n	800967e <_printf_float+0x402>
 80096be:	2301      	movs	r3, #1
 80096c0:	464a      	mov	r2, r9
 80096c2:	4631      	mov	r1, r6
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b8      	blx	r7
 80096c8:	3001      	adds	r0, #1
 80096ca:	f43f ae38 	beq.w	800933e <_printf_float+0xc2>
 80096ce:	f108 0801 	add.w	r8, r8, #1
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	4543      	cmp	r3, r8
 80096da:	dcf0      	bgt.n	80096be <_printf_float+0x442>
 80096dc:	e6fa      	b.n	80094d4 <_printf_float+0x258>
 80096de:	f04f 0800 	mov.w	r8, #0
 80096e2:	f104 0919 	add.w	r9, r4, #25
 80096e6:	e7f4      	b.n	80096d2 <_printf_float+0x456>

080096e8 <_printf_common>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	4616      	mov	r6, r2
 80096ee:	4699      	mov	r9, r3
 80096f0:	688a      	ldr	r2, [r1, #8]
 80096f2:	690b      	ldr	r3, [r1, #16]
 80096f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096f8:	4293      	cmp	r3, r2
 80096fa:	bfb8      	it	lt
 80096fc:	4613      	movlt	r3, r2
 80096fe:	6033      	str	r3, [r6, #0]
 8009700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009704:	4607      	mov	r7, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b10a      	cbz	r2, 800970e <_printf_common+0x26>
 800970a:	3301      	adds	r3, #1
 800970c:	6033      	str	r3, [r6, #0]
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	0699      	lsls	r1, r3, #26
 8009712:	bf42      	ittt	mi
 8009714:	6833      	ldrmi	r3, [r6, #0]
 8009716:	3302      	addmi	r3, #2
 8009718:	6033      	strmi	r3, [r6, #0]
 800971a:	6825      	ldr	r5, [r4, #0]
 800971c:	f015 0506 	ands.w	r5, r5, #6
 8009720:	d106      	bne.n	8009730 <_printf_common+0x48>
 8009722:	f104 0a19 	add.w	sl, r4, #25
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	6832      	ldr	r2, [r6, #0]
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	42ab      	cmp	r3, r5
 800972e:	dc26      	bgt.n	800977e <_printf_common+0x96>
 8009730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009734:	1e13      	subs	r3, r2, #0
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	bf18      	it	ne
 800973a:	2301      	movne	r3, #1
 800973c:	0692      	lsls	r2, r2, #26
 800973e:	d42b      	bmi.n	8009798 <_printf_common+0xb0>
 8009740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009744:	4649      	mov	r1, r9
 8009746:	4638      	mov	r0, r7
 8009748:	47c0      	blx	r8
 800974a:	3001      	adds	r0, #1
 800974c:	d01e      	beq.n	800978c <_printf_common+0xa4>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	68e5      	ldr	r5, [r4, #12]
 8009752:	6832      	ldr	r2, [r6, #0]
 8009754:	f003 0306 	and.w	r3, r3, #6
 8009758:	2b04      	cmp	r3, #4
 800975a:	bf08      	it	eq
 800975c:	1aad      	subeq	r5, r5, r2
 800975e:	68a3      	ldr	r3, [r4, #8]
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	bf0c      	ite	eq
 8009764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009768:	2500      	movne	r5, #0
 800976a:	4293      	cmp	r3, r2
 800976c:	bfc4      	itt	gt
 800976e:	1a9b      	subgt	r3, r3, r2
 8009770:	18ed      	addgt	r5, r5, r3
 8009772:	2600      	movs	r6, #0
 8009774:	341a      	adds	r4, #26
 8009776:	42b5      	cmp	r5, r6
 8009778:	d11a      	bne.n	80097b0 <_printf_common+0xc8>
 800977a:	2000      	movs	r0, #0
 800977c:	e008      	b.n	8009790 <_printf_common+0xa8>
 800977e:	2301      	movs	r3, #1
 8009780:	4652      	mov	r2, sl
 8009782:	4649      	mov	r1, r9
 8009784:	4638      	mov	r0, r7
 8009786:	47c0      	blx	r8
 8009788:	3001      	adds	r0, #1
 800978a:	d103      	bne.n	8009794 <_printf_common+0xac>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009794:	3501      	adds	r5, #1
 8009796:	e7c6      	b.n	8009726 <_printf_common+0x3e>
 8009798:	18e1      	adds	r1, r4, r3
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	2030      	movs	r0, #48	; 0x30
 800979e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a2:	4422      	add	r2, r4
 80097a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ac:	3302      	adds	r3, #2
 80097ae:	e7c7      	b.n	8009740 <_printf_common+0x58>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4622      	mov	r2, r4
 80097b4:	4649      	mov	r1, r9
 80097b6:	4638      	mov	r0, r7
 80097b8:	47c0      	blx	r8
 80097ba:	3001      	adds	r0, #1
 80097bc:	d0e6      	beq.n	800978c <_printf_common+0xa4>
 80097be:	3601      	adds	r6, #1
 80097c0:	e7d9      	b.n	8009776 <_printf_common+0x8e>
	...

080097c4 <_printf_i>:
 80097c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	460c      	mov	r4, r1
 80097ca:	4691      	mov	r9, r2
 80097cc:	7e27      	ldrb	r7, [r4, #24]
 80097ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097d0:	2f78      	cmp	r7, #120	; 0x78
 80097d2:	4680      	mov	r8, r0
 80097d4:	469a      	mov	sl, r3
 80097d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097da:	d807      	bhi.n	80097ec <_printf_i+0x28>
 80097dc:	2f62      	cmp	r7, #98	; 0x62
 80097de:	d80a      	bhi.n	80097f6 <_printf_i+0x32>
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	f000 80d8 	beq.w	8009996 <_printf_i+0x1d2>
 80097e6:	2f58      	cmp	r7, #88	; 0x58
 80097e8:	f000 80a3 	beq.w	8009932 <_printf_i+0x16e>
 80097ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097f4:	e03a      	b.n	800986c <_printf_i+0xa8>
 80097f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097fa:	2b15      	cmp	r3, #21
 80097fc:	d8f6      	bhi.n	80097ec <_printf_i+0x28>
 80097fe:	a001      	add	r0, pc, #4	; (adr r0, 8009804 <_printf_i+0x40>)
 8009800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009804:	0800985d 	.word	0x0800985d
 8009808:	08009871 	.word	0x08009871
 800980c:	080097ed 	.word	0x080097ed
 8009810:	080097ed 	.word	0x080097ed
 8009814:	080097ed 	.word	0x080097ed
 8009818:	080097ed 	.word	0x080097ed
 800981c:	08009871 	.word	0x08009871
 8009820:	080097ed 	.word	0x080097ed
 8009824:	080097ed 	.word	0x080097ed
 8009828:	080097ed 	.word	0x080097ed
 800982c:	080097ed 	.word	0x080097ed
 8009830:	0800997d 	.word	0x0800997d
 8009834:	080098a1 	.word	0x080098a1
 8009838:	0800995f 	.word	0x0800995f
 800983c:	080097ed 	.word	0x080097ed
 8009840:	080097ed 	.word	0x080097ed
 8009844:	0800999f 	.word	0x0800999f
 8009848:	080097ed 	.word	0x080097ed
 800984c:	080098a1 	.word	0x080098a1
 8009850:	080097ed 	.word	0x080097ed
 8009854:	080097ed 	.word	0x080097ed
 8009858:	08009967 	.word	0x08009967
 800985c:	680b      	ldr	r3, [r1, #0]
 800985e:	1d1a      	adds	r2, r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	600a      	str	r2, [r1, #0]
 8009864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800986c:	2301      	movs	r3, #1
 800986e:	e0a3      	b.n	80099b8 <_printf_i+0x1f4>
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	6808      	ldr	r0, [r1, #0]
 8009874:	062e      	lsls	r6, r5, #24
 8009876:	f100 0304 	add.w	r3, r0, #4
 800987a:	d50a      	bpl.n	8009892 <_printf_i+0xce>
 800987c:	6805      	ldr	r5, [r0, #0]
 800987e:	600b      	str	r3, [r1, #0]
 8009880:	2d00      	cmp	r5, #0
 8009882:	da03      	bge.n	800988c <_printf_i+0xc8>
 8009884:	232d      	movs	r3, #45	; 0x2d
 8009886:	426d      	negs	r5, r5
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800988c:	485e      	ldr	r0, [pc, #376]	; (8009a08 <_printf_i+0x244>)
 800988e:	230a      	movs	r3, #10
 8009890:	e019      	b.n	80098c6 <_printf_i+0x102>
 8009892:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009896:	6805      	ldr	r5, [r0, #0]
 8009898:	600b      	str	r3, [r1, #0]
 800989a:	bf18      	it	ne
 800989c:	b22d      	sxthne	r5, r5
 800989e:	e7ef      	b.n	8009880 <_printf_i+0xbc>
 80098a0:	680b      	ldr	r3, [r1, #0]
 80098a2:	6825      	ldr	r5, [r4, #0]
 80098a4:	1d18      	adds	r0, r3, #4
 80098a6:	6008      	str	r0, [r1, #0]
 80098a8:	0628      	lsls	r0, r5, #24
 80098aa:	d501      	bpl.n	80098b0 <_printf_i+0xec>
 80098ac:	681d      	ldr	r5, [r3, #0]
 80098ae:	e002      	b.n	80098b6 <_printf_i+0xf2>
 80098b0:	0669      	lsls	r1, r5, #25
 80098b2:	d5fb      	bpl.n	80098ac <_printf_i+0xe8>
 80098b4:	881d      	ldrh	r5, [r3, #0]
 80098b6:	4854      	ldr	r0, [pc, #336]	; (8009a08 <_printf_i+0x244>)
 80098b8:	2f6f      	cmp	r7, #111	; 0x6f
 80098ba:	bf0c      	ite	eq
 80098bc:	2308      	moveq	r3, #8
 80098be:	230a      	movne	r3, #10
 80098c0:	2100      	movs	r1, #0
 80098c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098c6:	6866      	ldr	r6, [r4, #4]
 80098c8:	60a6      	str	r6, [r4, #8]
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	bfa2      	ittt	ge
 80098ce:	6821      	ldrge	r1, [r4, #0]
 80098d0:	f021 0104 	bicge.w	r1, r1, #4
 80098d4:	6021      	strge	r1, [r4, #0]
 80098d6:	b90d      	cbnz	r5, 80098dc <_printf_i+0x118>
 80098d8:	2e00      	cmp	r6, #0
 80098da:	d04d      	beq.n	8009978 <_printf_i+0x1b4>
 80098dc:	4616      	mov	r6, r2
 80098de:	fbb5 f1f3 	udiv	r1, r5, r3
 80098e2:	fb03 5711 	mls	r7, r3, r1, r5
 80098e6:	5dc7      	ldrb	r7, [r0, r7]
 80098e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098ec:	462f      	mov	r7, r5
 80098ee:	42bb      	cmp	r3, r7
 80098f0:	460d      	mov	r5, r1
 80098f2:	d9f4      	bls.n	80098de <_printf_i+0x11a>
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d10b      	bne.n	8009910 <_printf_i+0x14c>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	07df      	lsls	r7, r3, #31
 80098fc:	d508      	bpl.n	8009910 <_printf_i+0x14c>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	6861      	ldr	r1, [r4, #4]
 8009902:	4299      	cmp	r1, r3
 8009904:	bfde      	ittt	le
 8009906:	2330      	movle	r3, #48	; 0x30
 8009908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800990c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009910:	1b92      	subs	r2, r2, r6
 8009912:	6122      	str	r2, [r4, #16]
 8009914:	f8cd a000 	str.w	sl, [sp]
 8009918:	464b      	mov	r3, r9
 800991a:	aa03      	add	r2, sp, #12
 800991c:	4621      	mov	r1, r4
 800991e:	4640      	mov	r0, r8
 8009920:	f7ff fee2 	bl	80096e8 <_printf_common>
 8009924:	3001      	adds	r0, #1
 8009926:	d14c      	bne.n	80099c2 <_printf_i+0x1fe>
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	b004      	add	sp, #16
 800992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009932:	4835      	ldr	r0, [pc, #212]	; (8009a08 <_printf_i+0x244>)
 8009934:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	680e      	ldr	r6, [r1, #0]
 800993c:	061f      	lsls	r7, r3, #24
 800993e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009942:	600e      	str	r6, [r1, #0]
 8009944:	d514      	bpl.n	8009970 <_printf_i+0x1ac>
 8009946:	07d9      	lsls	r1, r3, #31
 8009948:	bf44      	itt	mi
 800994a:	f043 0320 	orrmi.w	r3, r3, #32
 800994e:	6023      	strmi	r3, [r4, #0]
 8009950:	b91d      	cbnz	r5, 800995a <_printf_i+0x196>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	f023 0320 	bic.w	r3, r3, #32
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	2310      	movs	r3, #16
 800995c:	e7b0      	b.n	80098c0 <_printf_i+0xfc>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	f043 0320 	orr.w	r3, r3, #32
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	2378      	movs	r3, #120	; 0x78
 8009968:	4828      	ldr	r0, [pc, #160]	; (8009a0c <_printf_i+0x248>)
 800996a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800996e:	e7e3      	b.n	8009938 <_printf_i+0x174>
 8009970:	065e      	lsls	r6, r3, #25
 8009972:	bf48      	it	mi
 8009974:	b2ad      	uxthmi	r5, r5
 8009976:	e7e6      	b.n	8009946 <_printf_i+0x182>
 8009978:	4616      	mov	r6, r2
 800997a:	e7bb      	b.n	80098f4 <_printf_i+0x130>
 800997c:	680b      	ldr	r3, [r1, #0]
 800997e:	6826      	ldr	r6, [r4, #0]
 8009980:	6960      	ldr	r0, [r4, #20]
 8009982:	1d1d      	adds	r5, r3, #4
 8009984:	600d      	str	r5, [r1, #0]
 8009986:	0635      	lsls	r5, r6, #24
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	d501      	bpl.n	8009990 <_printf_i+0x1cc>
 800998c:	6018      	str	r0, [r3, #0]
 800998e:	e002      	b.n	8009996 <_printf_i+0x1d2>
 8009990:	0671      	lsls	r1, r6, #25
 8009992:	d5fb      	bpl.n	800998c <_printf_i+0x1c8>
 8009994:	8018      	strh	r0, [r3, #0]
 8009996:	2300      	movs	r3, #0
 8009998:	6123      	str	r3, [r4, #16]
 800999a:	4616      	mov	r6, r2
 800999c:	e7ba      	b.n	8009914 <_printf_i+0x150>
 800999e:	680b      	ldr	r3, [r1, #0]
 80099a0:	1d1a      	adds	r2, r3, #4
 80099a2:	600a      	str	r2, [r1, #0]
 80099a4:	681e      	ldr	r6, [r3, #0]
 80099a6:	6862      	ldr	r2, [r4, #4]
 80099a8:	2100      	movs	r1, #0
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7f6 fc28 	bl	8000200 <memchr>
 80099b0:	b108      	cbz	r0, 80099b6 <_printf_i+0x1f2>
 80099b2:	1b80      	subs	r0, r0, r6
 80099b4:	6060      	str	r0, [r4, #4]
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	2300      	movs	r3, #0
 80099bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c0:	e7a8      	b.n	8009914 <_printf_i+0x150>
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	4632      	mov	r2, r6
 80099c6:	4649      	mov	r1, r9
 80099c8:	4640      	mov	r0, r8
 80099ca:	47d0      	blx	sl
 80099cc:	3001      	adds	r0, #1
 80099ce:	d0ab      	beq.n	8009928 <_printf_i+0x164>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	079b      	lsls	r3, r3, #30
 80099d4:	d413      	bmi.n	80099fe <_printf_i+0x23a>
 80099d6:	68e0      	ldr	r0, [r4, #12]
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	4298      	cmp	r0, r3
 80099dc:	bfb8      	it	lt
 80099de:	4618      	movlt	r0, r3
 80099e0:	e7a4      	b.n	800992c <_printf_i+0x168>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4632      	mov	r2, r6
 80099e6:	4649      	mov	r1, r9
 80099e8:	4640      	mov	r0, r8
 80099ea:	47d0      	blx	sl
 80099ec:	3001      	adds	r0, #1
 80099ee:	d09b      	beq.n	8009928 <_printf_i+0x164>
 80099f0:	3501      	adds	r5, #1
 80099f2:	68e3      	ldr	r3, [r4, #12]
 80099f4:	9903      	ldr	r1, [sp, #12]
 80099f6:	1a5b      	subs	r3, r3, r1
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	dcf2      	bgt.n	80099e2 <_printf_i+0x21e>
 80099fc:	e7eb      	b.n	80099d6 <_printf_i+0x212>
 80099fe:	2500      	movs	r5, #0
 8009a00:	f104 0619 	add.w	r6, r4, #25
 8009a04:	e7f5      	b.n	80099f2 <_printf_i+0x22e>
 8009a06:	bf00      	nop
 8009a08:	0800beea 	.word	0x0800beea
 8009a0c:	0800befb 	.word	0x0800befb

08009a10 <siprintf>:
 8009a10:	b40e      	push	{r1, r2, r3}
 8009a12:	b500      	push	{lr}
 8009a14:	b09c      	sub	sp, #112	; 0x70
 8009a16:	ab1d      	add	r3, sp, #116	; 0x74
 8009a18:	9002      	str	r0, [sp, #8]
 8009a1a:	9006      	str	r0, [sp, #24]
 8009a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a20:	4809      	ldr	r0, [pc, #36]	; (8009a48 <siprintf+0x38>)
 8009a22:	9107      	str	r1, [sp, #28]
 8009a24:	9104      	str	r1, [sp, #16]
 8009a26:	4909      	ldr	r1, [pc, #36]	; (8009a4c <siprintf+0x3c>)
 8009a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	6800      	ldr	r0, [r0, #0]
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	a902      	add	r1, sp, #8
 8009a34:	f001 fb32 	bl	800b09c <_svfiprintf_r>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	b01c      	add	sp, #112	; 0x70
 8009a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a44:	b003      	add	sp, #12
 8009a46:	4770      	bx	lr
 8009a48:	200000c0 	.word	0x200000c0
 8009a4c:	ffff0208 	.word	0xffff0208

08009a50 <quorem>:
 8009a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	6903      	ldr	r3, [r0, #16]
 8009a56:	690c      	ldr	r4, [r1, #16]
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	f2c0 8081 	blt.w	8009b62 <quorem+0x112>
 8009a60:	3c01      	subs	r4, #1
 8009a62:	f101 0814 	add.w	r8, r1, #20
 8009a66:	f100 0514 	add.w	r5, r0, #20
 8009a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a88:	d331      	bcc.n	8009aee <quorem+0x9e>
 8009a8a:	f04f 0e00 	mov.w	lr, #0
 8009a8e:	4640      	mov	r0, r8
 8009a90:	46ac      	mov	ip, r5
 8009a92:	46f2      	mov	sl, lr
 8009a94:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a98:	b293      	uxth	r3, r2
 8009a9a:	fb06 e303 	mla	r3, r6, r3, lr
 8009a9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8009aa8:	0c12      	lsrs	r2, r2, #16
 8009aaa:	f8dc a000 	ldr.w	sl, [ip]
 8009aae:	fb06 e202 	mla	r2, r6, r2, lr
 8009ab2:	fa13 f38a 	uxtah	r3, r3, sl
 8009ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009aba:	fa1f fa82 	uxth.w	sl, r2
 8009abe:	f8dc 2000 	ldr.w	r2, [ip]
 8009ac2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad0:	4581      	cmp	r9, r0
 8009ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ada:	d2db      	bcs.n	8009a94 <quorem+0x44>
 8009adc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ae0:	b92b      	cbnz	r3, 8009aee <quorem+0x9e>
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	3b04      	subs	r3, #4
 8009ae6:	429d      	cmp	r5, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	d32e      	bcc.n	8009b4a <quorem+0xfa>
 8009aec:	613c      	str	r4, [r7, #16]
 8009aee:	4638      	mov	r0, r7
 8009af0:	f001 f8be 	bl	800ac70 <__mcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	db24      	blt.n	8009b42 <quorem+0xf2>
 8009af8:	3601      	adds	r6, #1
 8009afa:	4628      	mov	r0, r5
 8009afc:	f04f 0c00 	mov.w	ip, #0
 8009b00:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b04:	f8d0 e000 	ldr.w	lr, [r0]
 8009b08:	b293      	uxth	r3, r2
 8009b0a:	ebac 0303 	sub.w	r3, ip, r3
 8009b0e:	0c12      	lsrs	r2, r2, #16
 8009b10:	fa13 f38e 	uxtah	r3, r3, lr
 8009b14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b22:	45c1      	cmp	r9, r8
 8009b24:	f840 3b04 	str.w	r3, [r0], #4
 8009b28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b2c:	d2e8      	bcs.n	8009b00 <quorem+0xb0>
 8009b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b36:	b922      	cbnz	r2, 8009b42 <quorem+0xf2>
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	429d      	cmp	r5, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	d30a      	bcc.n	8009b56 <quorem+0x106>
 8009b40:	613c      	str	r4, [r7, #16]
 8009b42:	4630      	mov	r0, r6
 8009b44:	b003      	add	sp, #12
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	d1cc      	bne.n	8009aec <quorem+0x9c>
 8009b52:	3c01      	subs	r4, #1
 8009b54:	e7c7      	b.n	8009ae6 <quorem+0x96>
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	3b04      	subs	r3, #4
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d1f0      	bne.n	8009b40 <quorem+0xf0>
 8009b5e:	3c01      	subs	r4, #1
 8009b60:	e7eb      	b.n	8009b3a <quorem+0xea>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e7ee      	b.n	8009b44 <quorem+0xf4>
	...

08009b68 <_dtoa_r>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	ed2d 8b02 	vpush	{d8}
 8009b70:	ec57 6b10 	vmov	r6, r7, d0
 8009b74:	b095      	sub	sp, #84	; 0x54
 8009b76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b7c:	9105      	str	r1, [sp, #20]
 8009b7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009b82:	4604      	mov	r4, r0
 8009b84:	9209      	str	r2, [sp, #36]	; 0x24
 8009b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b88:	b975      	cbnz	r5, 8009ba8 <_dtoa_r+0x40>
 8009b8a:	2010      	movs	r0, #16
 8009b8c:	f000 fddc 	bl	800a748 <malloc>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6260      	str	r0, [r4, #36]	; 0x24
 8009b94:	b920      	cbnz	r0, 8009ba0 <_dtoa_r+0x38>
 8009b96:	4bb2      	ldr	r3, [pc, #712]	; (8009e60 <_dtoa_r+0x2f8>)
 8009b98:	21ea      	movs	r1, #234	; 0xea
 8009b9a:	48b2      	ldr	r0, [pc, #712]	; (8009e64 <_dtoa_r+0x2fc>)
 8009b9c:	f001 fb8e 	bl	800b2bc <__assert_func>
 8009ba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ba4:	6005      	str	r5, [r0, #0]
 8009ba6:	60c5      	str	r5, [r0, #12]
 8009ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009baa:	6819      	ldr	r1, [r3, #0]
 8009bac:	b151      	cbz	r1, 8009bc4 <_dtoa_r+0x5c>
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	604a      	str	r2, [r1, #4]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4093      	lsls	r3, r2
 8009bb6:	608b      	str	r3, [r1, #8]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 fe1b 	bl	800a7f4 <_Bfree>
 8009bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	1e3b      	subs	r3, r7, #0
 8009bc6:	bfb9      	ittee	lt
 8009bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bcc:	9303      	strlt	r3, [sp, #12]
 8009bce:	2300      	movge	r3, #0
 8009bd0:	f8c8 3000 	strge.w	r3, [r8]
 8009bd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009bd8:	4ba3      	ldr	r3, [pc, #652]	; (8009e68 <_dtoa_r+0x300>)
 8009bda:	bfbc      	itt	lt
 8009bdc:	2201      	movlt	r2, #1
 8009bde:	f8c8 2000 	strlt.w	r2, [r8]
 8009be2:	ea33 0309 	bics.w	r3, r3, r9
 8009be6:	d11b      	bne.n	8009c20 <_dtoa_r+0xb8>
 8009be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bf4:	4333      	orrs	r3, r6
 8009bf6:	f000 857a 	beq.w	800a6ee <_dtoa_r+0xb86>
 8009bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bfc:	b963      	cbnz	r3, 8009c18 <_dtoa_r+0xb0>
 8009bfe:	4b9b      	ldr	r3, [pc, #620]	; (8009e6c <_dtoa_r+0x304>)
 8009c00:	e024      	b.n	8009c4c <_dtoa_r+0xe4>
 8009c02:	4b9b      	ldr	r3, [pc, #620]	; (8009e70 <_dtoa_r+0x308>)
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	9800      	ldr	r0, [sp, #0]
 8009c0e:	b015      	add	sp, #84	; 0x54
 8009c10:	ecbd 8b02 	vpop	{d8}
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	4b94      	ldr	r3, [pc, #592]	; (8009e6c <_dtoa_r+0x304>)
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	3303      	adds	r3, #3
 8009c1e:	e7f3      	b.n	8009c08 <_dtoa_r+0xa0>
 8009c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	ec51 0b17 	vmov	r0, r1, d7
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009c30:	f7f6 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c34:	4680      	mov	r8, r0
 8009c36:	b158      	cbz	r0, 8009c50 <_dtoa_r+0xe8>
 8009c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8551 	beq.w	800a6e8 <_dtoa_r+0xb80>
 8009c46:	488b      	ldr	r0, [pc, #556]	; (8009e74 <_dtoa_r+0x30c>)
 8009c48:	6018      	str	r0, [r3, #0]
 8009c4a:	1e43      	subs	r3, r0, #1
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	e7dd      	b.n	8009c0c <_dtoa_r+0xa4>
 8009c50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009c54:	aa12      	add	r2, sp, #72	; 0x48
 8009c56:	a913      	add	r1, sp, #76	; 0x4c
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 f8ad 	bl	800adb8 <__d2b>
 8009c5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c62:	4683      	mov	fp, r0
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	d07c      	beq.n	8009d62 <_dtoa_r+0x1fa>
 8009c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009c76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c82:	4b7d      	ldr	r3, [pc, #500]	; (8009e78 <_dtoa_r+0x310>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	4630      	mov	r0, r6
 8009c88:	4639      	mov	r1, r7
 8009c8a:	f7f6 fb0d 	bl	80002a8 <__aeabi_dsub>
 8009c8e:	a36e      	add	r3, pc, #440	; (adr r3, 8009e48 <_dtoa_r+0x2e0>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 fcc0 	bl	8000618 <__aeabi_dmul>
 8009c98:	a36d      	add	r3, pc, #436	; (adr r3, 8009e50 <_dtoa_r+0x2e8>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 fb05 	bl	80002ac <__adddf3>
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	f7f6 fc4c 	bl	8000544 <__aeabi_i2d>
 8009cac:	a36a      	add	r3, pc, #424	; (adr r3, 8009e58 <_dtoa_r+0x2f0>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f7f6 fcb1 	bl	8000618 <__aeabi_dmul>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	f7f6 faf5 	bl	80002ac <__adddf3>
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	f7f6 ff57 	bl	8000b78 <__aeabi_d2iz>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4682      	mov	sl, r0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 ff12 	bl	8000afc <__aeabi_dcmplt>
 8009cd8:	b148      	cbz	r0, 8009cee <_dtoa_r+0x186>
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f7f6 fc32 	bl	8000544 <__aeabi_i2d>
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	f7f6 ff00 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ce8:	b908      	cbnz	r0, 8009cee <_dtoa_r+0x186>
 8009cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cee:	f1ba 0f16 	cmp.w	sl, #22
 8009cf2:	d854      	bhi.n	8009d9e <_dtoa_r+0x236>
 8009cf4:	4b61      	ldr	r3, [pc, #388]	; (8009e7c <_dtoa_r+0x314>)
 8009cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d02:	f7f6 fefb 	bl	8000afc <__aeabi_dcmplt>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d04b      	beq.n	8009da2 <_dtoa_r+0x23a>
 8009d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d0e:	2300      	movs	r3, #0
 8009d10:	930e      	str	r3, [sp, #56]	; 0x38
 8009d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d14:	1b5d      	subs	r5, r3, r5
 8009d16:	1e6b      	subs	r3, r5, #1
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	bf43      	ittte	mi
 8009d1c:	2300      	movmi	r3, #0
 8009d1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009d22:	9304      	strmi	r3, [sp, #16]
 8009d24:	f04f 0800 	movpl.w	r8, #0
 8009d28:	f1ba 0f00 	cmp.w	sl, #0
 8009d2c:	db3b      	blt.n	8009da6 <_dtoa_r+0x23e>
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009d34:	4453      	add	r3, sl
 8009d36:	9304      	str	r3, [sp, #16]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9306      	str	r3, [sp, #24]
 8009d3c:	9b05      	ldr	r3, [sp, #20]
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d869      	bhi.n	8009e16 <_dtoa_r+0x2ae>
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	bfc4      	itt	gt
 8009d46:	3b04      	subgt	r3, #4
 8009d48:	9305      	strgt	r3, [sp, #20]
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009d50:	bfcc      	ite	gt
 8009d52:	2500      	movgt	r5, #0
 8009d54:	2501      	movle	r5, #1
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d869      	bhi.n	8009e2e <_dtoa_r+0x2c6>
 8009d5a:	e8df f003 	tbb	[pc, r3]
 8009d5e:	4e2c      	.short	0x4e2c
 8009d60:	5a4c      	.short	0x5a4c
 8009d62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009d66:	441d      	add	r5, r3
 8009d68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d6c:	2b20      	cmp	r3, #32
 8009d6e:	bfc1      	itttt	gt
 8009d70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d78:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d80:	bfda      	itte	le
 8009d82:	f1c3 0320 	rsble	r3, r3, #32
 8009d86:	fa06 f003 	lslle.w	r0, r6, r3
 8009d8a:	4318      	orrgt	r0, r3
 8009d8c:	f7f6 fbca 	bl	8000524 <__aeabi_ui2d>
 8009d90:	2301      	movs	r3, #1
 8009d92:	4606      	mov	r6, r0
 8009d94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d98:	3d01      	subs	r5, #1
 8009d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8009d9c:	e771      	b.n	8009c82 <_dtoa_r+0x11a>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e7b6      	b.n	8009d10 <_dtoa_r+0x1a8>
 8009da2:	900e      	str	r0, [sp, #56]	; 0x38
 8009da4:	e7b5      	b.n	8009d12 <_dtoa_r+0x1aa>
 8009da6:	f1ca 0300 	rsb	r3, sl, #0
 8009daa:	9306      	str	r3, [sp, #24]
 8009dac:	2300      	movs	r3, #0
 8009dae:	eba8 080a 	sub.w	r8, r8, sl
 8009db2:	930d      	str	r3, [sp, #52]	; 0x34
 8009db4:	e7c2      	b.n	8009d3c <_dtoa_r+0x1d4>
 8009db6:	2300      	movs	r3, #0
 8009db8:	9308      	str	r3, [sp, #32]
 8009dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dc39      	bgt.n	8009e34 <_dtoa_r+0x2cc>
 8009dc0:	f04f 0901 	mov.w	r9, #1
 8009dc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009dc8:	464b      	mov	r3, r9
 8009dca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	6042      	str	r2, [r0, #4]
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	f102 0614 	add.w	r6, r2, #20
 8009dda:	429e      	cmp	r6, r3
 8009ddc:	6841      	ldr	r1, [r0, #4]
 8009dde:	d92f      	bls.n	8009e40 <_dtoa_r+0x2d8>
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fcc7 	bl	800a774 <_Balloc>
 8009de6:	9000      	str	r0, [sp, #0]
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d14b      	bne.n	8009e84 <_dtoa_r+0x31c>
 8009dec:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <_dtoa_r+0x318>)
 8009dee:	4602      	mov	r2, r0
 8009df0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009df4:	e6d1      	b.n	8009b9a <_dtoa_r+0x32>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e7de      	b.n	8009db8 <_dtoa_r+0x250>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9308      	str	r3, [sp, #32]
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	eb0a 0903 	add.w	r9, sl, r3
 8009e04:	f109 0301 	add.w	r3, r9, #1
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	bfb8      	it	lt
 8009e0e:	2301      	movlt	r3, #1
 8009e10:	e7dd      	b.n	8009dce <_dtoa_r+0x266>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e7f2      	b.n	8009dfc <_dtoa_r+0x294>
 8009e16:	2501      	movs	r5, #1
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9305      	str	r3, [sp, #20]
 8009e1c:	9508      	str	r5, [sp, #32]
 8009e1e:	f04f 39ff 	mov.w	r9, #4294967295
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e28:	2312      	movs	r3, #18
 8009e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2c:	e7cf      	b.n	8009dce <_dtoa_r+0x266>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9308      	str	r3, [sp, #32]
 8009e32:	e7f4      	b.n	8009e1e <_dtoa_r+0x2b6>
 8009e34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	e7c6      	b.n	8009dce <_dtoa_r+0x266>
 8009e40:	3101      	adds	r1, #1
 8009e42:	6041      	str	r1, [r0, #4]
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	e7c6      	b.n	8009dd6 <_dtoa_r+0x26e>
 8009e48:	636f4361 	.word	0x636f4361
 8009e4c:	3fd287a7 	.word	0x3fd287a7
 8009e50:	8b60c8b3 	.word	0x8b60c8b3
 8009e54:	3fc68a28 	.word	0x3fc68a28
 8009e58:	509f79fb 	.word	0x509f79fb
 8009e5c:	3fd34413 	.word	0x3fd34413
 8009e60:	0800bf19 	.word	0x0800bf19
 8009e64:	0800bf30 	.word	0x0800bf30
 8009e68:	7ff00000 	.word	0x7ff00000
 8009e6c:	0800bf15 	.word	0x0800bf15
 8009e70:	0800bf0c 	.word	0x0800bf0c
 8009e74:	0800bee9 	.word	0x0800bee9
 8009e78:	3ff80000 	.word	0x3ff80000
 8009e7c:	0800c028 	.word	0x0800c028
 8009e80:	0800bf8f 	.word	0x0800bf8f
 8009e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e86:	9a00      	ldr	r2, [sp, #0]
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	2b0e      	cmp	r3, #14
 8009e8e:	f200 80ad 	bhi.w	8009fec <_dtoa_r+0x484>
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	f000 80aa 	beq.w	8009fec <_dtoa_r+0x484>
 8009e98:	f1ba 0f00 	cmp.w	sl, #0
 8009e9c:	dd36      	ble.n	8009f0c <_dtoa_r+0x3a4>
 8009e9e:	4ac3      	ldr	r2, [pc, #780]	; (800a1ac <_dtoa_r+0x644>)
 8009ea0:	f00a 030f 	and.w	r3, sl, #15
 8009ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ea8:	ed93 7b00 	vldr	d7, [r3]
 8009eac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009eb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009eb4:	eeb0 8a47 	vmov.f32	s16, s14
 8009eb8:	eef0 8a67 	vmov.f32	s17, s15
 8009ebc:	d016      	beq.n	8009eec <_dtoa_r+0x384>
 8009ebe:	4bbc      	ldr	r3, [pc, #752]	; (800a1b0 <_dtoa_r+0x648>)
 8009ec0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ec8:	f7f6 fcd0 	bl	800086c <__aeabi_ddiv>
 8009ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed0:	f007 070f 	and.w	r7, r7, #15
 8009ed4:	2503      	movs	r5, #3
 8009ed6:	4eb6      	ldr	r6, [pc, #728]	; (800a1b0 <_dtoa_r+0x648>)
 8009ed8:	b957      	cbnz	r7, 8009ef0 <_dtoa_r+0x388>
 8009eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ede:	ec53 2b18 	vmov	r2, r3, d8
 8009ee2:	f7f6 fcc3 	bl	800086c <__aeabi_ddiv>
 8009ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eea:	e029      	b.n	8009f40 <_dtoa_r+0x3d8>
 8009eec:	2502      	movs	r5, #2
 8009eee:	e7f2      	b.n	8009ed6 <_dtoa_r+0x36e>
 8009ef0:	07f9      	lsls	r1, r7, #31
 8009ef2:	d508      	bpl.n	8009f06 <_dtoa_r+0x39e>
 8009ef4:	ec51 0b18 	vmov	r0, r1, d8
 8009ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009efc:	f7f6 fb8c 	bl	8000618 <__aeabi_dmul>
 8009f00:	ec41 0b18 	vmov	d8, r0, r1
 8009f04:	3501      	adds	r5, #1
 8009f06:	107f      	asrs	r7, r7, #1
 8009f08:	3608      	adds	r6, #8
 8009f0a:	e7e5      	b.n	8009ed8 <_dtoa_r+0x370>
 8009f0c:	f000 80a6 	beq.w	800a05c <_dtoa_r+0x4f4>
 8009f10:	f1ca 0600 	rsb	r6, sl, #0
 8009f14:	4ba5      	ldr	r3, [pc, #660]	; (800a1ac <_dtoa_r+0x644>)
 8009f16:	4fa6      	ldr	r7, [pc, #664]	; (800a1b0 <_dtoa_r+0x648>)
 8009f18:	f006 020f 	and.w	r2, r6, #15
 8009f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f28:	f7f6 fb76 	bl	8000618 <__aeabi_dmul>
 8009f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f30:	1136      	asrs	r6, r6, #4
 8009f32:	2300      	movs	r3, #0
 8009f34:	2502      	movs	r5, #2
 8009f36:	2e00      	cmp	r6, #0
 8009f38:	f040 8085 	bne.w	800a046 <_dtoa_r+0x4de>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1d2      	bne.n	8009ee6 <_dtoa_r+0x37e>
 8009f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 808c 	beq.w	800a060 <_dtoa_r+0x4f8>
 8009f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f4c:	4b99      	ldr	r3, [pc, #612]	; (800a1b4 <_dtoa_r+0x64c>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fdd2 	bl	8000afc <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	f000 8081 	beq.w	800a060 <_dtoa_r+0x4f8>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d07d      	beq.n	800a060 <_dtoa_r+0x4f8>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	dd3c      	ble.n	8009fe4 <_dtoa_r+0x47c>
 8009f6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f6e:	9307      	str	r3, [sp, #28]
 8009f70:	2200      	movs	r2, #0
 8009f72:	4b91      	ldr	r3, [pc, #580]	; (800a1b8 <_dtoa_r+0x650>)
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 fb4e 	bl	8000618 <__aeabi_dmul>
 8009f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f80:	3501      	adds	r5, #1
 8009f82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009f86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7f6 fada 	bl	8000544 <__aeabi_i2d>
 8009f90:	4632      	mov	r2, r6
 8009f92:	463b      	mov	r3, r7
 8009f94:	f7f6 fb40 	bl	8000618 <__aeabi_dmul>
 8009f98:	4b88      	ldr	r3, [pc, #544]	; (800a1bc <_dtoa_r+0x654>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 f986 	bl	80002ac <__adddf3>
 8009fa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d15c      	bne.n	800a06a <_dtoa_r+0x502>
 8009fb0:	4b83      	ldr	r3, [pc, #524]	; (800a1c0 <_dtoa_r+0x658>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f7f6 f976 	bl	80002a8 <__aeabi_dsub>
 8009fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	460f      	mov	r7, r1
 8009fc4:	f7f6 fdb8 	bl	8000b38 <__aeabi_dcmpgt>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f040 8296 	bne.w	800a4fa <_dtoa_r+0x992>
 8009fce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 fd8f 	bl	8000afc <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f040 8288 	bne.w	800a4f4 <_dtoa_r+0x98c>
 8009fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f2c0 8158 	blt.w	800a2a4 <_dtoa_r+0x73c>
 8009ff4:	f1ba 0f0e 	cmp.w	sl, #14
 8009ff8:	f300 8154 	bgt.w	800a2a4 <_dtoa_r+0x73c>
 8009ffc:	4b6b      	ldr	r3, [pc, #428]	; (800a1ac <_dtoa_r+0x644>)
 8009ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a002:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f280 80e3 	bge.w	800a1d4 <_dtoa_r+0x66c>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	f300 80df 	bgt.w	800a1d4 <_dtoa_r+0x66c>
 800a016:	f040 826d 	bne.w	800a4f4 <_dtoa_r+0x98c>
 800a01a:	4b69      	ldr	r3, [pc, #420]	; (800a1c0 <_dtoa_r+0x658>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 faf9 	bl	8000618 <__aeabi_dmul>
 800a026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a02a:	f7f6 fd7b 	bl	8000b24 <__aeabi_dcmpge>
 800a02e:	9e01      	ldr	r6, [sp, #4]
 800a030:	4637      	mov	r7, r6
 800a032:	2800      	cmp	r0, #0
 800a034:	f040 8243 	bne.w	800a4be <_dtoa_r+0x956>
 800a038:	9d00      	ldr	r5, [sp, #0]
 800a03a:	2331      	movs	r3, #49	; 0x31
 800a03c:	f805 3b01 	strb.w	r3, [r5], #1
 800a040:	f10a 0a01 	add.w	sl, sl, #1
 800a044:	e23f      	b.n	800a4c6 <_dtoa_r+0x95e>
 800a046:	07f2      	lsls	r2, r6, #31
 800a048:	d505      	bpl.n	800a056 <_dtoa_r+0x4ee>
 800a04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04e:	f7f6 fae3 	bl	8000618 <__aeabi_dmul>
 800a052:	3501      	adds	r5, #1
 800a054:	2301      	movs	r3, #1
 800a056:	1076      	asrs	r6, r6, #1
 800a058:	3708      	adds	r7, #8
 800a05a:	e76c      	b.n	8009f36 <_dtoa_r+0x3ce>
 800a05c:	2502      	movs	r5, #2
 800a05e:	e76f      	b.n	8009f40 <_dtoa_r+0x3d8>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	f8cd a01c 	str.w	sl, [sp, #28]
 800a066:	930c      	str	r3, [sp, #48]	; 0x30
 800a068:	e78d      	b.n	8009f86 <_dtoa_r+0x41e>
 800a06a:	9900      	ldr	r1, [sp, #0]
 800a06c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a06e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a070:	4b4e      	ldr	r3, [pc, #312]	; (800a1ac <_dtoa_r+0x644>)
 800a072:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a076:	4401      	add	r1, r0
 800a078:	9102      	str	r1, [sp, #8]
 800a07a:	9908      	ldr	r1, [sp, #32]
 800a07c:	eeb0 8a47 	vmov.f32	s16, s14
 800a080:	eef0 8a67 	vmov.f32	s17, s15
 800a084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d045      	beq.n	800a11c <_dtoa_r+0x5b4>
 800a090:	494c      	ldr	r1, [pc, #304]	; (800a1c4 <_dtoa_r+0x65c>)
 800a092:	2000      	movs	r0, #0
 800a094:	f7f6 fbea 	bl	800086c <__aeabi_ddiv>
 800a098:	ec53 2b18 	vmov	r2, r3, d8
 800a09c:	f7f6 f904 	bl	80002a8 <__aeabi_dsub>
 800a0a0:	9d00      	ldr	r5, [sp, #0]
 800a0a2:	ec41 0b18 	vmov	d8, r0, r1
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f7f6 fd65 	bl	8000b78 <__aeabi_d2iz>
 800a0ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a0b0:	f7f6 fa48 	bl	8000544 <__aeabi_i2d>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 f8f4 	bl	80002a8 <__aeabi_dsub>
 800a0c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c2:	3330      	adds	r3, #48	; 0x30
 800a0c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a0c8:	ec53 2b18 	vmov	r2, r3, d8
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	f7f6 fd14 	bl	8000afc <__aeabi_dcmplt>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d165      	bne.n	800a1a4 <_dtoa_r+0x63c>
 800a0d8:	4632      	mov	r2, r6
 800a0da:	463b      	mov	r3, r7
 800a0dc:	4935      	ldr	r1, [pc, #212]	; (800a1b4 <_dtoa_r+0x64c>)
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f7f6 f8e2 	bl	80002a8 <__aeabi_dsub>
 800a0e4:	ec53 2b18 	vmov	r2, r3, d8
 800a0e8:	f7f6 fd08 	bl	8000afc <__aeabi_dcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f040 80b9 	bne.w	800a264 <_dtoa_r+0x6fc>
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	429d      	cmp	r5, r3
 800a0f6:	f43f af75 	beq.w	8009fe4 <_dtoa_r+0x47c>
 800a0fa:	4b2f      	ldr	r3, [pc, #188]	; (800a1b8 <_dtoa_r+0x650>)
 800a0fc:	ec51 0b18 	vmov	r0, r1, d8
 800a100:	2200      	movs	r2, #0
 800a102:	f7f6 fa89 	bl	8000618 <__aeabi_dmul>
 800a106:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <_dtoa_r+0x650>)
 800a108:	ec41 0b18 	vmov	d8, r0, r1
 800a10c:	2200      	movs	r2, #0
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 fa81 	bl	8000618 <__aeabi_dmul>
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	e7c4      	b.n	800a0a6 <_dtoa_r+0x53e>
 800a11c:	ec51 0b17 	vmov	r0, r1, d7
 800a120:	f7f6 fa7a 	bl	8000618 <__aeabi_dmul>
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	9d00      	ldr	r5, [sp, #0]
 800a128:	930c      	str	r3, [sp, #48]	; 0x30
 800a12a:	ec41 0b18 	vmov	d8, r0, r1
 800a12e:	4639      	mov	r1, r7
 800a130:	4630      	mov	r0, r6
 800a132:	f7f6 fd21 	bl	8000b78 <__aeabi_d2iz>
 800a136:	9011      	str	r0, [sp, #68]	; 0x44
 800a138:	f7f6 fa04 	bl	8000544 <__aeabi_i2d>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 f8b0 	bl	80002a8 <__aeabi_dsub>
 800a148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a14a:	3330      	adds	r3, #48	; 0x30
 800a14c:	f805 3b01 	strb.w	r3, [r5], #1
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	429d      	cmp	r5, r3
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	d134      	bne.n	800a1c8 <_dtoa_r+0x660>
 800a15e:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <_dtoa_r+0x65c>)
 800a160:	ec51 0b18 	vmov	r0, r1, d8
 800a164:	f7f6 f8a2 	bl	80002ac <__adddf3>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	f7f6 fce2 	bl	8000b38 <__aeabi_dcmpgt>
 800a174:	2800      	cmp	r0, #0
 800a176:	d175      	bne.n	800a264 <_dtoa_r+0x6fc>
 800a178:	ec53 2b18 	vmov	r2, r3, d8
 800a17c:	4911      	ldr	r1, [pc, #68]	; (800a1c4 <_dtoa_r+0x65c>)
 800a17e:	2000      	movs	r0, #0
 800a180:	f7f6 f892 	bl	80002a8 <__aeabi_dsub>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	f7f6 fcb6 	bl	8000afc <__aeabi_dcmplt>
 800a190:	2800      	cmp	r0, #0
 800a192:	f43f af27 	beq.w	8009fe4 <_dtoa_r+0x47c>
 800a196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a198:	1e6b      	subs	r3, r5, #1
 800a19a:	930c      	str	r3, [sp, #48]	; 0x30
 800a19c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1a0:	2b30      	cmp	r3, #48	; 0x30
 800a1a2:	d0f8      	beq.n	800a196 <_dtoa_r+0x62e>
 800a1a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1a8:	e04a      	b.n	800a240 <_dtoa_r+0x6d8>
 800a1aa:	bf00      	nop
 800a1ac:	0800c028 	.word	0x0800c028
 800a1b0:	0800c000 	.word	0x0800c000
 800a1b4:	3ff00000 	.word	0x3ff00000
 800a1b8:	40240000 	.word	0x40240000
 800a1bc:	401c0000 	.word	0x401c0000
 800a1c0:	40140000 	.word	0x40140000
 800a1c4:	3fe00000 	.word	0x3fe00000
 800a1c8:	4baf      	ldr	r3, [pc, #700]	; (800a488 <_dtoa_r+0x920>)
 800a1ca:	f7f6 fa25 	bl	8000618 <__aeabi_dmul>
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	e7ac      	b.n	800a12e <_dtoa_r+0x5c6>
 800a1d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1d8:	9d00      	ldr	r5, [sp, #0]
 800a1da:	4642      	mov	r2, r8
 800a1dc:	464b      	mov	r3, r9
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 fb43 	bl	800086c <__aeabi_ddiv>
 800a1e6:	f7f6 fcc7 	bl	8000b78 <__aeabi_d2iz>
 800a1ea:	9002      	str	r0, [sp, #8]
 800a1ec:	f7f6 f9aa 	bl	8000544 <__aeabi_i2d>
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 f852 	bl	80002a8 <__aeabi_dsub>
 800a204:	9e02      	ldr	r6, [sp, #8]
 800a206:	9f01      	ldr	r7, [sp, #4]
 800a208:	3630      	adds	r6, #48	; 0x30
 800a20a:	f805 6b01 	strb.w	r6, [r5], #1
 800a20e:	9e00      	ldr	r6, [sp, #0]
 800a210:	1bae      	subs	r6, r5, r6
 800a212:	42b7      	cmp	r7, r6
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	d137      	bne.n	800a28a <_dtoa_r+0x722>
 800a21a:	f7f6 f847 	bl	80002ac <__adddf3>
 800a21e:	4642      	mov	r2, r8
 800a220:	464b      	mov	r3, r9
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	f7f6 fc87 	bl	8000b38 <__aeabi_dcmpgt>
 800a22a:	b9c8      	cbnz	r0, 800a260 <_dtoa_r+0x6f8>
 800a22c:	4642      	mov	r2, r8
 800a22e:	464b      	mov	r3, r9
 800a230:	4630      	mov	r0, r6
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 800a238:	b110      	cbz	r0, 800a240 <_dtoa_r+0x6d8>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	07d9      	lsls	r1, r3, #31
 800a23e:	d40f      	bmi.n	800a260 <_dtoa_r+0x6f8>
 800a240:	4620      	mov	r0, r4
 800a242:	4659      	mov	r1, fp
 800a244:	f000 fad6 	bl	800a7f4 <_Bfree>
 800a248:	2300      	movs	r3, #0
 800a24a:	702b      	strb	r3, [r5, #0]
 800a24c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a24e:	f10a 0001 	add.w	r0, sl, #1
 800a252:	6018      	str	r0, [r3, #0]
 800a254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a256:	2b00      	cmp	r3, #0
 800a258:	f43f acd8 	beq.w	8009c0c <_dtoa_r+0xa4>
 800a25c:	601d      	str	r5, [r3, #0]
 800a25e:	e4d5      	b.n	8009c0c <_dtoa_r+0xa4>
 800a260:	f8cd a01c 	str.w	sl, [sp, #28]
 800a264:	462b      	mov	r3, r5
 800a266:	461d      	mov	r5, r3
 800a268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a26c:	2a39      	cmp	r2, #57	; 0x39
 800a26e:	d108      	bne.n	800a282 <_dtoa_r+0x71a>
 800a270:	9a00      	ldr	r2, [sp, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d1f7      	bne.n	800a266 <_dtoa_r+0x6fe>
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	9900      	ldr	r1, [sp, #0]
 800a27a:	3201      	adds	r2, #1
 800a27c:	9207      	str	r2, [sp, #28]
 800a27e:	2230      	movs	r2, #48	; 0x30
 800a280:	700a      	strb	r2, [r1, #0]
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	3201      	adds	r2, #1
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e78c      	b.n	800a1a4 <_dtoa_r+0x63c>
 800a28a:	4b7f      	ldr	r3, [pc, #508]	; (800a488 <_dtoa_r+0x920>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	f7f6 f9c3 	bl	8000618 <__aeabi_dmul>
 800a292:	2200      	movs	r2, #0
 800a294:	2300      	movs	r3, #0
 800a296:	4606      	mov	r6, r0
 800a298:	460f      	mov	r7, r1
 800a29a:	f7f6 fc25 	bl	8000ae8 <__aeabi_dcmpeq>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d09b      	beq.n	800a1da <_dtoa_r+0x672>
 800a2a2:	e7cd      	b.n	800a240 <_dtoa_r+0x6d8>
 800a2a4:	9a08      	ldr	r2, [sp, #32]
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	f000 80c4 	beq.w	800a434 <_dtoa_r+0x8cc>
 800a2ac:	9a05      	ldr	r2, [sp, #20]
 800a2ae:	2a01      	cmp	r2, #1
 800a2b0:	f300 80a8 	bgt.w	800a404 <_dtoa_r+0x89c>
 800a2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	f000 80a0 	beq.w	800a3fc <_dtoa_r+0x894>
 800a2bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2c0:	9e06      	ldr	r6, [sp, #24]
 800a2c2:	4645      	mov	r5, r8
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	441a      	add	r2, r3
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4498      	add	r8, r3
 800a2ce:	9204      	str	r2, [sp, #16]
 800a2d0:	f000 fb4c 	bl	800a96c <__i2b>
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	dd0b      	ble.n	800a2f2 <_dtoa_r+0x78a>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dd08      	ble.n	800a2f2 <_dtoa_r+0x78a>
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	9a04      	ldr	r2, [sp, #16]
 800a2e4:	bfa8      	it	ge
 800a2e6:	462b      	movge	r3, r5
 800a2e8:	eba8 0803 	sub.w	r8, r8, r3
 800a2ec:	1aed      	subs	r5, r5, r3
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	9304      	str	r3, [sp, #16]
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	b1fb      	cbz	r3, 800a336 <_dtoa_r+0x7ce>
 800a2f6:	9b08      	ldr	r3, [sp, #32]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 809f 	beq.w	800a43c <_dtoa_r+0x8d4>
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	dd11      	ble.n	800a326 <_dtoa_r+0x7be>
 800a302:	4639      	mov	r1, r7
 800a304:	4632      	mov	r2, r6
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fbec 	bl	800aae4 <__pow5mult>
 800a30c:	465a      	mov	r2, fp
 800a30e:	4601      	mov	r1, r0
 800a310:	4607      	mov	r7, r0
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fb40 	bl	800a998 <__multiply>
 800a318:	4659      	mov	r1, fp
 800a31a:	9007      	str	r0, [sp, #28]
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fa69 	bl	800a7f4 <_Bfree>
 800a322:	9b07      	ldr	r3, [sp, #28]
 800a324:	469b      	mov	fp, r3
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	1b9a      	subs	r2, r3, r6
 800a32a:	d004      	beq.n	800a336 <_dtoa_r+0x7ce>
 800a32c:	4659      	mov	r1, fp
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 fbd8 	bl	800aae4 <__pow5mult>
 800a334:	4683      	mov	fp, r0
 800a336:	2101      	movs	r1, #1
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fb17 	bl	800a96c <__i2b>
 800a33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a340:	2b00      	cmp	r3, #0
 800a342:	4606      	mov	r6, r0
 800a344:	dd7c      	ble.n	800a440 <_dtoa_r+0x8d8>
 800a346:	461a      	mov	r2, r3
 800a348:	4601      	mov	r1, r0
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fbca 	bl	800aae4 <__pow5mult>
 800a350:	9b05      	ldr	r3, [sp, #20]
 800a352:	2b01      	cmp	r3, #1
 800a354:	4606      	mov	r6, r0
 800a356:	dd76      	ble.n	800a446 <_dtoa_r+0x8de>
 800a358:	2300      	movs	r3, #0
 800a35a:	9306      	str	r3, [sp, #24]
 800a35c:	6933      	ldr	r3, [r6, #16]
 800a35e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a362:	6918      	ldr	r0, [r3, #16]
 800a364:	f000 fab2 	bl	800a8cc <__hi0bits>
 800a368:	f1c0 0020 	rsb	r0, r0, #32
 800a36c:	9b04      	ldr	r3, [sp, #16]
 800a36e:	4418      	add	r0, r3
 800a370:	f010 001f 	ands.w	r0, r0, #31
 800a374:	f000 8086 	beq.w	800a484 <_dtoa_r+0x91c>
 800a378:	f1c0 0320 	rsb	r3, r0, #32
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	dd7f      	ble.n	800a480 <_dtoa_r+0x918>
 800a380:	f1c0 001c 	rsb	r0, r0, #28
 800a384:	9b04      	ldr	r3, [sp, #16]
 800a386:	4403      	add	r3, r0
 800a388:	4480      	add	r8, r0
 800a38a:	4405      	add	r5, r0
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	f1b8 0f00 	cmp.w	r8, #0
 800a392:	dd05      	ble.n	800a3a0 <_dtoa_r+0x838>
 800a394:	4659      	mov	r1, fp
 800a396:	4642      	mov	r2, r8
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fbfd 	bl	800ab98 <__lshift>
 800a39e:	4683      	mov	fp, r0
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dd05      	ble.n	800a3b2 <_dtoa_r+0x84a>
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fbf4 	bl	800ab98 <__lshift>
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d069      	beq.n	800a48c <_dtoa_r+0x924>
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4658      	mov	r0, fp
 800a3bc:	f000 fc58 	bl	800ac70 <__mcmp>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	da63      	bge.n	800a48c <_dtoa_r+0x924>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	220a      	movs	r2, #10
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fa34 	bl	800a838 <__multadd>
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3d6:	4683      	mov	fp, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 818f 	beq.w	800a6fc <_dtoa_r+0xb94>
 800a3de:	4639      	mov	r1, r7
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	220a      	movs	r2, #10
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 fa27 	bl	800a838 <__multadd>
 800a3ea:	f1b9 0f00 	cmp.w	r9, #0
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	f300 808e 	bgt.w	800a510 <_dtoa_r+0x9a8>
 800a3f4:	9b05      	ldr	r3, [sp, #20]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	dc50      	bgt.n	800a49c <_dtoa_r+0x934>
 800a3fa:	e089      	b.n	800a510 <_dtoa_r+0x9a8>
 800a3fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a402:	e75d      	b.n	800a2c0 <_dtoa_r+0x758>
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	1e5e      	subs	r6, r3, #1
 800a408:	9b06      	ldr	r3, [sp, #24]
 800a40a:	42b3      	cmp	r3, r6
 800a40c:	bfbf      	itttt	lt
 800a40e:	9b06      	ldrlt	r3, [sp, #24]
 800a410:	9606      	strlt	r6, [sp, #24]
 800a412:	1af2      	sublt	r2, r6, r3
 800a414:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a416:	bfb6      	itet	lt
 800a418:	189b      	addlt	r3, r3, r2
 800a41a:	1b9e      	subge	r6, r3, r6
 800a41c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	bfb8      	it	lt
 800a422:	2600      	movlt	r6, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfb5      	itete	lt
 800a428:	eba8 0503 	sublt.w	r5, r8, r3
 800a42c:	9b01      	ldrge	r3, [sp, #4]
 800a42e:	2300      	movlt	r3, #0
 800a430:	4645      	movge	r5, r8
 800a432:	e747      	b.n	800a2c4 <_dtoa_r+0x75c>
 800a434:	9e06      	ldr	r6, [sp, #24]
 800a436:	9f08      	ldr	r7, [sp, #32]
 800a438:	4645      	mov	r5, r8
 800a43a:	e74c      	b.n	800a2d6 <_dtoa_r+0x76e>
 800a43c:	9a06      	ldr	r2, [sp, #24]
 800a43e:	e775      	b.n	800a32c <_dtoa_r+0x7c4>
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	2b01      	cmp	r3, #1
 800a444:	dc18      	bgt.n	800a478 <_dtoa_r+0x910>
 800a446:	9b02      	ldr	r3, [sp, #8]
 800a448:	b9b3      	cbnz	r3, 800a478 <_dtoa_r+0x910>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a450:	b9a3      	cbnz	r3, 800a47c <_dtoa_r+0x914>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	051b      	lsls	r3, r3, #20
 800a45c:	b12b      	cbz	r3, 800a46a <_dtoa_r+0x902>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	3301      	adds	r3, #1
 800a462:	9304      	str	r3, [sp, #16]
 800a464:	f108 0801 	add.w	r8, r8, #1
 800a468:	2301      	movs	r3, #1
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f47f af74 	bne.w	800a35c <_dtoa_r+0x7f4>
 800a474:	2001      	movs	r0, #1
 800a476:	e779      	b.n	800a36c <_dtoa_r+0x804>
 800a478:	2300      	movs	r3, #0
 800a47a:	e7f6      	b.n	800a46a <_dtoa_r+0x902>
 800a47c:	9b02      	ldr	r3, [sp, #8]
 800a47e:	e7f4      	b.n	800a46a <_dtoa_r+0x902>
 800a480:	d085      	beq.n	800a38e <_dtoa_r+0x826>
 800a482:	4618      	mov	r0, r3
 800a484:	301c      	adds	r0, #28
 800a486:	e77d      	b.n	800a384 <_dtoa_r+0x81c>
 800a488:	40240000 	.word	0x40240000
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dc38      	bgt.n	800a504 <_dtoa_r+0x99c>
 800a492:	9b05      	ldr	r3, [sp, #20]
 800a494:	2b02      	cmp	r3, #2
 800a496:	dd35      	ble.n	800a504 <_dtoa_r+0x99c>
 800a498:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	d10d      	bne.n	800a4be <_dtoa_r+0x956>
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	464b      	mov	r3, r9
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 f9c5 	bl	800a838 <__multadd>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	4658      	mov	r0, fp
 800a4b4:	f000 fbdc 	bl	800ac70 <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f73f adbd 	bgt.w	800a038 <_dtoa_r+0x4d0>
 800a4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c0:	9d00      	ldr	r5, [sp, #0]
 800a4c2:	ea6f 0a03 	mvn.w	sl, r3
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f000 f991 	bl	800a7f4 <_Bfree>
 800a4d2:	2f00      	cmp	r7, #0
 800a4d4:	f43f aeb4 	beq.w	800a240 <_dtoa_r+0x6d8>
 800a4d8:	f1b8 0f00 	cmp.w	r8, #0
 800a4dc:	d005      	beq.n	800a4ea <_dtoa_r+0x982>
 800a4de:	45b8      	cmp	r8, r7
 800a4e0:	d003      	beq.n	800a4ea <_dtoa_r+0x982>
 800a4e2:	4641      	mov	r1, r8
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 f985 	bl	800a7f4 <_Bfree>
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 f981 	bl	800a7f4 <_Bfree>
 800a4f2:	e6a5      	b.n	800a240 <_dtoa_r+0x6d8>
 800a4f4:	2600      	movs	r6, #0
 800a4f6:	4637      	mov	r7, r6
 800a4f8:	e7e1      	b.n	800a4be <_dtoa_r+0x956>
 800a4fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a4fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a500:	4637      	mov	r7, r6
 800a502:	e599      	b.n	800a038 <_dtoa_r+0x4d0>
 800a504:	9b08      	ldr	r3, [sp, #32]
 800a506:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 80fd 	beq.w	800a70a <_dtoa_r+0xba2>
 800a510:	2d00      	cmp	r5, #0
 800a512:	dd05      	ble.n	800a520 <_dtoa_r+0x9b8>
 800a514:	4639      	mov	r1, r7
 800a516:	462a      	mov	r2, r5
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 fb3d 	bl	800ab98 <__lshift>
 800a51e:	4607      	mov	r7, r0
 800a520:	9b06      	ldr	r3, [sp, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d05c      	beq.n	800a5e0 <_dtoa_r+0xa78>
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 f923 	bl	800a774 <_Balloc>
 800a52e:	4605      	mov	r5, r0
 800a530:	b928      	cbnz	r0, 800a53e <_dtoa_r+0x9d6>
 800a532:	4b80      	ldr	r3, [pc, #512]	; (800a734 <_dtoa_r+0xbcc>)
 800a534:	4602      	mov	r2, r0
 800a536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a53a:	f7ff bb2e 	b.w	8009b9a <_dtoa_r+0x32>
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	3202      	adds	r2, #2
 800a542:	0092      	lsls	r2, r2, #2
 800a544:	f107 010c 	add.w	r1, r7, #12
 800a548:	300c      	adds	r0, #12
 800a54a:	f000 f905 	bl	800a758 <memcpy>
 800a54e:	2201      	movs	r2, #1
 800a550:	4629      	mov	r1, r5
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fb20 	bl	800ab98 <__lshift>
 800a558:	9b00      	ldr	r3, [sp, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	444b      	add	r3, r9
 800a562:	9307      	str	r3, [sp, #28]
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	46b8      	mov	r8, r7
 800a56c:	9306      	str	r3, [sp, #24]
 800a56e:	4607      	mov	r7, r0
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	4631      	mov	r1, r6
 800a574:	3b01      	subs	r3, #1
 800a576:	4658      	mov	r0, fp
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	f7ff fa69 	bl	8009a50 <quorem>
 800a57e:	4603      	mov	r3, r0
 800a580:	3330      	adds	r3, #48	; 0x30
 800a582:	9004      	str	r0, [sp, #16]
 800a584:	4641      	mov	r1, r8
 800a586:	4658      	mov	r0, fp
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	f000 fb71 	bl	800ac70 <__mcmp>
 800a58e:	463a      	mov	r2, r7
 800a590:	4681      	mov	r9, r0
 800a592:	4631      	mov	r1, r6
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fb87 	bl	800aca8 <__mdiff>
 800a59a:	68c2      	ldr	r2, [r0, #12]
 800a59c:	9b08      	ldr	r3, [sp, #32]
 800a59e:	4605      	mov	r5, r0
 800a5a0:	bb02      	cbnz	r2, 800a5e4 <_dtoa_r+0xa7c>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	f000 fb63 	bl	800ac70 <__mcmp>
 800a5aa:	9b08      	ldr	r3, [sp, #32]
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a5b6:	f000 f91d 	bl	800a7f4 <_Bfree>
 800a5ba:	9b05      	ldr	r3, [sp, #20]
 800a5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5be:	9d01      	ldr	r5, [sp, #4]
 800a5c0:	ea43 0102 	orr.w	r1, r3, r2
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	d10d      	bne.n	800a5e8 <_dtoa_r+0xa80>
 800a5cc:	2b39      	cmp	r3, #57	; 0x39
 800a5ce:	d029      	beq.n	800a624 <_dtoa_r+0xabc>
 800a5d0:	f1b9 0f00 	cmp.w	r9, #0
 800a5d4:	dd01      	ble.n	800a5da <_dtoa_r+0xa72>
 800a5d6:	9b04      	ldr	r3, [sp, #16]
 800a5d8:	3331      	adds	r3, #49	; 0x31
 800a5da:	9a02      	ldr	r2, [sp, #8]
 800a5dc:	7013      	strb	r3, [r2, #0]
 800a5de:	e774      	b.n	800a4ca <_dtoa_r+0x962>
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	e7b9      	b.n	800a558 <_dtoa_r+0x9f0>
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	e7e2      	b.n	800a5ae <_dtoa_r+0xa46>
 800a5e8:	f1b9 0f00 	cmp.w	r9, #0
 800a5ec:	db06      	blt.n	800a5fc <_dtoa_r+0xa94>
 800a5ee:	9905      	ldr	r1, [sp, #20]
 800a5f0:	ea41 0909 	orr.w	r9, r1, r9
 800a5f4:	9906      	ldr	r1, [sp, #24]
 800a5f6:	ea59 0101 	orrs.w	r1, r9, r1
 800a5fa:	d120      	bne.n	800a63e <_dtoa_r+0xad6>
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	ddec      	ble.n	800a5da <_dtoa_r+0xa72>
 800a600:	4659      	mov	r1, fp
 800a602:	2201      	movs	r2, #1
 800a604:	4620      	mov	r0, r4
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	f000 fac6 	bl	800ab98 <__lshift>
 800a60c:	4631      	mov	r1, r6
 800a60e:	4683      	mov	fp, r0
 800a610:	f000 fb2e 	bl	800ac70 <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	dc02      	bgt.n	800a620 <_dtoa_r+0xab8>
 800a61a:	d1de      	bne.n	800a5da <_dtoa_r+0xa72>
 800a61c:	07da      	lsls	r2, r3, #31
 800a61e:	d5dc      	bpl.n	800a5da <_dtoa_r+0xa72>
 800a620:	2b39      	cmp	r3, #57	; 0x39
 800a622:	d1d8      	bne.n	800a5d6 <_dtoa_r+0xa6e>
 800a624:	9a02      	ldr	r2, [sp, #8]
 800a626:	2339      	movs	r3, #57	; 0x39
 800a628:	7013      	strb	r3, [r2, #0]
 800a62a:	462b      	mov	r3, r5
 800a62c:	461d      	mov	r5, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a634:	2a39      	cmp	r2, #57	; 0x39
 800a636:	d050      	beq.n	800a6da <_dtoa_r+0xb72>
 800a638:	3201      	adds	r2, #1
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e745      	b.n	800a4ca <_dtoa_r+0x962>
 800a63e:	2a00      	cmp	r2, #0
 800a640:	dd03      	ble.n	800a64a <_dtoa_r+0xae2>
 800a642:	2b39      	cmp	r3, #57	; 0x39
 800a644:	d0ee      	beq.n	800a624 <_dtoa_r+0xabc>
 800a646:	3301      	adds	r3, #1
 800a648:	e7c7      	b.n	800a5da <_dtoa_r+0xa72>
 800a64a:	9a01      	ldr	r2, [sp, #4]
 800a64c:	9907      	ldr	r1, [sp, #28]
 800a64e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a652:	428a      	cmp	r2, r1
 800a654:	d02a      	beq.n	800a6ac <_dtoa_r+0xb44>
 800a656:	4659      	mov	r1, fp
 800a658:	2300      	movs	r3, #0
 800a65a:	220a      	movs	r2, #10
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 f8eb 	bl	800a838 <__multadd>
 800a662:	45b8      	cmp	r8, r7
 800a664:	4683      	mov	fp, r0
 800a666:	f04f 0300 	mov.w	r3, #0
 800a66a:	f04f 020a 	mov.w	r2, #10
 800a66e:	4641      	mov	r1, r8
 800a670:	4620      	mov	r0, r4
 800a672:	d107      	bne.n	800a684 <_dtoa_r+0xb1c>
 800a674:	f000 f8e0 	bl	800a838 <__multadd>
 800a678:	4680      	mov	r8, r0
 800a67a:	4607      	mov	r7, r0
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	3301      	adds	r3, #1
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	e775      	b.n	800a570 <_dtoa_r+0xa08>
 800a684:	f000 f8d8 	bl	800a838 <__multadd>
 800a688:	4639      	mov	r1, r7
 800a68a:	4680      	mov	r8, r0
 800a68c:	2300      	movs	r3, #0
 800a68e:	220a      	movs	r2, #10
 800a690:	4620      	mov	r0, r4
 800a692:	f000 f8d1 	bl	800a838 <__multadd>
 800a696:	4607      	mov	r7, r0
 800a698:	e7f0      	b.n	800a67c <_dtoa_r+0xb14>
 800a69a:	f1b9 0f00 	cmp.w	r9, #0
 800a69e:	9a00      	ldr	r2, [sp, #0]
 800a6a0:	bfcc      	ite	gt
 800a6a2:	464d      	movgt	r5, r9
 800a6a4:	2501      	movle	r5, #1
 800a6a6:	4415      	add	r5, r2
 800a6a8:	f04f 0800 	mov.w	r8, #0
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	f000 fa70 	bl	800ab98 <__lshift>
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4683      	mov	fp, r0
 800a6bc:	f000 fad8 	bl	800ac70 <__mcmp>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dcb2      	bgt.n	800a62a <_dtoa_r+0xac2>
 800a6c4:	d102      	bne.n	800a6cc <_dtoa_r+0xb64>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	07db      	lsls	r3, r3, #31
 800a6ca:	d4ae      	bmi.n	800a62a <_dtoa_r+0xac2>
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6d4:	2a30      	cmp	r2, #48	; 0x30
 800a6d6:	d0fa      	beq.n	800a6ce <_dtoa_r+0xb66>
 800a6d8:	e6f7      	b.n	800a4ca <_dtoa_r+0x962>
 800a6da:	9a00      	ldr	r2, [sp, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d1a5      	bne.n	800a62c <_dtoa_r+0xac4>
 800a6e0:	f10a 0a01 	add.w	sl, sl, #1
 800a6e4:	2331      	movs	r3, #49	; 0x31
 800a6e6:	e779      	b.n	800a5dc <_dtoa_r+0xa74>
 800a6e8:	4b13      	ldr	r3, [pc, #76]	; (800a738 <_dtoa_r+0xbd0>)
 800a6ea:	f7ff baaf 	b.w	8009c4c <_dtoa_r+0xe4>
 800a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f47f aa86 	bne.w	8009c02 <_dtoa_r+0x9a>
 800a6f6:	4b11      	ldr	r3, [pc, #68]	; (800a73c <_dtoa_r+0xbd4>)
 800a6f8:	f7ff baa8 	b.w	8009c4c <_dtoa_r+0xe4>
 800a6fc:	f1b9 0f00 	cmp.w	r9, #0
 800a700:	dc03      	bgt.n	800a70a <_dtoa_r+0xba2>
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	2b02      	cmp	r3, #2
 800a706:	f73f aec9 	bgt.w	800a49c <_dtoa_r+0x934>
 800a70a:	9d00      	ldr	r5, [sp, #0]
 800a70c:	4631      	mov	r1, r6
 800a70e:	4658      	mov	r0, fp
 800a710:	f7ff f99e 	bl	8009a50 <quorem>
 800a714:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a718:	f805 3b01 	strb.w	r3, [r5], #1
 800a71c:	9a00      	ldr	r2, [sp, #0]
 800a71e:	1aaa      	subs	r2, r5, r2
 800a720:	4591      	cmp	r9, r2
 800a722:	ddba      	ble.n	800a69a <_dtoa_r+0xb32>
 800a724:	4659      	mov	r1, fp
 800a726:	2300      	movs	r3, #0
 800a728:	220a      	movs	r2, #10
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f884 	bl	800a838 <__multadd>
 800a730:	4683      	mov	fp, r0
 800a732:	e7eb      	b.n	800a70c <_dtoa_r+0xba4>
 800a734:	0800bf8f 	.word	0x0800bf8f
 800a738:	0800bee8 	.word	0x0800bee8
 800a73c:	0800bf0c 	.word	0x0800bf0c

0800a740 <_localeconv_r>:
 800a740:	4800      	ldr	r0, [pc, #0]	; (800a744 <_localeconv_r+0x4>)
 800a742:	4770      	bx	lr
 800a744:	20000214 	.word	0x20000214

0800a748 <malloc>:
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <malloc+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f000 bbef 	b.w	800af30 <_malloc_r>
 800a752:	bf00      	nop
 800a754:	200000c0 	.word	0x200000c0

0800a758 <memcpy>:
 800a758:	440a      	add	r2, r1
 800a75a:	4291      	cmp	r1, r2
 800a75c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a760:	d100      	bne.n	800a764 <memcpy+0xc>
 800a762:	4770      	bx	lr
 800a764:	b510      	push	{r4, lr}
 800a766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a76e:	4291      	cmp	r1, r2
 800a770:	d1f9      	bne.n	800a766 <memcpy+0xe>
 800a772:	bd10      	pop	{r4, pc}

0800a774 <_Balloc>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	b976      	cbnz	r6, 800a79c <_Balloc+0x28>
 800a77e:	2010      	movs	r0, #16
 800a780:	f7ff ffe2 	bl	800a748 <malloc>
 800a784:	4602      	mov	r2, r0
 800a786:	6260      	str	r0, [r4, #36]	; 0x24
 800a788:	b920      	cbnz	r0, 800a794 <_Balloc+0x20>
 800a78a:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <_Balloc+0x78>)
 800a78c:	4818      	ldr	r0, [pc, #96]	; (800a7f0 <_Balloc+0x7c>)
 800a78e:	2166      	movs	r1, #102	; 0x66
 800a790:	f000 fd94 	bl	800b2bc <__assert_func>
 800a794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a798:	6006      	str	r6, [r0, #0]
 800a79a:	60c6      	str	r6, [r0, #12]
 800a79c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a79e:	68f3      	ldr	r3, [r6, #12]
 800a7a0:	b183      	cbz	r3, 800a7c4 <_Balloc+0x50>
 800a7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7aa:	b9b8      	cbnz	r0, 800a7dc <_Balloc+0x68>
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a7b2:	1d72      	adds	r2, r6, #5
 800a7b4:	0092      	lsls	r2, r2, #2
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fb5a 	bl	800ae70 <_calloc_r>
 800a7bc:	b160      	cbz	r0, 800a7d8 <_Balloc+0x64>
 800a7be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7c2:	e00e      	b.n	800a7e2 <_Balloc+0x6e>
 800a7c4:	2221      	movs	r2, #33	; 0x21
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fb51 	bl	800ae70 <_calloc_r>
 800a7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d0:	60f0      	str	r0, [r6, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e4      	bne.n	800a7a2 <_Balloc+0x2e>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	6802      	ldr	r2, [r0, #0]
 800a7de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e8:	e7f7      	b.n	800a7da <_Balloc+0x66>
 800a7ea:	bf00      	nop
 800a7ec:	0800bf19 	.word	0x0800bf19
 800a7f0:	0800bfa0 	.word	0x0800bfa0

0800a7f4 <_Bfree>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b976      	cbnz	r6, 800a81c <_Bfree+0x28>
 800a7fe:	2010      	movs	r0, #16
 800a800:	f7ff ffa2 	bl	800a748 <malloc>
 800a804:	4602      	mov	r2, r0
 800a806:	6268      	str	r0, [r5, #36]	; 0x24
 800a808:	b920      	cbnz	r0, 800a814 <_Bfree+0x20>
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <_Bfree+0x3c>)
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <_Bfree+0x40>)
 800a80e:	218a      	movs	r1, #138	; 0x8a
 800a810:	f000 fd54 	bl	800b2bc <__assert_func>
 800a814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a818:	6006      	str	r6, [r0, #0]
 800a81a:	60c6      	str	r6, [r0, #12]
 800a81c:	b13c      	cbz	r4, 800a82e <_Bfree+0x3a>
 800a81e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a820:	6862      	ldr	r2, [r4, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a828:	6021      	str	r1, [r4, #0]
 800a82a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	0800bf19 	.word	0x0800bf19
 800a834:	0800bfa0 	.word	0x0800bfa0

0800a838 <__multadd>:
 800a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	690e      	ldr	r6, [r1, #16]
 800a83e:	4607      	mov	r7, r0
 800a840:	4698      	mov	r8, r3
 800a842:	460c      	mov	r4, r1
 800a844:	f101 0014 	add.w	r0, r1, #20
 800a848:	2300      	movs	r3, #0
 800a84a:	6805      	ldr	r5, [r0, #0]
 800a84c:	b2a9      	uxth	r1, r5
 800a84e:	fb02 8101 	mla	r1, r2, r1, r8
 800a852:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a856:	0c2d      	lsrs	r5, r5, #16
 800a858:	fb02 c505 	mla	r5, r2, r5, ip
 800a85c:	b289      	uxth	r1, r1
 800a85e:	3301      	adds	r3, #1
 800a860:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a864:	429e      	cmp	r6, r3
 800a866:	f840 1b04 	str.w	r1, [r0], #4
 800a86a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a86e:	dcec      	bgt.n	800a84a <__multadd+0x12>
 800a870:	f1b8 0f00 	cmp.w	r8, #0
 800a874:	d022      	beq.n	800a8bc <__multadd+0x84>
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	42b3      	cmp	r3, r6
 800a87a:	dc19      	bgt.n	800a8b0 <__multadd+0x78>
 800a87c:	6861      	ldr	r1, [r4, #4]
 800a87e:	4638      	mov	r0, r7
 800a880:	3101      	adds	r1, #1
 800a882:	f7ff ff77 	bl	800a774 <_Balloc>
 800a886:	4605      	mov	r5, r0
 800a888:	b928      	cbnz	r0, 800a896 <__multadd+0x5e>
 800a88a:	4602      	mov	r2, r0
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <__multadd+0x8c>)
 800a88e:	480e      	ldr	r0, [pc, #56]	; (800a8c8 <__multadd+0x90>)
 800a890:	21b5      	movs	r1, #181	; 0xb5
 800a892:	f000 fd13 	bl	800b2bc <__assert_func>
 800a896:	6922      	ldr	r2, [r4, #16]
 800a898:	3202      	adds	r2, #2
 800a89a:	f104 010c 	add.w	r1, r4, #12
 800a89e:	0092      	lsls	r2, r2, #2
 800a8a0:	300c      	adds	r0, #12
 800a8a2:	f7ff ff59 	bl	800a758 <memcpy>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ffa3 	bl	800a7f4 <_Bfree>
 800a8ae:	462c      	mov	r4, r5
 800a8b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	f8c3 8014 	str.w	r8, [r3, #20]
 800a8ba:	6126      	str	r6, [r4, #16]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800bf8f 	.word	0x0800bf8f
 800a8c8:	0800bfa0 	.word	0x0800bfa0

0800a8cc <__hi0bits>:
 800a8cc:	0c03      	lsrs	r3, r0, #16
 800a8ce:	041b      	lsls	r3, r3, #16
 800a8d0:	b9d3      	cbnz	r3, 800a908 <__hi0bits+0x3c>
 800a8d2:	0400      	lsls	r0, r0, #16
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8da:	bf04      	itt	eq
 800a8dc:	0200      	lsleq	r0, r0, #8
 800a8de:	3308      	addeq	r3, #8
 800a8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8e4:	bf04      	itt	eq
 800a8e6:	0100      	lsleq	r0, r0, #4
 800a8e8:	3304      	addeq	r3, #4
 800a8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ee:	bf04      	itt	eq
 800a8f0:	0080      	lsleq	r0, r0, #2
 800a8f2:	3302      	addeq	r3, #2
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	db05      	blt.n	800a904 <__hi0bits+0x38>
 800a8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8fc:	f103 0301 	add.w	r3, r3, #1
 800a900:	bf08      	it	eq
 800a902:	2320      	moveq	r3, #32
 800a904:	4618      	mov	r0, r3
 800a906:	4770      	bx	lr
 800a908:	2300      	movs	r3, #0
 800a90a:	e7e4      	b.n	800a8d6 <__hi0bits+0xa>

0800a90c <__lo0bits>:
 800a90c:	6803      	ldr	r3, [r0, #0]
 800a90e:	f013 0207 	ands.w	r2, r3, #7
 800a912:	4601      	mov	r1, r0
 800a914:	d00b      	beq.n	800a92e <__lo0bits+0x22>
 800a916:	07da      	lsls	r2, r3, #31
 800a918:	d424      	bmi.n	800a964 <__lo0bits+0x58>
 800a91a:	0798      	lsls	r0, r3, #30
 800a91c:	bf49      	itett	mi
 800a91e:	085b      	lsrmi	r3, r3, #1
 800a920:	089b      	lsrpl	r3, r3, #2
 800a922:	2001      	movmi	r0, #1
 800a924:	600b      	strmi	r3, [r1, #0]
 800a926:	bf5c      	itt	pl
 800a928:	600b      	strpl	r3, [r1, #0]
 800a92a:	2002      	movpl	r0, #2
 800a92c:	4770      	bx	lr
 800a92e:	b298      	uxth	r0, r3
 800a930:	b9b0      	cbnz	r0, 800a960 <__lo0bits+0x54>
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	2010      	movs	r0, #16
 800a936:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a93a:	bf04      	itt	eq
 800a93c:	0a1b      	lsreq	r3, r3, #8
 800a93e:	3008      	addeq	r0, #8
 800a940:	071a      	lsls	r2, r3, #28
 800a942:	bf04      	itt	eq
 800a944:	091b      	lsreq	r3, r3, #4
 800a946:	3004      	addeq	r0, #4
 800a948:	079a      	lsls	r2, r3, #30
 800a94a:	bf04      	itt	eq
 800a94c:	089b      	lsreq	r3, r3, #2
 800a94e:	3002      	addeq	r0, #2
 800a950:	07da      	lsls	r2, r3, #31
 800a952:	d403      	bmi.n	800a95c <__lo0bits+0x50>
 800a954:	085b      	lsrs	r3, r3, #1
 800a956:	f100 0001 	add.w	r0, r0, #1
 800a95a:	d005      	beq.n	800a968 <__lo0bits+0x5c>
 800a95c:	600b      	str	r3, [r1, #0]
 800a95e:	4770      	bx	lr
 800a960:	4610      	mov	r0, r2
 800a962:	e7e8      	b.n	800a936 <__lo0bits+0x2a>
 800a964:	2000      	movs	r0, #0
 800a966:	4770      	bx	lr
 800a968:	2020      	movs	r0, #32
 800a96a:	4770      	bx	lr

0800a96c <__i2b>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	460c      	mov	r4, r1
 800a970:	2101      	movs	r1, #1
 800a972:	f7ff feff 	bl	800a774 <_Balloc>
 800a976:	4602      	mov	r2, r0
 800a978:	b928      	cbnz	r0, 800a986 <__i2b+0x1a>
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <__i2b+0x24>)
 800a97c:	4805      	ldr	r0, [pc, #20]	; (800a994 <__i2b+0x28>)
 800a97e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a982:	f000 fc9b 	bl	800b2bc <__assert_func>
 800a986:	2301      	movs	r3, #1
 800a988:	6144      	str	r4, [r0, #20]
 800a98a:	6103      	str	r3, [r0, #16]
 800a98c:	bd10      	pop	{r4, pc}
 800a98e:	bf00      	nop
 800a990:	0800bf8f 	.word	0x0800bf8f
 800a994:	0800bfa0 	.word	0x0800bfa0

0800a998 <__multiply>:
 800a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	4614      	mov	r4, r2
 800a99e:	690a      	ldr	r2, [r1, #16]
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	bfb8      	it	lt
 800a9a6:	460b      	movlt	r3, r1
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	bfbc      	itt	lt
 800a9ac:	4625      	movlt	r5, r4
 800a9ae:	461c      	movlt	r4, r3
 800a9b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9b8:	68ab      	ldr	r3, [r5, #8]
 800a9ba:	6869      	ldr	r1, [r5, #4]
 800a9bc:	eb0a 0709 	add.w	r7, sl, r9
 800a9c0:	42bb      	cmp	r3, r7
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	bfb8      	it	lt
 800a9c6:	3101      	addlt	r1, #1
 800a9c8:	f7ff fed4 	bl	800a774 <_Balloc>
 800a9cc:	b930      	cbnz	r0, 800a9dc <__multiply+0x44>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	4b42      	ldr	r3, [pc, #264]	; (800aadc <__multiply+0x144>)
 800a9d2:	4843      	ldr	r0, [pc, #268]	; (800aae0 <__multiply+0x148>)
 800a9d4:	f240 115d 	movw	r1, #349	; 0x15d
 800a9d8:	f000 fc70 	bl	800b2bc <__assert_func>
 800a9dc:	f100 0614 	add.w	r6, r0, #20
 800a9e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9e4:	4633      	mov	r3, r6
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4543      	cmp	r3, r8
 800a9ea:	d31e      	bcc.n	800aa2a <__multiply+0x92>
 800a9ec:	f105 0c14 	add.w	ip, r5, #20
 800a9f0:	f104 0314 	add.w	r3, r4, #20
 800a9f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9fc:	9202      	str	r2, [sp, #8]
 800a9fe:	ebac 0205 	sub.w	r2, ip, r5
 800aa02:	3a15      	subs	r2, #21
 800aa04:	f022 0203 	bic.w	r2, r2, #3
 800aa08:	3204      	adds	r2, #4
 800aa0a:	f105 0115 	add.w	r1, r5, #21
 800aa0e:	458c      	cmp	ip, r1
 800aa10:	bf38      	it	cc
 800aa12:	2204      	movcc	r2, #4
 800aa14:	9201      	str	r2, [sp, #4]
 800aa16:	9a02      	ldr	r2, [sp, #8]
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d808      	bhi.n	800aa30 <__multiply+0x98>
 800aa1e:	2f00      	cmp	r7, #0
 800aa20:	dc55      	bgt.n	800aace <__multiply+0x136>
 800aa22:	6107      	str	r7, [r0, #16]
 800aa24:	b005      	add	sp, #20
 800aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2a:	f843 2b04 	str.w	r2, [r3], #4
 800aa2e:	e7db      	b.n	800a9e8 <__multiply+0x50>
 800aa30:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa34:	f1ba 0f00 	cmp.w	sl, #0
 800aa38:	d020      	beq.n	800aa7c <__multiply+0xe4>
 800aa3a:	f105 0e14 	add.w	lr, r5, #20
 800aa3e:	46b1      	mov	r9, r6
 800aa40:	2200      	movs	r2, #0
 800aa42:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa46:	f8d9 b000 	ldr.w	fp, [r9]
 800aa4a:	b2a1      	uxth	r1, r4
 800aa4c:	fa1f fb8b 	uxth.w	fp, fp
 800aa50:	fb0a b101 	mla	r1, sl, r1, fp
 800aa54:	4411      	add	r1, r2
 800aa56:	f8d9 2000 	ldr.w	r2, [r9]
 800aa5a:	0c24      	lsrs	r4, r4, #16
 800aa5c:	0c12      	lsrs	r2, r2, #16
 800aa5e:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa66:	b289      	uxth	r1, r1
 800aa68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa6c:	45f4      	cmp	ip, lr
 800aa6e:	f849 1b04 	str.w	r1, [r9], #4
 800aa72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa76:	d8e4      	bhi.n	800aa42 <__multiply+0xaa>
 800aa78:	9901      	ldr	r1, [sp, #4]
 800aa7a:	5072      	str	r2, [r6, r1]
 800aa7c:	9a03      	ldr	r2, [sp, #12]
 800aa7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa82:	3304      	adds	r3, #4
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	d01f      	beq.n	800aaca <__multiply+0x132>
 800aa8a:	6834      	ldr	r4, [r6, #0]
 800aa8c:	f105 0114 	add.w	r1, r5, #20
 800aa90:	46b6      	mov	lr, r6
 800aa92:	f04f 0a00 	mov.w	sl, #0
 800aa96:	880a      	ldrh	r2, [r1, #0]
 800aa98:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa9c:	fb09 b202 	mla	r2, r9, r2, fp
 800aaa0:	4492      	add	sl, r2
 800aaa2:	b2a4      	uxth	r4, r4
 800aaa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aaa8:	f84e 4b04 	str.w	r4, [lr], #4
 800aaac:	f851 4b04 	ldr.w	r4, [r1], #4
 800aab0:	f8be 2000 	ldrh.w	r2, [lr]
 800aab4:	0c24      	lsrs	r4, r4, #16
 800aab6:	fb09 2404 	mla	r4, r9, r4, r2
 800aaba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aabe:	458c      	cmp	ip, r1
 800aac0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aac4:	d8e7      	bhi.n	800aa96 <__multiply+0xfe>
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	50b4      	str	r4, [r6, r2]
 800aaca:	3604      	adds	r6, #4
 800aacc:	e7a3      	b.n	800aa16 <__multiply+0x7e>
 800aace:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1a5      	bne.n	800aa22 <__multiply+0x8a>
 800aad6:	3f01      	subs	r7, #1
 800aad8:	e7a1      	b.n	800aa1e <__multiply+0x86>
 800aada:	bf00      	nop
 800aadc:	0800bf8f 	.word	0x0800bf8f
 800aae0:	0800bfa0 	.word	0x0800bfa0

0800aae4 <__pow5mult>:
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4615      	mov	r5, r2
 800aaea:	f012 0203 	ands.w	r2, r2, #3
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	d007      	beq.n	800ab04 <__pow5mult+0x20>
 800aaf4:	4c25      	ldr	r4, [pc, #148]	; (800ab8c <__pow5mult+0xa8>)
 800aaf6:	3a01      	subs	r2, #1
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aafe:	f7ff fe9b 	bl	800a838 <__multadd>
 800ab02:	4607      	mov	r7, r0
 800ab04:	10ad      	asrs	r5, r5, #2
 800ab06:	d03d      	beq.n	800ab84 <__pow5mult+0xa0>
 800ab08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab0a:	b97c      	cbnz	r4, 800ab2c <__pow5mult+0x48>
 800ab0c:	2010      	movs	r0, #16
 800ab0e:	f7ff fe1b 	bl	800a748 <malloc>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6270      	str	r0, [r6, #36]	; 0x24
 800ab16:	b928      	cbnz	r0, 800ab24 <__pow5mult+0x40>
 800ab18:	4b1d      	ldr	r3, [pc, #116]	; (800ab90 <__pow5mult+0xac>)
 800ab1a:	481e      	ldr	r0, [pc, #120]	; (800ab94 <__pow5mult+0xb0>)
 800ab1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab20:	f000 fbcc 	bl	800b2bc <__assert_func>
 800ab24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab28:	6004      	str	r4, [r0, #0]
 800ab2a:	60c4      	str	r4, [r0, #12]
 800ab2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab34:	b94c      	cbnz	r4, 800ab4a <__pow5mult+0x66>
 800ab36:	f240 2171 	movw	r1, #625	; 0x271
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7ff ff16 	bl	800a96c <__i2b>
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab46:	4604      	mov	r4, r0
 800ab48:	6003      	str	r3, [r0, #0]
 800ab4a:	f04f 0900 	mov.w	r9, #0
 800ab4e:	07eb      	lsls	r3, r5, #31
 800ab50:	d50a      	bpl.n	800ab68 <__pow5mult+0x84>
 800ab52:	4639      	mov	r1, r7
 800ab54:	4622      	mov	r2, r4
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ff1e 	bl	800a998 <__multiply>
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4680      	mov	r8, r0
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff fe47 	bl	800a7f4 <_Bfree>
 800ab66:	4647      	mov	r7, r8
 800ab68:	106d      	asrs	r5, r5, #1
 800ab6a:	d00b      	beq.n	800ab84 <__pow5mult+0xa0>
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	b938      	cbnz	r0, 800ab80 <__pow5mult+0x9c>
 800ab70:	4622      	mov	r2, r4
 800ab72:	4621      	mov	r1, r4
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7ff ff0f 	bl	800a998 <__multiply>
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	f8c0 9000 	str.w	r9, [r0]
 800ab80:	4604      	mov	r4, r0
 800ab82:	e7e4      	b.n	800ab4e <__pow5mult+0x6a>
 800ab84:	4638      	mov	r0, r7
 800ab86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800c0f0 	.word	0x0800c0f0
 800ab90:	0800bf19 	.word	0x0800bf19
 800ab94:	0800bfa0 	.word	0x0800bfa0

0800ab98 <__lshift>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	6849      	ldr	r1, [r1, #4]
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	4607      	mov	r7, r0
 800abaa:	4691      	mov	r9, r2
 800abac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abb0:	f108 0601 	add.w	r6, r8, #1
 800abb4:	42b3      	cmp	r3, r6
 800abb6:	db0b      	blt.n	800abd0 <__lshift+0x38>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff fddb 	bl	800a774 <_Balloc>
 800abbe:	4605      	mov	r5, r0
 800abc0:	b948      	cbnz	r0, 800abd6 <__lshift+0x3e>
 800abc2:	4602      	mov	r2, r0
 800abc4:	4b28      	ldr	r3, [pc, #160]	; (800ac68 <__lshift+0xd0>)
 800abc6:	4829      	ldr	r0, [pc, #164]	; (800ac6c <__lshift+0xd4>)
 800abc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abcc:	f000 fb76 	bl	800b2bc <__assert_func>
 800abd0:	3101      	adds	r1, #1
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	e7ee      	b.n	800abb4 <__lshift+0x1c>
 800abd6:	2300      	movs	r3, #0
 800abd8:	f100 0114 	add.w	r1, r0, #20
 800abdc:	f100 0210 	add.w	r2, r0, #16
 800abe0:	4618      	mov	r0, r3
 800abe2:	4553      	cmp	r3, sl
 800abe4:	db33      	blt.n	800ac4e <__lshift+0xb6>
 800abe6:	6920      	ldr	r0, [r4, #16]
 800abe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abec:	f104 0314 	add.w	r3, r4, #20
 800abf0:	f019 091f 	ands.w	r9, r9, #31
 800abf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abfc:	d02b      	beq.n	800ac56 <__lshift+0xbe>
 800abfe:	f1c9 0e20 	rsb	lr, r9, #32
 800ac02:	468a      	mov	sl, r1
 800ac04:	2200      	movs	r2, #0
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	fa00 f009 	lsl.w	r0, r0, r9
 800ac0c:	4302      	orrs	r2, r0
 800ac0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac16:	459c      	cmp	ip, r3
 800ac18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac1c:	d8f3      	bhi.n	800ac06 <__lshift+0x6e>
 800ac1e:	ebac 0304 	sub.w	r3, ip, r4
 800ac22:	3b15      	subs	r3, #21
 800ac24:	f023 0303 	bic.w	r3, r3, #3
 800ac28:	3304      	adds	r3, #4
 800ac2a:	f104 0015 	add.w	r0, r4, #21
 800ac2e:	4584      	cmp	ip, r0
 800ac30:	bf38      	it	cc
 800ac32:	2304      	movcc	r3, #4
 800ac34:	50ca      	str	r2, [r1, r3]
 800ac36:	b10a      	cbz	r2, 800ac3c <__lshift+0xa4>
 800ac38:	f108 0602 	add.w	r6, r8, #2
 800ac3c:	3e01      	subs	r6, #1
 800ac3e:	4638      	mov	r0, r7
 800ac40:	612e      	str	r6, [r5, #16]
 800ac42:	4621      	mov	r1, r4
 800ac44:	f7ff fdd6 	bl	800a7f4 <_Bfree>
 800ac48:	4628      	mov	r0, r5
 800ac4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac52:	3301      	adds	r3, #1
 800ac54:	e7c5      	b.n	800abe2 <__lshift+0x4a>
 800ac56:	3904      	subs	r1, #4
 800ac58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac60:	459c      	cmp	ip, r3
 800ac62:	d8f9      	bhi.n	800ac58 <__lshift+0xc0>
 800ac64:	e7ea      	b.n	800ac3c <__lshift+0xa4>
 800ac66:	bf00      	nop
 800ac68:	0800bf8f 	.word	0x0800bf8f
 800ac6c:	0800bfa0 	.word	0x0800bfa0

0800ac70 <__mcmp>:
 800ac70:	b530      	push	{r4, r5, lr}
 800ac72:	6902      	ldr	r2, [r0, #16]
 800ac74:	690c      	ldr	r4, [r1, #16]
 800ac76:	1b12      	subs	r2, r2, r4
 800ac78:	d10e      	bne.n	800ac98 <__mcmp+0x28>
 800ac7a:	f100 0314 	add.w	r3, r0, #20
 800ac7e:	3114      	adds	r1, #20
 800ac80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d003      	beq.n	800ac9c <__mcmp+0x2c>
 800ac94:	d305      	bcc.n	800aca2 <__mcmp+0x32>
 800ac96:	2201      	movs	r2, #1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	bd30      	pop	{r4, r5, pc}
 800ac9c:	4283      	cmp	r3, r0
 800ac9e:	d3f3      	bcc.n	800ac88 <__mcmp+0x18>
 800aca0:	e7fa      	b.n	800ac98 <__mcmp+0x28>
 800aca2:	f04f 32ff 	mov.w	r2, #4294967295
 800aca6:	e7f7      	b.n	800ac98 <__mcmp+0x28>

0800aca8 <__mdiff>:
 800aca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	4606      	mov	r6, r0
 800acb0:	4611      	mov	r1, r2
 800acb2:	4620      	mov	r0, r4
 800acb4:	4617      	mov	r7, r2
 800acb6:	f7ff ffdb 	bl	800ac70 <__mcmp>
 800acba:	1e05      	subs	r5, r0, #0
 800acbc:	d110      	bne.n	800ace0 <__mdiff+0x38>
 800acbe:	4629      	mov	r1, r5
 800acc0:	4630      	mov	r0, r6
 800acc2:	f7ff fd57 	bl	800a774 <_Balloc>
 800acc6:	b930      	cbnz	r0, 800acd6 <__mdiff+0x2e>
 800acc8:	4b39      	ldr	r3, [pc, #228]	; (800adb0 <__mdiff+0x108>)
 800acca:	4602      	mov	r2, r0
 800accc:	f240 2132 	movw	r1, #562	; 0x232
 800acd0:	4838      	ldr	r0, [pc, #224]	; (800adb4 <__mdiff+0x10c>)
 800acd2:	f000 faf3 	bl	800b2bc <__assert_func>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace0:	bfa4      	itt	ge
 800ace2:	463b      	movge	r3, r7
 800ace4:	4627      	movge	r7, r4
 800ace6:	4630      	mov	r0, r6
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	bfa6      	itte	ge
 800acec:	461c      	movge	r4, r3
 800acee:	2500      	movge	r5, #0
 800acf0:	2501      	movlt	r5, #1
 800acf2:	f7ff fd3f 	bl	800a774 <_Balloc>
 800acf6:	b920      	cbnz	r0, 800ad02 <__mdiff+0x5a>
 800acf8:	4b2d      	ldr	r3, [pc, #180]	; (800adb0 <__mdiff+0x108>)
 800acfa:	4602      	mov	r2, r0
 800acfc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad00:	e7e6      	b.n	800acd0 <__mdiff+0x28>
 800ad02:	693e      	ldr	r6, [r7, #16]
 800ad04:	60c5      	str	r5, [r0, #12]
 800ad06:	6925      	ldr	r5, [r4, #16]
 800ad08:	f107 0114 	add.w	r1, r7, #20
 800ad0c:	f104 0914 	add.w	r9, r4, #20
 800ad10:	f100 0e14 	add.w	lr, r0, #20
 800ad14:	f107 0210 	add.w	r2, r7, #16
 800ad18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad20:	46f2      	mov	sl, lr
 800ad22:	2700      	movs	r7, #0
 800ad24:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad2c:	fa1f f883 	uxth.w	r8, r3
 800ad30:	fa17 f78b 	uxtah	r7, r7, fp
 800ad34:	0c1b      	lsrs	r3, r3, #16
 800ad36:	eba7 0808 	sub.w	r8, r7, r8
 800ad3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad42:	fa1f f888 	uxth.w	r8, r8
 800ad46:	141f      	asrs	r7, r3, #16
 800ad48:	454d      	cmp	r5, r9
 800ad4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad4e:	f84a 3b04 	str.w	r3, [sl], #4
 800ad52:	d8e7      	bhi.n	800ad24 <__mdiff+0x7c>
 800ad54:	1b2b      	subs	r3, r5, r4
 800ad56:	3b15      	subs	r3, #21
 800ad58:	f023 0303 	bic.w	r3, r3, #3
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	3415      	adds	r4, #21
 800ad60:	42a5      	cmp	r5, r4
 800ad62:	bf38      	it	cc
 800ad64:	2304      	movcc	r3, #4
 800ad66:	4419      	add	r1, r3
 800ad68:	4473      	add	r3, lr
 800ad6a:	469e      	mov	lr, r3
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	4565      	cmp	r5, ip
 800ad70:	d30e      	bcc.n	800ad90 <__mdiff+0xe8>
 800ad72:	f10c 0203 	add.w	r2, ip, #3
 800ad76:	1a52      	subs	r2, r2, r1
 800ad78:	f022 0203 	bic.w	r2, r2, #3
 800ad7c:	3903      	subs	r1, #3
 800ad7e:	458c      	cmp	ip, r1
 800ad80:	bf38      	it	cc
 800ad82:	2200      	movcc	r2, #0
 800ad84:	441a      	add	r2, r3
 800ad86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad8a:	b17b      	cbz	r3, 800adac <__mdiff+0x104>
 800ad8c:	6106      	str	r6, [r0, #16]
 800ad8e:	e7a5      	b.n	800acdc <__mdiff+0x34>
 800ad90:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad94:	fa17 f488 	uxtah	r4, r7, r8
 800ad98:	1422      	asrs	r2, r4, #16
 800ad9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad9e:	b2a4      	uxth	r4, r4
 800ada0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ada4:	f84e 4b04 	str.w	r4, [lr], #4
 800ada8:	1417      	asrs	r7, r2, #16
 800adaa:	e7e0      	b.n	800ad6e <__mdiff+0xc6>
 800adac:	3e01      	subs	r6, #1
 800adae:	e7ea      	b.n	800ad86 <__mdiff+0xde>
 800adb0:	0800bf8f 	.word	0x0800bf8f
 800adb4:	0800bfa0 	.word	0x0800bfa0

0800adb8 <__d2b>:
 800adb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adbc:	4689      	mov	r9, r1
 800adbe:	2101      	movs	r1, #1
 800adc0:	ec57 6b10 	vmov	r6, r7, d0
 800adc4:	4690      	mov	r8, r2
 800adc6:	f7ff fcd5 	bl	800a774 <_Balloc>
 800adca:	4604      	mov	r4, r0
 800adcc:	b930      	cbnz	r0, 800addc <__d2b+0x24>
 800adce:	4602      	mov	r2, r0
 800add0:	4b25      	ldr	r3, [pc, #148]	; (800ae68 <__d2b+0xb0>)
 800add2:	4826      	ldr	r0, [pc, #152]	; (800ae6c <__d2b+0xb4>)
 800add4:	f240 310a 	movw	r1, #778	; 0x30a
 800add8:	f000 fa70 	bl	800b2bc <__assert_func>
 800addc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ade0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ade4:	bb35      	cbnz	r5, 800ae34 <__d2b+0x7c>
 800ade6:	2e00      	cmp	r6, #0
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	d028      	beq.n	800ae3e <__d2b+0x86>
 800adec:	4668      	mov	r0, sp
 800adee:	9600      	str	r6, [sp, #0]
 800adf0:	f7ff fd8c 	bl	800a90c <__lo0bits>
 800adf4:	9900      	ldr	r1, [sp, #0]
 800adf6:	b300      	cbz	r0, 800ae3a <__d2b+0x82>
 800adf8:	9a01      	ldr	r2, [sp, #4]
 800adfa:	f1c0 0320 	rsb	r3, r0, #32
 800adfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ae02:	430b      	orrs	r3, r1
 800ae04:	40c2      	lsrs	r2, r0
 800ae06:	6163      	str	r3, [r4, #20]
 800ae08:	9201      	str	r2, [sp, #4]
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	61a3      	str	r3, [r4, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bf14      	ite	ne
 800ae12:	2202      	movne	r2, #2
 800ae14:	2201      	moveq	r2, #1
 800ae16:	6122      	str	r2, [r4, #16]
 800ae18:	b1d5      	cbz	r5, 800ae50 <__d2b+0x98>
 800ae1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae1e:	4405      	add	r5, r0
 800ae20:	f8c9 5000 	str.w	r5, [r9]
 800ae24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae28:	f8c8 0000 	str.w	r0, [r8]
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	b003      	add	sp, #12
 800ae30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae38:	e7d5      	b.n	800ade6 <__d2b+0x2e>
 800ae3a:	6161      	str	r1, [r4, #20]
 800ae3c:	e7e5      	b.n	800ae0a <__d2b+0x52>
 800ae3e:	a801      	add	r0, sp, #4
 800ae40:	f7ff fd64 	bl	800a90c <__lo0bits>
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	6163      	str	r3, [r4, #20]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	6122      	str	r2, [r4, #16]
 800ae4c:	3020      	adds	r0, #32
 800ae4e:	e7e3      	b.n	800ae18 <__d2b+0x60>
 800ae50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae58:	f8c9 0000 	str.w	r0, [r9]
 800ae5c:	6918      	ldr	r0, [r3, #16]
 800ae5e:	f7ff fd35 	bl	800a8cc <__hi0bits>
 800ae62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae66:	e7df      	b.n	800ae28 <__d2b+0x70>
 800ae68:	0800bf8f 	.word	0x0800bf8f
 800ae6c:	0800bfa0 	.word	0x0800bfa0

0800ae70 <_calloc_r>:
 800ae70:	b513      	push	{r0, r1, r4, lr}
 800ae72:	434a      	muls	r2, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	9201      	str	r2, [sp, #4]
 800ae78:	f000 f85a 	bl	800af30 <_malloc_r>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	b118      	cbz	r0, 800ae88 <_calloc_r+0x18>
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	2100      	movs	r1, #0
 800ae84:	f7fe f952 	bl	800912c <memset>
 800ae88:	4620      	mov	r0, r4
 800ae8a:	b002      	add	sp, #8
 800ae8c:	bd10      	pop	{r4, pc}
	...

0800ae90 <_free_r>:
 800ae90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae92:	2900      	cmp	r1, #0
 800ae94:	d048      	beq.n	800af28 <_free_r+0x98>
 800ae96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9a:	9001      	str	r0, [sp, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aea2:	bfb8      	it	lt
 800aea4:	18e4      	addlt	r4, r4, r3
 800aea6:	f000 fa65 	bl	800b374 <__malloc_lock>
 800aeaa:	4a20      	ldr	r2, [pc, #128]	; (800af2c <_free_r+0x9c>)
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	6813      	ldr	r3, [r2, #0]
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	b933      	cbnz	r3, 800aec2 <_free_r+0x32>
 800aeb4:	6063      	str	r3, [r4, #4]
 800aeb6:	6014      	str	r4, [r2, #0]
 800aeb8:	b003      	add	sp, #12
 800aeba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aebe:	f000 ba5f 	b.w	800b380 <__malloc_unlock>
 800aec2:	42a3      	cmp	r3, r4
 800aec4:	d90b      	bls.n	800aede <_free_r+0x4e>
 800aec6:	6821      	ldr	r1, [r4, #0]
 800aec8:	1862      	adds	r2, r4, r1
 800aeca:	4293      	cmp	r3, r2
 800aecc:	bf04      	itt	eq
 800aece:	681a      	ldreq	r2, [r3, #0]
 800aed0:	685b      	ldreq	r3, [r3, #4]
 800aed2:	6063      	str	r3, [r4, #4]
 800aed4:	bf04      	itt	eq
 800aed6:	1852      	addeq	r2, r2, r1
 800aed8:	6022      	streq	r2, [r4, #0]
 800aeda:	602c      	str	r4, [r5, #0]
 800aedc:	e7ec      	b.n	800aeb8 <_free_r+0x28>
 800aede:	461a      	mov	r2, r3
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	b10b      	cbz	r3, 800aee8 <_free_r+0x58>
 800aee4:	42a3      	cmp	r3, r4
 800aee6:	d9fa      	bls.n	800aede <_free_r+0x4e>
 800aee8:	6811      	ldr	r1, [r2, #0]
 800aeea:	1855      	adds	r5, r2, r1
 800aeec:	42a5      	cmp	r5, r4
 800aeee:	d10b      	bne.n	800af08 <_free_r+0x78>
 800aef0:	6824      	ldr	r4, [r4, #0]
 800aef2:	4421      	add	r1, r4
 800aef4:	1854      	adds	r4, r2, r1
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	6011      	str	r1, [r2, #0]
 800aefa:	d1dd      	bne.n	800aeb8 <_free_r+0x28>
 800aefc:	681c      	ldr	r4, [r3, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	6053      	str	r3, [r2, #4]
 800af02:	4421      	add	r1, r4
 800af04:	6011      	str	r1, [r2, #0]
 800af06:	e7d7      	b.n	800aeb8 <_free_r+0x28>
 800af08:	d902      	bls.n	800af10 <_free_r+0x80>
 800af0a:	230c      	movs	r3, #12
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	e7d3      	b.n	800aeb8 <_free_r+0x28>
 800af10:	6825      	ldr	r5, [r4, #0]
 800af12:	1961      	adds	r1, r4, r5
 800af14:	428b      	cmp	r3, r1
 800af16:	bf04      	itt	eq
 800af18:	6819      	ldreq	r1, [r3, #0]
 800af1a:	685b      	ldreq	r3, [r3, #4]
 800af1c:	6063      	str	r3, [r4, #4]
 800af1e:	bf04      	itt	eq
 800af20:	1949      	addeq	r1, r1, r5
 800af22:	6021      	streq	r1, [r4, #0]
 800af24:	6054      	str	r4, [r2, #4]
 800af26:	e7c7      	b.n	800aeb8 <_free_r+0x28>
 800af28:	b003      	add	sp, #12
 800af2a:	bd30      	pop	{r4, r5, pc}
 800af2c:	200002cc 	.word	0x200002cc

0800af30 <_malloc_r>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	1ccd      	adds	r5, r1, #3
 800af34:	f025 0503 	bic.w	r5, r5, #3
 800af38:	3508      	adds	r5, #8
 800af3a:	2d0c      	cmp	r5, #12
 800af3c:	bf38      	it	cc
 800af3e:	250c      	movcc	r5, #12
 800af40:	2d00      	cmp	r5, #0
 800af42:	4606      	mov	r6, r0
 800af44:	db01      	blt.n	800af4a <_malloc_r+0x1a>
 800af46:	42a9      	cmp	r1, r5
 800af48:	d903      	bls.n	800af52 <_malloc_r+0x22>
 800af4a:	230c      	movs	r3, #12
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	2000      	movs	r0, #0
 800af50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af52:	f000 fa0f 	bl	800b374 <__malloc_lock>
 800af56:	4921      	ldr	r1, [pc, #132]	; (800afdc <_malloc_r+0xac>)
 800af58:	680a      	ldr	r2, [r1, #0]
 800af5a:	4614      	mov	r4, r2
 800af5c:	b99c      	cbnz	r4, 800af86 <_malloc_r+0x56>
 800af5e:	4f20      	ldr	r7, [pc, #128]	; (800afe0 <_malloc_r+0xb0>)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	b923      	cbnz	r3, 800af6e <_malloc_r+0x3e>
 800af64:	4621      	mov	r1, r4
 800af66:	4630      	mov	r0, r6
 800af68:	f000 f998 	bl	800b29c <_sbrk_r>
 800af6c:	6038      	str	r0, [r7, #0]
 800af6e:	4629      	mov	r1, r5
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f993 	bl	800b29c <_sbrk_r>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	d123      	bne.n	800afc2 <_malloc_r+0x92>
 800af7a:	230c      	movs	r3, #12
 800af7c:	6033      	str	r3, [r6, #0]
 800af7e:	4630      	mov	r0, r6
 800af80:	f000 f9fe 	bl	800b380 <__malloc_unlock>
 800af84:	e7e3      	b.n	800af4e <_malloc_r+0x1e>
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	1b5b      	subs	r3, r3, r5
 800af8a:	d417      	bmi.n	800afbc <_malloc_r+0x8c>
 800af8c:	2b0b      	cmp	r3, #11
 800af8e:	d903      	bls.n	800af98 <_malloc_r+0x68>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	441c      	add	r4, r3
 800af94:	6025      	str	r5, [r4, #0]
 800af96:	e004      	b.n	800afa2 <_malloc_r+0x72>
 800af98:	6863      	ldr	r3, [r4, #4]
 800af9a:	42a2      	cmp	r2, r4
 800af9c:	bf0c      	ite	eq
 800af9e:	600b      	streq	r3, [r1, #0]
 800afa0:	6053      	strne	r3, [r2, #4]
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f9ec 	bl	800b380 <__malloc_unlock>
 800afa8:	f104 000b 	add.w	r0, r4, #11
 800afac:	1d23      	adds	r3, r4, #4
 800afae:	f020 0007 	bic.w	r0, r0, #7
 800afb2:	1ac2      	subs	r2, r0, r3
 800afb4:	d0cc      	beq.n	800af50 <_malloc_r+0x20>
 800afb6:	1a1b      	subs	r3, r3, r0
 800afb8:	50a3      	str	r3, [r4, r2]
 800afba:	e7c9      	b.n	800af50 <_malloc_r+0x20>
 800afbc:	4622      	mov	r2, r4
 800afbe:	6864      	ldr	r4, [r4, #4]
 800afc0:	e7cc      	b.n	800af5c <_malloc_r+0x2c>
 800afc2:	1cc4      	adds	r4, r0, #3
 800afc4:	f024 0403 	bic.w	r4, r4, #3
 800afc8:	42a0      	cmp	r0, r4
 800afca:	d0e3      	beq.n	800af94 <_malloc_r+0x64>
 800afcc:	1a21      	subs	r1, r4, r0
 800afce:	4630      	mov	r0, r6
 800afd0:	f000 f964 	bl	800b29c <_sbrk_r>
 800afd4:	3001      	adds	r0, #1
 800afd6:	d1dd      	bne.n	800af94 <_malloc_r+0x64>
 800afd8:	e7cf      	b.n	800af7a <_malloc_r+0x4a>
 800afda:	bf00      	nop
 800afdc:	200002cc 	.word	0x200002cc
 800afe0:	200002d0 	.word	0x200002d0

0800afe4 <__ssputs_r>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	688e      	ldr	r6, [r1, #8]
 800afea:	429e      	cmp	r6, r3
 800afec:	4682      	mov	sl, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	4690      	mov	r8, r2
 800aff2:	461f      	mov	r7, r3
 800aff4:	d838      	bhi.n	800b068 <__ssputs_r+0x84>
 800aff6:	898a      	ldrh	r2, [r1, #12]
 800aff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800affc:	d032      	beq.n	800b064 <__ssputs_r+0x80>
 800affe:	6825      	ldr	r5, [r4, #0]
 800b000:	6909      	ldr	r1, [r1, #16]
 800b002:	eba5 0901 	sub.w	r9, r5, r1
 800b006:	6965      	ldr	r5, [r4, #20]
 800b008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b00c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b010:	3301      	adds	r3, #1
 800b012:	444b      	add	r3, r9
 800b014:	106d      	asrs	r5, r5, #1
 800b016:	429d      	cmp	r5, r3
 800b018:	bf38      	it	cc
 800b01a:	461d      	movcc	r5, r3
 800b01c:	0553      	lsls	r3, r2, #21
 800b01e:	d531      	bpl.n	800b084 <__ssputs_r+0xa0>
 800b020:	4629      	mov	r1, r5
 800b022:	f7ff ff85 	bl	800af30 <_malloc_r>
 800b026:	4606      	mov	r6, r0
 800b028:	b950      	cbnz	r0, 800b040 <__ssputs_r+0x5c>
 800b02a:	230c      	movs	r3, #12
 800b02c:	f8ca 3000 	str.w	r3, [sl]
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b040:	6921      	ldr	r1, [r4, #16]
 800b042:	464a      	mov	r2, r9
 800b044:	f7ff fb88 	bl	800a758 <memcpy>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	6126      	str	r6, [r4, #16]
 800b056:	6165      	str	r5, [r4, #20]
 800b058:	444e      	add	r6, r9
 800b05a:	eba5 0509 	sub.w	r5, r5, r9
 800b05e:	6026      	str	r6, [r4, #0]
 800b060:	60a5      	str	r5, [r4, #8]
 800b062:	463e      	mov	r6, r7
 800b064:	42be      	cmp	r6, r7
 800b066:	d900      	bls.n	800b06a <__ssputs_r+0x86>
 800b068:	463e      	mov	r6, r7
 800b06a:	4632      	mov	r2, r6
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	4641      	mov	r1, r8
 800b070:	f000 f966 	bl	800b340 <memmove>
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	1b9b      	subs	r3, r3, r6
 800b07a:	4432      	add	r2, r6
 800b07c:	60a3      	str	r3, [r4, #8]
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	2000      	movs	r0, #0
 800b082:	e7db      	b.n	800b03c <__ssputs_r+0x58>
 800b084:	462a      	mov	r2, r5
 800b086:	f000 f981 	bl	800b38c <_realloc_r>
 800b08a:	4606      	mov	r6, r0
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d1e1      	bne.n	800b054 <__ssputs_r+0x70>
 800b090:	6921      	ldr	r1, [r4, #16]
 800b092:	4650      	mov	r0, sl
 800b094:	f7ff fefc 	bl	800ae90 <_free_r>
 800b098:	e7c7      	b.n	800b02a <__ssputs_r+0x46>
	...

0800b09c <_svfiprintf_r>:
 800b09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a0:	4698      	mov	r8, r3
 800b0a2:	898b      	ldrh	r3, [r1, #12]
 800b0a4:	061b      	lsls	r3, r3, #24
 800b0a6:	b09d      	sub	sp, #116	; 0x74
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	d50e      	bpl.n	800b0ce <_svfiprintf_r+0x32>
 800b0b0:	690b      	ldr	r3, [r1, #16]
 800b0b2:	b963      	cbnz	r3, 800b0ce <_svfiprintf_r+0x32>
 800b0b4:	2140      	movs	r1, #64	; 0x40
 800b0b6:	f7ff ff3b 	bl	800af30 <_malloc_r>
 800b0ba:	6028      	str	r0, [r5, #0]
 800b0bc:	6128      	str	r0, [r5, #16]
 800b0be:	b920      	cbnz	r0, 800b0ca <_svfiprintf_r+0x2e>
 800b0c0:	230c      	movs	r3, #12
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	e0d1      	b.n	800b26e <_svfiprintf_r+0x1d2>
 800b0ca:	2340      	movs	r3, #64	; 0x40
 800b0cc:	616b      	str	r3, [r5, #20]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d2:	2320      	movs	r3, #32
 800b0d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0dc:	2330      	movs	r3, #48	; 0x30
 800b0de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b288 <_svfiprintf_r+0x1ec>
 800b0e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0e6:	f04f 0901 	mov.w	r9, #1
 800b0ea:	4623      	mov	r3, r4
 800b0ec:	469a      	mov	sl, r3
 800b0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f2:	b10a      	cbz	r2, 800b0f8 <_svfiprintf_r+0x5c>
 800b0f4:	2a25      	cmp	r2, #37	; 0x25
 800b0f6:	d1f9      	bne.n	800b0ec <_svfiprintf_r+0x50>
 800b0f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b0fc:	d00b      	beq.n	800b116 <_svfiprintf_r+0x7a>
 800b0fe:	465b      	mov	r3, fp
 800b100:	4622      	mov	r2, r4
 800b102:	4629      	mov	r1, r5
 800b104:	4638      	mov	r0, r7
 800b106:	f7ff ff6d 	bl	800afe4 <__ssputs_r>
 800b10a:	3001      	adds	r0, #1
 800b10c:	f000 80aa 	beq.w	800b264 <_svfiprintf_r+0x1c8>
 800b110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b112:	445a      	add	r2, fp
 800b114:	9209      	str	r2, [sp, #36]	; 0x24
 800b116:	f89a 3000 	ldrb.w	r3, [sl]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 80a2 	beq.w	800b264 <_svfiprintf_r+0x1c8>
 800b120:	2300      	movs	r3, #0
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b12a:	f10a 0a01 	add.w	sl, sl, #1
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	9307      	str	r3, [sp, #28]
 800b132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b136:	931a      	str	r3, [sp, #104]	; 0x68
 800b138:	4654      	mov	r4, sl
 800b13a:	2205      	movs	r2, #5
 800b13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b140:	4851      	ldr	r0, [pc, #324]	; (800b288 <_svfiprintf_r+0x1ec>)
 800b142:	f7f5 f85d 	bl	8000200 <memchr>
 800b146:	9a04      	ldr	r2, [sp, #16]
 800b148:	b9d8      	cbnz	r0, 800b182 <_svfiprintf_r+0xe6>
 800b14a:	06d0      	lsls	r0, r2, #27
 800b14c:	bf44      	itt	mi
 800b14e:	2320      	movmi	r3, #32
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b154:	0711      	lsls	r1, r2, #28
 800b156:	bf44      	itt	mi
 800b158:	232b      	movmi	r3, #43	; 0x2b
 800b15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b15e:	f89a 3000 	ldrb.w	r3, [sl]
 800b162:	2b2a      	cmp	r3, #42	; 0x2a
 800b164:	d015      	beq.n	800b192 <_svfiprintf_r+0xf6>
 800b166:	9a07      	ldr	r2, [sp, #28]
 800b168:	4654      	mov	r4, sl
 800b16a:	2000      	movs	r0, #0
 800b16c:	f04f 0c0a 	mov.w	ip, #10
 800b170:	4621      	mov	r1, r4
 800b172:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b176:	3b30      	subs	r3, #48	; 0x30
 800b178:	2b09      	cmp	r3, #9
 800b17a:	d94e      	bls.n	800b21a <_svfiprintf_r+0x17e>
 800b17c:	b1b0      	cbz	r0, 800b1ac <_svfiprintf_r+0x110>
 800b17e:	9207      	str	r2, [sp, #28]
 800b180:	e014      	b.n	800b1ac <_svfiprintf_r+0x110>
 800b182:	eba0 0308 	sub.w	r3, r0, r8
 800b186:	fa09 f303 	lsl.w	r3, r9, r3
 800b18a:	4313      	orrs	r3, r2
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	46a2      	mov	sl, r4
 800b190:	e7d2      	b.n	800b138 <_svfiprintf_r+0x9c>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	1d19      	adds	r1, r3, #4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	9103      	str	r1, [sp, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	bfbb      	ittet	lt
 800b19e:	425b      	neglt	r3, r3
 800b1a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1a4:	9307      	strge	r3, [sp, #28]
 800b1a6:	9307      	strlt	r3, [sp, #28]
 800b1a8:	bfb8      	it	lt
 800b1aa:	9204      	strlt	r2, [sp, #16]
 800b1ac:	7823      	ldrb	r3, [r4, #0]
 800b1ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b1b0:	d10c      	bne.n	800b1cc <_svfiprintf_r+0x130>
 800b1b2:	7863      	ldrb	r3, [r4, #1]
 800b1b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b6:	d135      	bne.n	800b224 <_svfiprintf_r+0x188>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	1d1a      	adds	r2, r3, #4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	9203      	str	r2, [sp, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfb8      	it	lt
 800b1c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1c8:	3402      	adds	r4, #2
 800b1ca:	9305      	str	r3, [sp, #20]
 800b1cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b298 <_svfiprintf_r+0x1fc>
 800b1d0:	7821      	ldrb	r1, [r4, #0]
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	f7f5 f813 	bl	8000200 <memchr>
 800b1da:	b140      	cbz	r0, 800b1ee <_svfiprintf_r+0x152>
 800b1dc:	2340      	movs	r3, #64	; 0x40
 800b1de:	eba0 000a 	sub.w	r0, r0, sl
 800b1e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	4303      	orrs	r3, r0
 800b1ea:	3401      	adds	r4, #1
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	4826      	ldr	r0, [pc, #152]	; (800b28c <_svfiprintf_r+0x1f0>)
 800b1f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1f8:	2206      	movs	r2, #6
 800b1fa:	f7f5 f801 	bl	8000200 <memchr>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d038      	beq.n	800b274 <_svfiprintf_r+0x1d8>
 800b202:	4b23      	ldr	r3, [pc, #140]	; (800b290 <_svfiprintf_r+0x1f4>)
 800b204:	bb1b      	cbnz	r3, 800b24e <_svfiprintf_r+0x1b2>
 800b206:	9b03      	ldr	r3, [sp, #12]
 800b208:	3307      	adds	r3, #7
 800b20a:	f023 0307 	bic.w	r3, r3, #7
 800b20e:	3308      	adds	r3, #8
 800b210:	9303      	str	r3, [sp, #12]
 800b212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b214:	4433      	add	r3, r6
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	e767      	b.n	800b0ea <_svfiprintf_r+0x4e>
 800b21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b21e:	460c      	mov	r4, r1
 800b220:	2001      	movs	r0, #1
 800b222:	e7a5      	b.n	800b170 <_svfiprintf_r+0xd4>
 800b224:	2300      	movs	r3, #0
 800b226:	3401      	adds	r4, #1
 800b228:	9305      	str	r3, [sp, #20]
 800b22a:	4619      	mov	r1, r3
 800b22c:	f04f 0c0a 	mov.w	ip, #10
 800b230:	4620      	mov	r0, r4
 800b232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b236:	3a30      	subs	r2, #48	; 0x30
 800b238:	2a09      	cmp	r2, #9
 800b23a:	d903      	bls.n	800b244 <_svfiprintf_r+0x1a8>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0c5      	beq.n	800b1cc <_svfiprintf_r+0x130>
 800b240:	9105      	str	r1, [sp, #20]
 800b242:	e7c3      	b.n	800b1cc <_svfiprintf_r+0x130>
 800b244:	fb0c 2101 	mla	r1, ip, r1, r2
 800b248:	4604      	mov	r4, r0
 800b24a:	2301      	movs	r3, #1
 800b24c:	e7f0      	b.n	800b230 <_svfiprintf_r+0x194>
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	462a      	mov	r2, r5
 800b254:	4b0f      	ldr	r3, [pc, #60]	; (800b294 <_svfiprintf_r+0x1f8>)
 800b256:	a904      	add	r1, sp, #16
 800b258:	4638      	mov	r0, r7
 800b25a:	f7fe f80f 	bl	800927c <_printf_float>
 800b25e:	1c42      	adds	r2, r0, #1
 800b260:	4606      	mov	r6, r0
 800b262:	d1d6      	bne.n	800b212 <_svfiprintf_r+0x176>
 800b264:	89ab      	ldrh	r3, [r5, #12]
 800b266:	065b      	lsls	r3, r3, #25
 800b268:	f53f af2c 	bmi.w	800b0c4 <_svfiprintf_r+0x28>
 800b26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b26e:	b01d      	add	sp, #116	; 0x74
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b274:	ab03      	add	r3, sp, #12
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	462a      	mov	r2, r5
 800b27a:	4b06      	ldr	r3, [pc, #24]	; (800b294 <_svfiprintf_r+0x1f8>)
 800b27c:	a904      	add	r1, sp, #16
 800b27e:	4638      	mov	r0, r7
 800b280:	f7fe faa0 	bl	80097c4 <_printf_i>
 800b284:	e7eb      	b.n	800b25e <_svfiprintf_r+0x1c2>
 800b286:	bf00      	nop
 800b288:	0800c0fc 	.word	0x0800c0fc
 800b28c:	0800c106 	.word	0x0800c106
 800b290:	0800927d 	.word	0x0800927d
 800b294:	0800afe5 	.word	0x0800afe5
 800b298:	0800c102 	.word	0x0800c102

0800b29c <_sbrk_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d06      	ldr	r5, [pc, #24]	; (800b2b8 <_sbrk_r+0x1c>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f6 ffd2 	bl	8002250 <_sbrk>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_sbrk_r+0x1a>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_sbrk_r+0x1a>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	200005d4 	.word	0x200005d4

0800b2bc <__assert_func>:
 800b2bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2be:	4614      	mov	r4, r2
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <__assert_func+0x2c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	68d8      	ldr	r0, [r3, #12]
 800b2ca:	b14c      	cbz	r4, 800b2e0 <__assert_func+0x24>
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <__assert_func+0x30>)
 800b2ce:	9100      	str	r1, [sp, #0]
 800b2d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2d4:	4906      	ldr	r1, [pc, #24]	; (800b2f0 <__assert_func+0x34>)
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f000 f80e 	bl	800b2f8 <fiprintf>
 800b2dc:	f000 faa4 	bl	800b828 <abort>
 800b2e0:	4b04      	ldr	r3, [pc, #16]	; (800b2f4 <__assert_func+0x38>)
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	e7f3      	b.n	800b2ce <__assert_func+0x12>
 800b2e6:	bf00      	nop
 800b2e8:	200000c0 	.word	0x200000c0
 800b2ec:	0800c10d 	.word	0x0800c10d
 800b2f0:	0800c11a 	.word	0x0800c11a
 800b2f4:	0800c148 	.word	0x0800c148

0800b2f8 <fiprintf>:
 800b2f8:	b40e      	push	{r1, r2, r3}
 800b2fa:	b503      	push	{r0, r1, lr}
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	4805      	ldr	r0, [pc, #20]	; (800b318 <fiprintf+0x20>)
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f000 f88f 	bl	800b42c <_vfiprintf_r>
 800b30e:	b002      	add	sp, #8
 800b310:	f85d eb04 	ldr.w	lr, [sp], #4
 800b314:	b003      	add	sp, #12
 800b316:	4770      	bx	lr
 800b318:	200000c0 	.word	0x200000c0

0800b31c <__ascii_mbtowc>:
 800b31c:	b082      	sub	sp, #8
 800b31e:	b901      	cbnz	r1, 800b322 <__ascii_mbtowc+0x6>
 800b320:	a901      	add	r1, sp, #4
 800b322:	b142      	cbz	r2, 800b336 <__ascii_mbtowc+0x1a>
 800b324:	b14b      	cbz	r3, 800b33a <__ascii_mbtowc+0x1e>
 800b326:	7813      	ldrb	r3, [r2, #0]
 800b328:	600b      	str	r3, [r1, #0]
 800b32a:	7812      	ldrb	r2, [r2, #0]
 800b32c:	1e10      	subs	r0, r2, #0
 800b32e:	bf18      	it	ne
 800b330:	2001      	movne	r0, #1
 800b332:	b002      	add	sp, #8
 800b334:	4770      	bx	lr
 800b336:	4610      	mov	r0, r2
 800b338:	e7fb      	b.n	800b332 <__ascii_mbtowc+0x16>
 800b33a:	f06f 0001 	mvn.w	r0, #1
 800b33e:	e7f8      	b.n	800b332 <__ascii_mbtowc+0x16>

0800b340 <memmove>:
 800b340:	4288      	cmp	r0, r1
 800b342:	b510      	push	{r4, lr}
 800b344:	eb01 0402 	add.w	r4, r1, r2
 800b348:	d902      	bls.n	800b350 <memmove+0x10>
 800b34a:	4284      	cmp	r4, r0
 800b34c:	4623      	mov	r3, r4
 800b34e:	d807      	bhi.n	800b360 <memmove+0x20>
 800b350:	1e43      	subs	r3, r0, #1
 800b352:	42a1      	cmp	r1, r4
 800b354:	d008      	beq.n	800b368 <memmove+0x28>
 800b356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b35a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b35e:	e7f8      	b.n	800b352 <memmove+0x12>
 800b360:	4402      	add	r2, r0
 800b362:	4601      	mov	r1, r0
 800b364:	428a      	cmp	r2, r1
 800b366:	d100      	bne.n	800b36a <memmove+0x2a>
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b36e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b372:	e7f7      	b.n	800b364 <memmove+0x24>

0800b374 <__malloc_lock>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__malloc_lock+0x8>)
 800b376:	f000 bc17 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800b37a:	bf00      	nop
 800b37c:	200005dc 	.word	0x200005dc

0800b380 <__malloc_unlock>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__malloc_unlock+0x8>)
 800b382:	f000 bc12 	b.w	800bbaa <__retarget_lock_release_recursive>
 800b386:	bf00      	nop
 800b388:	200005dc 	.word	0x200005dc

0800b38c <_realloc_r>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	4607      	mov	r7, r0
 800b390:	4614      	mov	r4, r2
 800b392:	460e      	mov	r6, r1
 800b394:	b921      	cbnz	r1, 800b3a0 <_realloc_r+0x14>
 800b396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b39a:	4611      	mov	r1, r2
 800b39c:	f7ff bdc8 	b.w	800af30 <_malloc_r>
 800b3a0:	b922      	cbnz	r2, 800b3ac <_realloc_r+0x20>
 800b3a2:	f7ff fd75 	bl	800ae90 <_free_r>
 800b3a6:	4625      	mov	r5, r4
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ac:	f000 fc62 	bl	800bc74 <_malloc_usable_size_r>
 800b3b0:	42a0      	cmp	r0, r4
 800b3b2:	d20f      	bcs.n	800b3d4 <_realloc_r+0x48>
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f7ff fdba 	bl	800af30 <_malloc_r>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d0f2      	beq.n	800b3a8 <_realloc_r+0x1c>
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	f7ff f9c7 	bl	800a758 <memcpy>
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	f7ff fd5f 	bl	800ae90 <_free_r>
 800b3d2:	e7e9      	b.n	800b3a8 <_realloc_r+0x1c>
 800b3d4:	4635      	mov	r5, r6
 800b3d6:	e7e7      	b.n	800b3a8 <_realloc_r+0x1c>

0800b3d8 <__sfputc_r>:
 800b3d8:	6893      	ldr	r3, [r2, #8]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	b410      	push	{r4}
 800b3e0:	6093      	str	r3, [r2, #8]
 800b3e2:	da08      	bge.n	800b3f6 <__sfputc_r+0x1e>
 800b3e4:	6994      	ldr	r4, [r2, #24]
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	db01      	blt.n	800b3ee <__sfputc_r+0x16>
 800b3ea:	290a      	cmp	r1, #10
 800b3ec:	d103      	bne.n	800b3f6 <__sfputc_r+0x1e>
 800b3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f2:	f000 b94b 	b.w	800b68c <__swbuf_r>
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	1c58      	adds	r0, r3, #1
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	7019      	strb	r1, [r3, #0]
 800b3fe:	4608      	mov	r0, r1
 800b400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <__sfputs_r>:
 800b406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b408:	4606      	mov	r6, r0
 800b40a:	460f      	mov	r7, r1
 800b40c:	4614      	mov	r4, r2
 800b40e:	18d5      	adds	r5, r2, r3
 800b410:	42ac      	cmp	r4, r5
 800b412:	d101      	bne.n	800b418 <__sfputs_r+0x12>
 800b414:	2000      	movs	r0, #0
 800b416:	e007      	b.n	800b428 <__sfputs_r+0x22>
 800b418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41c:	463a      	mov	r2, r7
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ffda 	bl	800b3d8 <__sfputc_r>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d1f3      	bne.n	800b410 <__sfputs_r+0xa>
 800b428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b42c <_vfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	460d      	mov	r5, r1
 800b432:	b09d      	sub	sp, #116	; 0x74
 800b434:	4614      	mov	r4, r2
 800b436:	4698      	mov	r8, r3
 800b438:	4606      	mov	r6, r0
 800b43a:	b118      	cbz	r0, 800b444 <_vfiprintf_r+0x18>
 800b43c:	6983      	ldr	r3, [r0, #24]
 800b43e:	b90b      	cbnz	r3, 800b444 <_vfiprintf_r+0x18>
 800b440:	f000 fb14 	bl	800ba6c <__sinit>
 800b444:	4b89      	ldr	r3, [pc, #548]	; (800b66c <_vfiprintf_r+0x240>)
 800b446:	429d      	cmp	r5, r3
 800b448:	d11b      	bne.n	800b482 <_vfiprintf_r+0x56>
 800b44a:	6875      	ldr	r5, [r6, #4]
 800b44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b44e:	07d9      	lsls	r1, r3, #31
 800b450:	d405      	bmi.n	800b45e <_vfiprintf_r+0x32>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	059a      	lsls	r2, r3, #22
 800b456:	d402      	bmi.n	800b45e <_vfiprintf_r+0x32>
 800b458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b45a:	f000 fba5 	bl	800bba8 <__retarget_lock_acquire_recursive>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	071b      	lsls	r3, r3, #28
 800b462:	d501      	bpl.n	800b468 <_vfiprintf_r+0x3c>
 800b464:	692b      	ldr	r3, [r5, #16]
 800b466:	b9eb      	cbnz	r3, 800b4a4 <_vfiprintf_r+0x78>
 800b468:	4629      	mov	r1, r5
 800b46a:	4630      	mov	r0, r6
 800b46c:	f000 f96e 	bl	800b74c <__swsetup_r>
 800b470:	b1c0      	cbz	r0, 800b4a4 <_vfiprintf_r+0x78>
 800b472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b474:	07dc      	lsls	r4, r3, #31
 800b476:	d50e      	bpl.n	800b496 <_vfiprintf_r+0x6a>
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	b01d      	add	sp, #116	; 0x74
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	4b7b      	ldr	r3, [pc, #492]	; (800b670 <_vfiprintf_r+0x244>)
 800b484:	429d      	cmp	r5, r3
 800b486:	d101      	bne.n	800b48c <_vfiprintf_r+0x60>
 800b488:	68b5      	ldr	r5, [r6, #8]
 800b48a:	e7df      	b.n	800b44c <_vfiprintf_r+0x20>
 800b48c:	4b79      	ldr	r3, [pc, #484]	; (800b674 <_vfiprintf_r+0x248>)
 800b48e:	429d      	cmp	r5, r3
 800b490:	bf08      	it	eq
 800b492:	68f5      	ldreq	r5, [r6, #12]
 800b494:	e7da      	b.n	800b44c <_vfiprintf_r+0x20>
 800b496:	89ab      	ldrh	r3, [r5, #12]
 800b498:	0598      	lsls	r0, r3, #22
 800b49a:	d4ed      	bmi.n	800b478 <_vfiprintf_r+0x4c>
 800b49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b49e:	f000 fb84 	bl	800bbaa <__retarget_lock_release_recursive>
 800b4a2:	e7e9      	b.n	800b478 <_vfiprintf_r+0x4c>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b2:	2330      	movs	r3, #48	; 0x30
 800b4b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b678 <_vfiprintf_r+0x24c>
 800b4b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4bc:	f04f 0901 	mov.w	r9, #1
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	469a      	mov	sl, r3
 800b4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c8:	b10a      	cbz	r2, 800b4ce <_vfiprintf_r+0xa2>
 800b4ca:	2a25      	cmp	r2, #37	; 0x25
 800b4cc:	d1f9      	bne.n	800b4c2 <_vfiprintf_r+0x96>
 800b4ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d2:	d00b      	beq.n	800b4ec <_vfiprintf_r+0xc0>
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7ff ff93 	bl	800b406 <__sfputs_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	f000 80aa 	beq.w	800b63a <_vfiprintf_r+0x20e>
 800b4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4e8:	445a      	add	r2, fp
 800b4ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80a2 	beq.w	800b63a <_vfiprintf_r+0x20e>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b500:	f10a 0a01 	add.w	sl, sl, #1
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	9307      	str	r3, [sp, #28]
 800b508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b50c:	931a      	str	r3, [sp, #104]	; 0x68
 800b50e:	4654      	mov	r4, sl
 800b510:	2205      	movs	r2, #5
 800b512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b516:	4858      	ldr	r0, [pc, #352]	; (800b678 <_vfiprintf_r+0x24c>)
 800b518:	f7f4 fe72 	bl	8000200 <memchr>
 800b51c:	9a04      	ldr	r2, [sp, #16]
 800b51e:	b9d8      	cbnz	r0, 800b558 <_vfiprintf_r+0x12c>
 800b520:	06d1      	lsls	r1, r2, #27
 800b522:	bf44      	itt	mi
 800b524:	2320      	movmi	r3, #32
 800b526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b52a:	0713      	lsls	r3, r2, #28
 800b52c:	bf44      	itt	mi
 800b52e:	232b      	movmi	r3, #43	; 0x2b
 800b530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b534:	f89a 3000 	ldrb.w	r3, [sl]
 800b538:	2b2a      	cmp	r3, #42	; 0x2a
 800b53a:	d015      	beq.n	800b568 <_vfiprintf_r+0x13c>
 800b53c:	9a07      	ldr	r2, [sp, #28]
 800b53e:	4654      	mov	r4, sl
 800b540:	2000      	movs	r0, #0
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4621      	mov	r1, r4
 800b548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b54c:	3b30      	subs	r3, #48	; 0x30
 800b54e:	2b09      	cmp	r3, #9
 800b550:	d94e      	bls.n	800b5f0 <_vfiprintf_r+0x1c4>
 800b552:	b1b0      	cbz	r0, 800b582 <_vfiprintf_r+0x156>
 800b554:	9207      	str	r2, [sp, #28]
 800b556:	e014      	b.n	800b582 <_vfiprintf_r+0x156>
 800b558:	eba0 0308 	sub.w	r3, r0, r8
 800b55c:	fa09 f303 	lsl.w	r3, r9, r3
 800b560:	4313      	orrs	r3, r2
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	46a2      	mov	sl, r4
 800b566:	e7d2      	b.n	800b50e <_vfiprintf_r+0xe2>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1d19      	adds	r1, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9103      	str	r1, [sp, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfbb      	ittet	lt
 800b574:	425b      	neglt	r3, r3
 800b576:	f042 0202 	orrlt.w	r2, r2, #2
 800b57a:	9307      	strge	r3, [sp, #28]
 800b57c:	9307      	strlt	r3, [sp, #28]
 800b57e:	bfb8      	it	lt
 800b580:	9204      	strlt	r2, [sp, #16]
 800b582:	7823      	ldrb	r3, [r4, #0]
 800b584:	2b2e      	cmp	r3, #46	; 0x2e
 800b586:	d10c      	bne.n	800b5a2 <_vfiprintf_r+0x176>
 800b588:	7863      	ldrb	r3, [r4, #1]
 800b58a:	2b2a      	cmp	r3, #42	; 0x2a
 800b58c:	d135      	bne.n	800b5fa <_vfiprintf_r+0x1ce>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	9203      	str	r2, [sp, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfb8      	it	lt
 800b59a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b59e:	3402      	adds	r4, #2
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b688 <_vfiprintf_r+0x25c>
 800b5a6:	7821      	ldrb	r1, [r4, #0]
 800b5a8:	2203      	movs	r2, #3
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	f7f4 fe28 	bl	8000200 <memchr>
 800b5b0:	b140      	cbz	r0, 800b5c4 <_vfiprintf_r+0x198>
 800b5b2:	2340      	movs	r3, #64	; 0x40
 800b5b4:	eba0 000a 	sub.w	r0, r0, sl
 800b5b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b5bc:	9b04      	ldr	r3, [sp, #16]
 800b5be:	4303      	orrs	r3, r0
 800b5c0:	3401      	adds	r4, #1
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c8:	482c      	ldr	r0, [pc, #176]	; (800b67c <_vfiprintf_r+0x250>)
 800b5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ce:	2206      	movs	r2, #6
 800b5d0:	f7f4 fe16 	bl	8000200 <memchr>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d03f      	beq.n	800b658 <_vfiprintf_r+0x22c>
 800b5d8:	4b29      	ldr	r3, [pc, #164]	; (800b680 <_vfiprintf_r+0x254>)
 800b5da:	bb1b      	cbnz	r3, 800b624 <_vfiprintf_r+0x1f8>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	3307      	adds	r3, #7
 800b5e0:	f023 0307 	bic.w	r3, r3, #7
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ea:	443b      	add	r3, r7
 800b5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ee:	e767      	b.n	800b4c0 <_vfiprintf_r+0x94>
 800b5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	e7a5      	b.n	800b546 <_vfiprintf_r+0x11a>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	3401      	adds	r4, #1
 800b5fe:	9305      	str	r3, [sp, #20]
 800b600:	4619      	mov	r1, r3
 800b602:	f04f 0c0a 	mov.w	ip, #10
 800b606:	4620      	mov	r0, r4
 800b608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b60c:	3a30      	subs	r2, #48	; 0x30
 800b60e:	2a09      	cmp	r2, #9
 800b610:	d903      	bls.n	800b61a <_vfiprintf_r+0x1ee>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d0c5      	beq.n	800b5a2 <_vfiprintf_r+0x176>
 800b616:	9105      	str	r1, [sp, #20]
 800b618:	e7c3      	b.n	800b5a2 <_vfiprintf_r+0x176>
 800b61a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b61e:	4604      	mov	r4, r0
 800b620:	2301      	movs	r3, #1
 800b622:	e7f0      	b.n	800b606 <_vfiprintf_r+0x1da>
 800b624:	ab03      	add	r3, sp, #12
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	462a      	mov	r2, r5
 800b62a:	4b16      	ldr	r3, [pc, #88]	; (800b684 <_vfiprintf_r+0x258>)
 800b62c:	a904      	add	r1, sp, #16
 800b62e:	4630      	mov	r0, r6
 800b630:	f7fd fe24 	bl	800927c <_printf_float>
 800b634:	4607      	mov	r7, r0
 800b636:	1c78      	adds	r0, r7, #1
 800b638:	d1d6      	bne.n	800b5e8 <_vfiprintf_r+0x1bc>
 800b63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b63c:	07d9      	lsls	r1, r3, #31
 800b63e:	d405      	bmi.n	800b64c <_vfiprintf_r+0x220>
 800b640:	89ab      	ldrh	r3, [r5, #12]
 800b642:	059a      	lsls	r2, r3, #22
 800b644:	d402      	bmi.n	800b64c <_vfiprintf_r+0x220>
 800b646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b648:	f000 faaf 	bl	800bbaa <__retarget_lock_release_recursive>
 800b64c:	89ab      	ldrh	r3, [r5, #12]
 800b64e:	065b      	lsls	r3, r3, #25
 800b650:	f53f af12 	bmi.w	800b478 <_vfiprintf_r+0x4c>
 800b654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b656:	e711      	b.n	800b47c <_vfiprintf_r+0x50>
 800b658:	ab03      	add	r3, sp, #12
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	462a      	mov	r2, r5
 800b65e:	4b09      	ldr	r3, [pc, #36]	; (800b684 <_vfiprintf_r+0x258>)
 800b660:	a904      	add	r1, sp, #16
 800b662:	4630      	mov	r0, r6
 800b664:	f7fe f8ae 	bl	80097c4 <_printf_i>
 800b668:	e7e4      	b.n	800b634 <_vfiprintf_r+0x208>
 800b66a:	bf00      	nop
 800b66c:	0800c274 	.word	0x0800c274
 800b670:	0800c294 	.word	0x0800c294
 800b674:	0800c254 	.word	0x0800c254
 800b678:	0800c0fc 	.word	0x0800c0fc
 800b67c:	0800c106 	.word	0x0800c106
 800b680:	0800927d 	.word	0x0800927d
 800b684:	0800b407 	.word	0x0800b407
 800b688:	0800c102 	.word	0x0800c102

0800b68c <__swbuf_r>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	460e      	mov	r6, r1
 800b690:	4614      	mov	r4, r2
 800b692:	4605      	mov	r5, r0
 800b694:	b118      	cbz	r0, 800b69e <__swbuf_r+0x12>
 800b696:	6983      	ldr	r3, [r0, #24]
 800b698:	b90b      	cbnz	r3, 800b69e <__swbuf_r+0x12>
 800b69a:	f000 f9e7 	bl	800ba6c <__sinit>
 800b69e:	4b21      	ldr	r3, [pc, #132]	; (800b724 <__swbuf_r+0x98>)
 800b6a0:	429c      	cmp	r4, r3
 800b6a2:	d12b      	bne.n	800b6fc <__swbuf_r+0x70>
 800b6a4:	686c      	ldr	r4, [r5, #4]
 800b6a6:	69a3      	ldr	r3, [r4, #24]
 800b6a8:	60a3      	str	r3, [r4, #8]
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	071a      	lsls	r2, r3, #28
 800b6ae:	d52f      	bpl.n	800b710 <__swbuf_r+0x84>
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	b36b      	cbz	r3, 800b710 <__swbuf_r+0x84>
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	1ac0      	subs	r0, r0, r3
 800b6ba:	6963      	ldr	r3, [r4, #20]
 800b6bc:	b2f6      	uxtb	r6, r6
 800b6be:	4283      	cmp	r3, r0
 800b6c0:	4637      	mov	r7, r6
 800b6c2:	dc04      	bgt.n	800b6ce <__swbuf_r+0x42>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f93c 	bl	800b944 <_fflush_r>
 800b6cc:	bb30      	cbnz	r0, 800b71c <__swbuf_r+0x90>
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	6022      	str	r2, [r4, #0]
 800b6da:	701e      	strb	r6, [r3, #0]
 800b6dc:	6963      	ldr	r3, [r4, #20]
 800b6de:	3001      	adds	r0, #1
 800b6e0:	4283      	cmp	r3, r0
 800b6e2:	d004      	beq.n	800b6ee <__swbuf_r+0x62>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	07db      	lsls	r3, r3, #31
 800b6e8:	d506      	bpl.n	800b6f8 <__swbuf_r+0x6c>
 800b6ea:	2e0a      	cmp	r6, #10
 800b6ec:	d104      	bne.n	800b6f8 <__swbuf_r+0x6c>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 f927 	bl	800b944 <_fflush_r>
 800b6f6:	b988      	cbnz	r0, 800b71c <__swbuf_r+0x90>
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <__swbuf_r+0x9c>)
 800b6fe:	429c      	cmp	r4, r3
 800b700:	d101      	bne.n	800b706 <__swbuf_r+0x7a>
 800b702:	68ac      	ldr	r4, [r5, #8]
 800b704:	e7cf      	b.n	800b6a6 <__swbuf_r+0x1a>
 800b706:	4b09      	ldr	r3, [pc, #36]	; (800b72c <__swbuf_r+0xa0>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	bf08      	it	eq
 800b70c:	68ec      	ldreq	r4, [r5, #12]
 800b70e:	e7ca      	b.n	800b6a6 <__swbuf_r+0x1a>
 800b710:	4621      	mov	r1, r4
 800b712:	4628      	mov	r0, r5
 800b714:	f000 f81a 	bl	800b74c <__swsetup_r>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d0cb      	beq.n	800b6b4 <__swbuf_r+0x28>
 800b71c:	f04f 37ff 	mov.w	r7, #4294967295
 800b720:	e7ea      	b.n	800b6f8 <__swbuf_r+0x6c>
 800b722:	bf00      	nop
 800b724:	0800c274 	.word	0x0800c274
 800b728:	0800c294 	.word	0x0800c294
 800b72c:	0800c254 	.word	0x0800c254

0800b730 <__ascii_wctomb>:
 800b730:	b149      	cbz	r1, 800b746 <__ascii_wctomb+0x16>
 800b732:	2aff      	cmp	r2, #255	; 0xff
 800b734:	bf85      	ittet	hi
 800b736:	238a      	movhi	r3, #138	; 0x8a
 800b738:	6003      	strhi	r3, [r0, #0]
 800b73a:	700a      	strbls	r2, [r1, #0]
 800b73c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b740:	bf98      	it	ls
 800b742:	2001      	movls	r0, #1
 800b744:	4770      	bx	lr
 800b746:	4608      	mov	r0, r1
 800b748:	4770      	bx	lr
	...

0800b74c <__swsetup_r>:
 800b74c:	4b32      	ldr	r3, [pc, #200]	; (800b818 <__swsetup_r+0xcc>)
 800b74e:	b570      	push	{r4, r5, r6, lr}
 800b750:	681d      	ldr	r5, [r3, #0]
 800b752:	4606      	mov	r6, r0
 800b754:	460c      	mov	r4, r1
 800b756:	b125      	cbz	r5, 800b762 <__swsetup_r+0x16>
 800b758:	69ab      	ldr	r3, [r5, #24]
 800b75a:	b913      	cbnz	r3, 800b762 <__swsetup_r+0x16>
 800b75c:	4628      	mov	r0, r5
 800b75e:	f000 f985 	bl	800ba6c <__sinit>
 800b762:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <__swsetup_r+0xd0>)
 800b764:	429c      	cmp	r4, r3
 800b766:	d10f      	bne.n	800b788 <__swsetup_r+0x3c>
 800b768:	686c      	ldr	r4, [r5, #4]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b770:	0719      	lsls	r1, r3, #28
 800b772:	d42c      	bmi.n	800b7ce <__swsetup_r+0x82>
 800b774:	06dd      	lsls	r5, r3, #27
 800b776:	d411      	bmi.n	800b79c <__swsetup_r+0x50>
 800b778:	2309      	movs	r3, #9
 800b77a:	6033      	str	r3, [r6, #0]
 800b77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
 800b786:	e03e      	b.n	800b806 <__swsetup_r+0xba>
 800b788:	4b25      	ldr	r3, [pc, #148]	; (800b820 <__swsetup_r+0xd4>)
 800b78a:	429c      	cmp	r4, r3
 800b78c:	d101      	bne.n	800b792 <__swsetup_r+0x46>
 800b78e:	68ac      	ldr	r4, [r5, #8]
 800b790:	e7eb      	b.n	800b76a <__swsetup_r+0x1e>
 800b792:	4b24      	ldr	r3, [pc, #144]	; (800b824 <__swsetup_r+0xd8>)
 800b794:	429c      	cmp	r4, r3
 800b796:	bf08      	it	eq
 800b798:	68ec      	ldreq	r4, [r5, #12]
 800b79a:	e7e6      	b.n	800b76a <__swsetup_r+0x1e>
 800b79c:	0758      	lsls	r0, r3, #29
 800b79e:	d512      	bpl.n	800b7c6 <__swsetup_r+0x7a>
 800b7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a2:	b141      	cbz	r1, 800b7b6 <__swsetup_r+0x6a>
 800b7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a8:	4299      	cmp	r1, r3
 800b7aa:	d002      	beq.n	800b7b2 <__swsetup_r+0x66>
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff fb6f 	bl	800ae90 <_free_r>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6063      	str	r3, [r4, #4]
 800b7c2:	6923      	ldr	r3, [r4, #16]
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f043 0308 	orr.w	r3, r3, #8
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	b94b      	cbnz	r3, 800b7e6 <__swsetup_r+0x9a>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7dc:	d003      	beq.n	800b7e6 <__swsetup_r+0x9a>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 fa07 	bl	800bbf4 <__smakebuf_r>
 800b7e6:	89a0      	ldrh	r0, [r4, #12]
 800b7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ec:	f010 0301 	ands.w	r3, r0, #1
 800b7f0:	d00a      	beq.n	800b808 <__swsetup_r+0xbc>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	6963      	ldr	r3, [r4, #20]
 800b7f8:	425b      	negs	r3, r3
 800b7fa:	61a3      	str	r3, [r4, #24]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b943      	cbnz	r3, 800b812 <__swsetup_r+0xc6>
 800b800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b804:	d1ba      	bne.n	800b77c <__swsetup_r+0x30>
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	0781      	lsls	r1, r0, #30
 800b80a:	bf58      	it	pl
 800b80c:	6963      	ldrpl	r3, [r4, #20]
 800b80e:	60a3      	str	r3, [r4, #8]
 800b810:	e7f4      	b.n	800b7fc <__swsetup_r+0xb0>
 800b812:	2000      	movs	r0, #0
 800b814:	e7f7      	b.n	800b806 <__swsetup_r+0xba>
 800b816:	bf00      	nop
 800b818:	200000c0 	.word	0x200000c0
 800b81c:	0800c274 	.word	0x0800c274
 800b820:	0800c294 	.word	0x0800c294
 800b824:	0800c254 	.word	0x0800c254

0800b828 <abort>:
 800b828:	b508      	push	{r3, lr}
 800b82a:	2006      	movs	r0, #6
 800b82c:	f000 fa52 	bl	800bcd4 <raise>
 800b830:	2001      	movs	r0, #1
 800b832:	f7f6 fc95 	bl	8002160 <_exit>
	...

0800b838 <__sflush_r>:
 800b838:	898a      	ldrh	r2, [r1, #12]
 800b83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83e:	4605      	mov	r5, r0
 800b840:	0710      	lsls	r0, r2, #28
 800b842:	460c      	mov	r4, r1
 800b844:	d458      	bmi.n	800b8f8 <__sflush_r+0xc0>
 800b846:	684b      	ldr	r3, [r1, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	dc05      	bgt.n	800b858 <__sflush_r+0x20>
 800b84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b84e:	2b00      	cmp	r3, #0
 800b850:	dc02      	bgt.n	800b858 <__sflush_r+0x20>
 800b852:	2000      	movs	r0, #0
 800b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	d0f9      	beq.n	800b852 <__sflush_r+0x1a>
 800b85e:	2300      	movs	r3, #0
 800b860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b864:	682f      	ldr	r7, [r5, #0]
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	d032      	beq.n	800b8d0 <__sflush_r+0x98>
 800b86a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	075a      	lsls	r2, r3, #29
 800b870:	d505      	bpl.n	800b87e <__sflush_r+0x46>
 800b872:	6863      	ldr	r3, [r4, #4]
 800b874:	1ac0      	subs	r0, r0, r3
 800b876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b878:	b10b      	cbz	r3, 800b87e <__sflush_r+0x46>
 800b87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	2300      	movs	r3, #0
 800b880:	4602      	mov	r2, r0
 800b882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b884:	6a21      	ldr	r1, [r4, #32]
 800b886:	4628      	mov	r0, r5
 800b888:	47b0      	blx	r6
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	d106      	bne.n	800b89e <__sflush_r+0x66>
 800b890:	6829      	ldr	r1, [r5, #0]
 800b892:	291d      	cmp	r1, #29
 800b894:	d82c      	bhi.n	800b8f0 <__sflush_r+0xb8>
 800b896:	4a2a      	ldr	r2, [pc, #168]	; (800b940 <__sflush_r+0x108>)
 800b898:	40ca      	lsrs	r2, r1
 800b89a:	07d6      	lsls	r6, r2, #31
 800b89c:	d528      	bpl.n	800b8f0 <__sflush_r+0xb8>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	6062      	str	r2, [r4, #4]
 800b8a2:	04d9      	lsls	r1, r3, #19
 800b8a4:	6922      	ldr	r2, [r4, #16]
 800b8a6:	6022      	str	r2, [r4, #0]
 800b8a8:	d504      	bpl.n	800b8b4 <__sflush_r+0x7c>
 800b8aa:	1c42      	adds	r2, r0, #1
 800b8ac:	d101      	bne.n	800b8b2 <__sflush_r+0x7a>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	b903      	cbnz	r3, 800b8b4 <__sflush_r+0x7c>
 800b8b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8b6:	602f      	str	r7, [r5, #0]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d0ca      	beq.n	800b852 <__sflush_r+0x1a>
 800b8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	d002      	beq.n	800b8ca <__sflush_r+0x92>
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f7ff fae3 	bl	800ae90 <_free_r>
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ce:	e7c1      	b.n	800b854 <__sflush_r+0x1c>
 800b8d0:	6a21      	ldr	r1, [r4, #32]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b0      	blx	r6
 800b8d8:	1c41      	adds	r1, r0, #1
 800b8da:	d1c7      	bne.n	800b86c <__sflush_r+0x34>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0c4      	beq.n	800b86c <__sflush_r+0x34>
 800b8e2:	2b1d      	cmp	r3, #29
 800b8e4:	d001      	beq.n	800b8ea <__sflush_r+0xb2>
 800b8e6:	2b16      	cmp	r3, #22
 800b8e8:	d101      	bne.n	800b8ee <__sflush_r+0xb6>
 800b8ea:	602f      	str	r7, [r5, #0]
 800b8ec:	e7b1      	b.n	800b852 <__sflush_r+0x1a>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	e7ad      	b.n	800b854 <__sflush_r+0x1c>
 800b8f8:	690f      	ldr	r7, [r1, #16]
 800b8fa:	2f00      	cmp	r7, #0
 800b8fc:	d0a9      	beq.n	800b852 <__sflush_r+0x1a>
 800b8fe:	0793      	lsls	r3, r2, #30
 800b900:	680e      	ldr	r6, [r1, #0]
 800b902:	bf08      	it	eq
 800b904:	694b      	ldreq	r3, [r1, #20]
 800b906:	600f      	str	r7, [r1, #0]
 800b908:	bf18      	it	ne
 800b90a:	2300      	movne	r3, #0
 800b90c:	eba6 0807 	sub.w	r8, r6, r7
 800b910:	608b      	str	r3, [r1, #8]
 800b912:	f1b8 0f00 	cmp.w	r8, #0
 800b916:	dd9c      	ble.n	800b852 <__sflush_r+0x1a>
 800b918:	6a21      	ldr	r1, [r4, #32]
 800b91a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b91c:	4643      	mov	r3, r8
 800b91e:	463a      	mov	r2, r7
 800b920:	4628      	mov	r0, r5
 800b922:	47b0      	blx	r6
 800b924:	2800      	cmp	r0, #0
 800b926:	dc06      	bgt.n	800b936 <__sflush_r+0xfe>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	f04f 30ff 	mov.w	r0, #4294967295
 800b934:	e78e      	b.n	800b854 <__sflush_r+0x1c>
 800b936:	4407      	add	r7, r0
 800b938:	eba8 0800 	sub.w	r8, r8, r0
 800b93c:	e7e9      	b.n	800b912 <__sflush_r+0xda>
 800b93e:	bf00      	nop
 800b940:	20400001 	.word	0x20400001

0800b944 <_fflush_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	690b      	ldr	r3, [r1, #16]
 800b948:	4605      	mov	r5, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	b913      	cbnz	r3, 800b954 <_fflush_r+0x10>
 800b94e:	2500      	movs	r5, #0
 800b950:	4628      	mov	r0, r5
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	b118      	cbz	r0, 800b95e <_fflush_r+0x1a>
 800b956:	6983      	ldr	r3, [r0, #24]
 800b958:	b90b      	cbnz	r3, 800b95e <_fflush_r+0x1a>
 800b95a:	f000 f887 	bl	800ba6c <__sinit>
 800b95e:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <_fflush_r+0x6c>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d11b      	bne.n	800b99c <_fflush_r+0x58>
 800b964:	686c      	ldr	r4, [r5, #4]
 800b966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0ef      	beq.n	800b94e <_fflush_r+0xa>
 800b96e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b970:	07d0      	lsls	r0, r2, #31
 800b972:	d404      	bmi.n	800b97e <_fflush_r+0x3a>
 800b974:	0599      	lsls	r1, r3, #22
 800b976:	d402      	bmi.n	800b97e <_fflush_r+0x3a>
 800b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b97a:	f000 f915 	bl	800bba8 <__retarget_lock_acquire_recursive>
 800b97e:	4628      	mov	r0, r5
 800b980:	4621      	mov	r1, r4
 800b982:	f7ff ff59 	bl	800b838 <__sflush_r>
 800b986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b988:	07da      	lsls	r2, r3, #31
 800b98a:	4605      	mov	r5, r0
 800b98c:	d4e0      	bmi.n	800b950 <_fflush_r+0xc>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	059b      	lsls	r3, r3, #22
 800b992:	d4dd      	bmi.n	800b950 <_fflush_r+0xc>
 800b994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b996:	f000 f908 	bl	800bbaa <__retarget_lock_release_recursive>
 800b99a:	e7d9      	b.n	800b950 <_fflush_r+0xc>
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <_fflush_r+0x70>)
 800b99e:	429c      	cmp	r4, r3
 800b9a0:	d101      	bne.n	800b9a6 <_fflush_r+0x62>
 800b9a2:	68ac      	ldr	r4, [r5, #8]
 800b9a4:	e7df      	b.n	800b966 <_fflush_r+0x22>
 800b9a6:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <_fflush_r+0x74>)
 800b9a8:	429c      	cmp	r4, r3
 800b9aa:	bf08      	it	eq
 800b9ac:	68ec      	ldreq	r4, [r5, #12]
 800b9ae:	e7da      	b.n	800b966 <_fflush_r+0x22>
 800b9b0:	0800c274 	.word	0x0800c274
 800b9b4:	0800c294 	.word	0x0800c294
 800b9b8:	0800c254 	.word	0x0800c254

0800b9bc <std>:
 800b9bc:	2300      	movs	r3, #0
 800b9be:	b510      	push	{r4, lr}
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9ca:	6083      	str	r3, [r0, #8]
 800b9cc:	8181      	strh	r1, [r0, #12]
 800b9ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b9d0:	81c2      	strh	r2, [r0, #14]
 800b9d2:	6183      	str	r3, [r0, #24]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	2208      	movs	r2, #8
 800b9d8:	305c      	adds	r0, #92	; 0x5c
 800b9da:	f7fd fba7 	bl	800912c <memset>
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <std+0x38>)
 800b9e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <std+0x3c>)
 800b9e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <std+0x40>)
 800b9e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <std+0x44>)
 800b9ec:	6224      	str	r4, [r4, #32]
 800b9ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0800bd0d 	.word	0x0800bd0d
 800b9f8:	0800bd2f 	.word	0x0800bd2f
 800b9fc:	0800bd67 	.word	0x0800bd67
 800ba00:	0800bd8b 	.word	0x0800bd8b

0800ba04 <_cleanup_r>:
 800ba04:	4901      	ldr	r1, [pc, #4]	; (800ba0c <_cleanup_r+0x8>)
 800ba06:	f000 b8af 	b.w	800bb68 <_fwalk_reent>
 800ba0a:	bf00      	nop
 800ba0c:	0800b945 	.word	0x0800b945

0800ba10 <__sfmoreglue>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	1e4a      	subs	r2, r1, #1
 800ba14:	2568      	movs	r5, #104	; 0x68
 800ba16:	4355      	muls	r5, r2
 800ba18:	460e      	mov	r6, r1
 800ba1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba1e:	f7ff fa87 	bl	800af30 <_malloc_r>
 800ba22:	4604      	mov	r4, r0
 800ba24:	b140      	cbz	r0, 800ba38 <__sfmoreglue+0x28>
 800ba26:	2100      	movs	r1, #0
 800ba28:	e9c0 1600 	strd	r1, r6, [r0]
 800ba2c:	300c      	adds	r0, #12
 800ba2e:	60a0      	str	r0, [r4, #8]
 800ba30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba34:	f7fd fb7a 	bl	800912c <memset>
 800ba38:	4620      	mov	r0, r4
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}

0800ba3c <__sfp_lock_acquire>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <__sfp_lock_acquire+0x8>)
 800ba3e:	f000 b8b3 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800ba42:	bf00      	nop
 800ba44:	200005e0 	.word	0x200005e0

0800ba48 <__sfp_lock_release>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__sfp_lock_release+0x8>)
 800ba4a:	f000 b8ae 	b.w	800bbaa <__retarget_lock_release_recursive>
 800ba4e:	bf00      	nop
 800ba50:	200005e0 	.word	0x200005e0

0800ba54 <__sinit_lock_acquire>:
 800ba54:	4801      	ldr	r0, [pc, #4]	; (800ba5c <__sinit_lock_acquire+0x8>)
 800ba56:	f000 b8a7 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	200005db 	.word	0x200005db

0800ba60 <__sinit_lock_release>:
 800ba60:	4801      	ldr	r0, [pc, #4]	; (800ba68 <__sinit_lock_release+0x8>)
 800ba62:	f000 b8a2 	b.w	800bbaa <__retarget_lock_release_recursive>
 800ba66:	bf00      	nop
 800ba68:	200005db 	.word	0x200005db

0800ba6c <__sinit>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	4604      	mov	r4, r0
 800ba70:	f7ff fff0 	bl	800ba54 <__sinit_lock_acquire>
 800ba74:	69a3      	ldr	r3, [r4, #24]
 800ba76:	b11b      	cbz	r3, 800ba80 <__sinit+0x14>
 800ba78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba7c:	f7ff bff0 	b.w	800ba60 <__sinit_lock_release>
 800ba80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba84:	6523      	str	r3, [r4, #80]	; 0x50
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <__sinit+0x68>)
 800ba88:	4a13      	ldr	r2, [pc, #76]	; (800bad8 <__sinit+0x6c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	bf04      	itt	eq
 800ba92:	2301      	moveq	r3, #1
 800ba94:	61a3      	streq	r3, [r4, #24]
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f820 	bl	800badc <__sfp>
 800ba9c:	6060      	str	r0, [r4, #4]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f81c 	bl	800badc <__sfp>
 800baa4:	60a0      	str	r0, [r4, #8]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f818 	bl	800badc <__sfp>
 800baac:	2200      	movs	r2, #0
 800baae:	60e0      	str	r0, [r4, #12]
 800bab0:	2104      	movs	r1, #4
 800bab2:	6860      	ldr	r0, [r4, #4]
 800bab4:	f7ff ff82 	bl	800b9bc <std>
 800bab8:	68a0      	ldr	r0, [r4, #8]
 800baba:	2201      	movs	r2, #1
 800babc:	2109      	movs	r1, #9
 800babe:	f7ff ff7d 	bl	800b9bc <std>
 800bac2:	68e0      	ldr	r0, [r4, #12]
 800bac4:	2202      	movs	r2, #2
 800bac6:	2112      	movs	r1, #18
 800bac8:	f7ff ff78 	bl	800b9bc <std>
 800bacc:	2301      	movs	r3, #1
 800bace:	61a3      	str	r3, [r4, #24]
 800bad0:	e7d2      	b.n	800ba78 <__sinit+0xc>
 800bad2:	bf00      	nop
 800bad4:	0800bed4 	.word	0x0800bed4
 800bad8:	0800ba05 	.word	0x0800ba05

0800badc <__sfp>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	4607      	mov	r7, r0
 800bae0:	f7ff ffac 	bl	800ba3c <__sfp_lock_acquire>
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <__sfp+0x84>)
 800bae6:	681e      	ldr	r6, [r3, #0]
 800bae8:	69b3      	ldr	r3, [r6, #24]
 800baea:	b913      	cbnz	r3, 800baf2 <__sfp+0x16>
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ffbd 	bl	800ba6c <__sinit>
 800baf2:	3648      	adds	r6, #72	; 0x48
 800baf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	d503      	bpl.n	800bb04 <__sfp+0x28>
 800bafc:	6833      	ldr	r3, [r6, #0]
 800bafe:	b30b      	cbz	r3, 800bb44 <__sfp+0x68>
 800bb00:	6836      	ldr	r6, [r6, #0]
 800bb02:	e7f7      	b.n	800baf4 <__sfp+0x18>
 800bb04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb08:	b9d5      	cbnz	r5, 800bb40 <__sfp+0x64>
 800bb0a:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <__sfp+0x88>)
 800bb0c:	60e3      	str	r3, [r4, #12]
 800bb0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb12:	6665      	str	r5, [r4, #100]	; 0x64
 800bb14:	f000 f847 	bl	800bba6 <__retarget_lock_init_recursive>
 800bb18:	f7ff ff96 	bl	800ba48 <__sfp_lock_release>
 800bb1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb24:	6025      	str	r5, [r4, #0]
 800bb26:	61a5      	str	r5, [r4, #24]
 800bb28:	2208      	movs	r2, #8
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb30:	f7fd fafc 	bl	800912c <memset>
 800bb34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb40:	3468      	adds	r4, #104	; 0x68
 800bb42:	e7d9      	b.n	800baf8 <__sfp+0x1c>
 800bb44:	2104      	movs	r1, #4
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7ff ff62 	bl	800ba10 <__sfmoreglue>
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	6030      	str	r0, [r6, #0]
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1d5      	bne.n	800bb00 <__sfp+0x24>
 800bb54:	f7ff ff78 	bl	800ba48 <__sfp_lock_release>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	e7ee      	b.n	800bb3c <__sfp+0x60>
 800bb5e:	bf00      	nop
 800bb60:	0800bed4 	.word	0x0800bed4
 800bb64:	ffff0001 	.word	0xffff0001

0800bb68 <_fwalk_reent>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	4688      	mov	r8, r1
 800bb70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb74:	2700      	movs	r7, #0
 800bb76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb7a:	f1b9 0901 	subs.w	r9, r9, #1
 800bb7e:	d505      	bpl.n	800bb8c <_fwalk_reent+0x24>
 800bb80:	6824      	ldr	r4, [r4, #0]
 800bb82:	2c00      	cmp	r4, #0
 800bb84:	d1f7      	bne.n	800bb76 <_fwalk_reent+0xe>
 800bb86:	4638      	mov	r0, r7
 800bb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8c:	89ab      	ldrh	r3, [r5, #12]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d907      	bls.n	800bba2 <_fwalk_reent+0x3a>
 800bb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb96:	3301      	adds	r3, #1
 800bb98:	d003      	beq.n	800bba2 <_fwalk_reent+0x3a>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	47c0      	blx	r8
 800bba0:	4307      	orrs	r7, r0
 800bba2:	3568      	adds	r5, #104	; 0x68
 800bba4:	e7e9      	b.n	800bb7a <_fwalk_reent+0x12>

0800bba6 <__retarget_lock_init_recursive>:
 800bba6:	4770      	bx	lr

0800bba8 <__retarget_lock_acquire_recursive>:
 800bba8:	4770      	bx	lr

0800bbaa <__retarget_lock_release_recursive>:
 800bbaa:	4770      	bx	lr

0800bbac <__swhatbuf_r>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	460e      	mov	r6, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	2900      	cmp	r1, #0
 800bbb6:	b096      	sub	sp, #88	; 0x58
 800bbb8:	4614      	mov	r4, r2
 800bbba:	461d      	mov	r5, r3
 800bbbc:	da07      	bge.n	800bbce <__swhatbuf_r+0x22>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	602b      	str	r3, [r5, #0]
 800bbc2:	89b3      	ldrh	r3, [r6, #12]
 800bbc4:	061a      	lsls	r2, r3, #24
 800bbc6:	d410      	bmi.n	800bbea <__swhatbuf_r+0x3e>
 800bbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbcc:	e00e      	b.n	800bbec <__swhatbuf_r+0x40>
 800bbce:	466a      	mov	r2, sp
 800bbd0:	f000 f902 	bl	800bdd8 <_fstat_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	dbf2      	blt.n	800bbbe <__swhatbuf_r+0x12>
 800bbd8:	9a01      	ldr	r2, [sp, #4]
 800bbda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbe2:	425a      	negs	r2, r3
 800bbe4:	415a      	adcs	r2, r3
 800bbe6:	602a      	str	r2, [r5, #0]
 800bbe8:	e7ee      	b.n	800bbc8 <__swhatbuf_r+0x1c>
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	2000      	movs	r0, #0
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	b016      	add	sp, #88	; 0x58
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}

0800bbf4 <__smakebuf_r>:
 800bbf4:	898b      	ldrh	r3, [r1, #12]
 800bbf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf8:	079d      	lsls	r5, r3, #30
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	d507      	bpl.n	800bc10 <__smakebuf_r+0x1c>
 800bc00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	6163      	str	r3, [r4, #20]
 800bc0c:	b002      	add	sp, #8
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	ab01      	add	r3, sp, #4
 800bc12:	466a      	mov	r2, sp
 800bc14:	f7ff ffca 	bl	800bbac <__swhatbuf_r>
 800bc18:	9900      	ldr	r1, [sp, #0]
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff f987 	bl	800af30 <_malloc_r>
 800bc22:	b948      	cbnz	r0, 800bc38 <__smakebuf_r+0x44>
 800bc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d4ef      	bmi.n	800bc0c <__smakebuf_r+0x18>
 800bc2c:	f023 0303 	bic.w	r3, r3, #3
 800bc30:	f043 0302 	orr.w	r3, r3, #2
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	e7e3      	b.n	800bc00 <__smakebuf_r+0xc>
 800bc38:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <__smakebuf_r+0x7c>)
 800bc3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	6020      	str	r0, [r4, #0]
 800bc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	9b00      	ldr	r3, [sp, #0]
 800bc48:	6163      	str	r3, [r4, #20]
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	6120      	str	r0, [r4, #16]
 800bc4e:	b15b      	cbz	r3, 800bc68 <__smakebuf_r+0x74>
 800bc50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc54:	4630      	mov	r0, r6
 800bc56:	f000 f8d1 	bl	800bdfc <_isatty_r>
 800bc5a:	b128      	cbz	r0, 800bc68 <__smakebuf_r+0x74>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	f043 0301 	orr.w	r3, r3, #1
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	89a0      	ldrh	r0, [r4, #12]
 800bc6a:	4305      	orrs	r5, r0
 800bc6c:	81a5      	strh	r5, [r4, #12]
 800bc6e:	e7cd      	b.n	800bc0c <__smakebuf_r+0x18>
 800bc70:	0800ba05 	.word	0x0800ba05

0800bc74 <_malloc_usable_size_r>:
 800bc74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc78:	1f18      	subs	r0, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbc      	itt	lt
 800bc7e:	580b      	ldrlt	r3, [r1, r0]
 800bc80:	18c0      	addlt	r0, r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <_raise_r>:
 800bc84:	291f      	cmp	r1, #31
 800bc86:	b538      	push	{r3, r4, r5, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	460d      	mov	r5, r1
 800bc8c:	d904      	bls.n	800bc98 <_raise_r+0x14>
 800bc8e:	2316      	movs	r3, #22
 800bc90:	6003      	str	r3, [r0, #0]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc9a:	b112      	cbz	r2, 800bca2 <_raise_r+0x1e>
 800bc9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bca0:	b94b      	cbnz	r3, 800bcb6 <_raise_r+0x32>
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 f830 	bl	800bd08 <_getpid_r>
 800bca8:	462a      	mov	r2, r5
 800bcaa:	4601      	mov	r1, r0
 800bcac:	4620      	mov	r0, r4
 800bcae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb2:	f000 b817 	b.w	800bce4 <_kill_r>
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d00a      	beq.n	800bcd0 <_raise_r+0x4c>
 800bcba:	1c59      	adds	r1, r3, #1
 800bcbc:	d103      	bne.n	800bcc6 <_raise_r+0x42>
 800bcbe:	2316      	movs	r3, #22
 800bcc0:	6003      	str	r3, [r0, #0]
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e7e7      	b.n	800bc96 <_raise_r+0x12>
 800bcc6:	2400      	movs	r4, #0
 800bcc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bccc:	4628      	mov	r0, r5
 800bcce:	4798      	blx	r3
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	e7e0      	b.n	800bc96 <_raise_r+0x12>

0800bcd4 <raise>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <raise+0xc>)
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f7ff bfd3 	b.w	800bc84 <_raise_r>
 800bcde:	bf00      	nop
 800bce0:	200000c0 	.word	0x200000c0

0800bce4 <_kill_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d07      	ldr	r5, [pc, #28]	; (800bd04 <_kill_r+0x20>)
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	f7f6 fa25 	bl	8002140 <_kill>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d102      	bne.n	800bd00 <_kill_r+0x1c>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b103      	cbz	r3, 800bd00 <_kill_r+0x1c>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
 800bd02:	bf00      	nop
 800bd04:	200005d4 	.word	0x200005d4

0800bd08 <_getpid_r>:
 800bd08:	f7f6 ba12 	b.w	8002130 <_getpid>

0800bd0c <__sread>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	460c      	mov	r4, r1
 800bd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd14:	f000 f894 	bl	800be40 <_read_r>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	bfab      	itete	ge
 800bd1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd1e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd20:	181b      	addge	r3, r3, r0
 800bd22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd26:	bfac      	ite	ge
 800bd28:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd2a:	81a3      	strhlt	r3, [r4, #12]
 800bd2c:	bd10      	pop	{r4, pc}

0800bd2e <__swrite>:
 800bd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd32:	461f      	mov	r7, r3
 800bd34:	898b      	ldrh	r3, [r1, #12]
 800bd36:	05db      	lsls	r3, r3, #23
 800bd38:	4605      	mov	r5, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	4616      	mov	r6, r2
 800bd3e:	d505      	bpl.n	800bd4c <__swrite+0x1e>
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	2302      	movs	r3, #2
 800bd46:	2200      	movs	r2, #0
 800bd48:	f000 f868 	bl	800be1c <_lseek_r>
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd56:	81a3      	strh	r3, [r4, #12]
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	f000 b817 	b.w	800bd94 <_write_r>

0800bd66 <__sseek>:
 800bd66:	b510      	push	{r4, lr}
 800bd68:	460c      	mov	r4, r1
 800bd6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd6e:	f000 f855 	bl	800be1c <_lseek_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	bf15      	itete	ne
 800bd78:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd82:	81a3      	strheq	r3, [r4, #12]
 800bd84:	bf18      	it	ne
 800bd86:	81a3      	strhne	r3, [r4, #12]
 800bd88:	bd10      	pop	{r4, pc}

0800bd8a <__sclose>:
 800bd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8e:	f000 b813 	b.w	800bdb8 <_close_r>
	...

0800bd94 <_write_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d07      	ldr	r5, [pc, #28]	; (800bdb4 <_write_r+0x20>)
 800bd98:	4604      	mov	r4, r0
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	2200      	movs	r2, #0
 800bda0:	602a      	str	r2, [r5, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f7f6 fa03 	bl	80021ae <_write>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_write_r+0x1e>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_write_r+0x1e>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	200005d4 	.word	0x200005d4

0800bdb8 <_close_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d06      	ldr	r5, [pc, #24]	; (800bdd4 <_close_r+0x1c>)
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	f7f6 fa0f 	bl	80021e6 <_close>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_close_r+0x1a>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_close_r+0x1a>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	200005d4 	.word	0x200005d4

0800bdd8 <_fstat_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	; (800bdf8 <_fstat_r+0x20>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	4611      	mov	r1, r2
 800bde4:	602b      	str	r3, [r5, #0]
 800bde6:	f7f6 fa0a 	bl	80021fe <_fstat>
 800bdea:	1c43      	adds	r3, r0, #1
 800bdec:	d102      	bne.n	800bdf4 <_fstat_r+0x1c>
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	b103      	cbz	r3, 800bdf4 <_fstat_r+0x1c>
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	bf00      	nop
 800bdf8:	200005d4 	.word	0x200005d4

0800bdfc <_isatty_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d06      	ldr	r5, [pc, #24]	; (800be18 <_isatty_r+0x1c>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	f7f6 fa09 	bl	800221e <_isatty>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_isatty_r+0x1a>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_isatty_r+0x1a>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	200005d4 	.word	0x200005d4

0800be1c <_lseek_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_lseek_r+0x20>)
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	2200      	movs	r2, #0
 800be28:	602a      	str	r2, [r5, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f6 fa02 	bl	8002234 <_lseek>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_lseek_r+0x1e>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_lseek_r+0x1e>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	200005d4 	.word	0x200005d4

0800be40 <_read_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	; (800be60 <_read_r+0x20>)
 800be44:	4604      	mov	r4, r0
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	f7f6 f990 	bl	8002174 <_read>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_read_r+0x1e>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_read_r+0x1e>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	200005d4 	.word	0x200005d4

0800be64 <_init>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr

0800be70 <_fini>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	bf00      	nop
 800be74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be76:	bc08      	pop	{r3}
 800be78:	469e      	mov	lr, r3
 800be7a:	4770      	bx	lr
