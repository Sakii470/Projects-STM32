
BasicTimersAndConverters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ccc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08006f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200000e4  08007018  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007018  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b1c  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003322  00000000  00000000  00039c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8c8  00000000  00000000  0003f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018382  00000000  00000000  0006af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107259  00000000  00000000  000832ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c8  00000000  00000000  0018a578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e64 	.word	0x08006e64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	08006e64 	.word	0x08006e64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <SEG_Callback>:
	module &= 0x03;
	HAL_GPIO_WritePin(GPIOB, SEG_MOD_Msk, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, SEG_Module[module], GPIO_PIN_SET);
}

void SEG_Callback(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	static uint16_t SEG_Delay = 0;
	static uint32_t module = 0;
	if ((++SEG_Delay) == SEG_RefreshPeriodMs) {
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SEG_Callback+0x74>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <SEG_Callback+0x74>)
 80005a6:	801a      	strh	r2, [r3, #0]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <SEG_Callback+0x74>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	d12a      	bne.n	8000606 <SEG_Callback+0x6e>
		HAL_GPIO_WritePin(GPIOB, SEG_MOD_Msk, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	213c      	movs	r1, #60	; 0x3c
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <SEG_Callback+0x78>)
 80005b6:	f001 ff93 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, SEG_Msk, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f240 217f 	movw	r1, #639	; 0x27f
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <SEG_Callback+0x7c>)
 80005c2:	f001 ff8d 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, SEG_Value[module], GPIO_PIN_SET);
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <SEG_Callback+0x80>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <SEG_Callback+0x84>)
 80005cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <SEG_Callback+0x7c>)
 80005d6:	f001 ff83 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_Module[module++], GPIO_PIN_SET);
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <SEG_Callback+0x80>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	490d      	ldr	r1, [pc, #52]	; (8000618 <SEG_Callback+0x80>)
 80005e2:	600a      	str	r2, [r1, #0]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <SEG_Callback+0x88>)
 80005e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <SEG_Callback+0x78>)
 80005f0:	f001 ff76 	bl	80024e0 <HAL_GPIO_WritePin>
		SEG_Delay = 0;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SEG_Callback+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
		module &= 0x03;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <SEG_Callback+0x80>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <SEG_Callback+0x80>)
 8000604:	6013      	str	r3, [r2, #0]
	}
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000108 	.word	0x20000108
 8000610:	48000400 	.word	0x48000400
 8000614:	48001800 	.word	0x48001800
 8000618:	2000010c 	.word	0x2000010c
 800061c:	20000100 	.word	0x20000100
 8000620:	08006ea0 	.word	0x08006ea0

08000624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_DMA_Init+0x70>)
 800062c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <MX_DMA_Init+0x70>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6493      	str	r3, [r2, #72]	; 0x48
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_DMA_Init+0x70>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_DMA_Init+0x70>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_DMA_Init+0x70>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6493      	str	r3, [r2, #72]	; 0x48
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_DMA_Init+0x70>)
 8000650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	200d      	movs	r0, #13
 8000660:	f001 fb71 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000664:	200d      	movs	r0, #13
 8000666:	f001 fb8a 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2044      	movs	r0, #68	; 0x44
 8000670:	f001 fb69 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8000674:	2044      	movs	r0, #68	; 0x44
 8000676:	f001 fb82 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f001 fb61 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f001 fb7a 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <SW_SysTickCallback>:

int8_t SW_GetVertical(void) {
	return SwVertical;
}

void SW_SysTickCallback(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	static uint32_t tick = SW_RefreshPeriodMs;
	static SW_State SwStateNew = SW_NULL;
	if (tick == 0) {
 800069e:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <SW_SysTickCallback+0x11c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d17d      	bne.n	80007a2 <SW_SysTickCallback+0x10a>
		tick = SW_RefreshPeriodMs;
 80006a6:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <SW_SysTickCallback+0x11c>)
 80006a8:	2214      	movs	r2, #20
 80006aa:	601a      	str	r2, [r3, #0]
		SwStateNew = SW_NULL;
 80006ac:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <SW_SysTickCallback+0x120>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < NELEMS(SWs); i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	e05f      	b.n	8000778 <SW_SysTickCallback+0xe0>
			if (HAL_GPIO_ReadPin(SWs[i].port, SWs[i].pin) == GPIO_PIN_RESET) {
 80006b8:	4a40      	ldr	r2, [pc, #256]	; (80007bc <SW_SysTickCallback+0x124>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006c0:	493e      	ldr	r1, [pc, #248]	; (80007bc <SW_SysTickCallback+0x124>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	440b      	add	r3, r1
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4610      	mov	r0, r2
 80006ce:	f001 feef 	bl	80024b0 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <SW_SysTickCallback+0xda>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d844      	bhi.n	8000768 <SW_SysTickCallback+0xd0>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <SW_SysTickCallback+0x4c>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	08000735 	.word	0x08000735
 80006e8:	0800074f 	.word	0x0800074f
 80006ec:	0800071b 	.word	0x0800071b
 80006f0:	08000701 	.word	0x08000701
 80006f4:	080006f9 	.word	0x080006f9
				switch (i) {
				case SW_OK:
					SwStateNew = SW_OK;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <SW_SysTickCallback+0x120>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	701a      	strb	r2, [r3, #0]
					break;
 80006fe:	e037      	b.n	8000770 <SW_SysTickCallback+0xd8>
				case SW_UP:
					SwStateNew = SW_UP;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <SW_SysTickCallback+0x120>)
 8000702:	2203      	movs	r2, #3
 8000704:	701a      	strb	r2, [r3, #0]
					SwVertical++;
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <SW_SysTickCallback+0x128>)
 8000708:	f993 3000 	ldrsb.w	r3, [r3]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b25a      	sxtb	r2, r3
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <SW_SysTickCallback+0x128>)
 8000716:	701a      	strb	r2, [r3, #0]
					break;
 8000718:	e02a      	b.n	8000770 <SW_SysTickCallback+0xd8>
				case SW_DOWN:
					SwStateNew = SW_DOWN;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SW_SysTickCallback+0x120>)
 800071c:	2202      	movs	r2, #2
 800071e:	701a      	strb	r2, [r3, #0]
					SwVertical--;
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SW_SysTickCallback+0x128>)
 8000722:	f993 3000 	ldrsb.w	r3, [r3]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3b01      	subs	r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	b25a      	sxtb	r2, r3
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SW_SysTickCallback+0x128>)
 8000730:	701a      	strb	r2, [r3, #0]
					break;
 8000732:	e01d      	b.n	8000770 <SW_SysTickCallback+0xd8>
				case SW_RIGHT:
					SwStateNew = SW_RIGHT;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SW_SysTickCallback+0x120>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
					SwHorizontal++;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SW_SysTickCallback+0x12c>)
 800073c:	f993 3000 	ldrsb.w	r3, [r3]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	b25a      	sxtb	r2, r3
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <SW_SysTickCallback+0x12c>)
 800074a:	701a      	strb	r2, [r3, #0]
					break;
 800074c:	e010      	b.n	8000770 <SW_SysTickCallback+0xd8>
				case SW_LEFT:
					SwStateNew = SW_LEFT;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <SW_SysTickCallback+0x120>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
					SwHorizontal--;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <SW_SysTickCallback+0x12c>)
 8000756:	f993 3000 	ldrsb.w	r3, [r3]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3b01      	subs	r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	b25a      	sxtb	r2, r3
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <SW_SysTickCallback+0x12c>)
 8000764:	701a      	strb	r2, [r3, #0]
					break;
 8000766:	e003      	b.n	8000770 <SW_SysTickCallback+0xd8>
				default:
					SwStateNew = SW_NULL;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SW_SysTickCallback+0x120>)
 800076a:	2205      	movs	r2, #5
 800076c:	701a      	strb	r2, [r3, #0]
					break;
 800076e:	bf00      	nop
				}
				break;
 8000770:	e005      	b.n	800077e <SW_SysTickCallback+0xe6>
		for (uint32_t i = 0; i < NELEMS(SWs); i++) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3301      	adds	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b04      	cmp	r3, #4
 800077c:	d99c      	bls.n	80006b8 <SW_SysTickCallback+0x20>
			}
		}
		if (SwStateLast != SwStateNew) {
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <SW_SysTickCallback+0x130>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <SW_SysTickCallback+0x120>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d007      	beq.n	800079a <SW_SysTickCallback+0x102>
			SwStateLast = SwStateNew;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <SW_SysTickCallback+0x120>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <SW_SysTickCallback+0x130>)
 8000790:	701a      	strb	r2, [r3, #0]
			SwChange = 1;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <SW_SysTickCallback+0x134>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
			SwChange = 0;
		}
	} else {
		tick--;
	}
}
 8000798:	e008      	b.n	80007ac <SW_SysTickCallback+0x114>
			SwChange = 0;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <SW_SysTickCallback+0x134>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
}
 80007a0:	e004      	b.n	80007ac <SW_SysTickCallback+0x114>
		tick--;
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SW_SysTickCallback+0x11c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	4a02      	ldr	r2, [pc, #8]	; (80007b4 <SW_SysTickCallback+0x11c>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	20000030 	.word	0x20000030
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000112 	.word	0x20000112
 80007c4:	20000111 	.word	0x20000111
 80007c8:	20000028 	.word	0x20000028
 80007cc:	20000110 	.word	0x20000110

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <MX_GPIO_Init+0x208>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a7b      	ldr	r2, [pc, #492]	; (80009d8 <MX_GPIO_Init+0x208>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <MX_GPIO_Init+0x208>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b76      	ldr	r3, [pc, #472]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a75      	ldr	r2, [pc, #468]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b73      	ldr	r3, [pc, #460]	; (80009d8 <MX_GPIO_Init+0x208>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0320 	and.w	r3, r3, #32
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a6f      	ldr	r2, [pc, #444]	; (80009d8 <MX_GPIO_Init+0x208>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a69      	ldr	r2, [pc, #420]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <MX_GPIO_Init+0x208>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a63      	ldr	r2, [pc, #396]	; (80009d8 <MX_GPIO_Init+0x208>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a5d      	ldr	r2, [pc, #372]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b5b      	ldr	r3, [pc, #364]	; (80009d8 <MX_GPIO_Init+0x208>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000876:	f002 f813 	bl	80028a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <MX_GPIO_Init+0x208>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8000898:	4850      	ldr	r0, [pc, #320]	; (80009dc <MX_GPIO_Init+0x20c>)
 800089a:	f001 fe21 	bl	80024e0 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2104      	movs	r1, #4
 80008a2:	484f      	ldr	r0, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x210>)
 80008a4:	f001 fe1c 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 80008a8:	2200      	movs	r2, #0
 80008aa:	f242 013c 	movw	r1, #8252	; 0x203c
 80008ae:	484d      	ldr	r0, [pc, #308]	; (80009e4 <MX_GPIO_Init+0x214>)
 80008b0:	f001 fe16 	bl	80024e0 <HAL_GPIO_WritePin>
                          |SEG7_DIG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 80008b4:	2200      	movs	r2, #0
 80008b6:	f240 217f 	movw	r1, #639	; 0x27f
 80008ba:	484b      	ldr	r0, [pc, #300]	; (80009e8 <MX_GPIO_Init+0x218>)
 80008bc:	f001 fe10 	bl	80024e0 <HAL_GPIO_WritePin>
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 80008c0:	2200      	movs	r2, #0
 80008c2:	f24c 013b 	movw	r1, #49211	; 0xc03b
 80008c6:	4849      	ldr	r0, [pc, #292]	; (80009ec <MX_GPIO_Init+0x21c>)
 80008c8:	f001 fe0a 	bl	80024e0 <HAL_GPIO_WritePin>
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80008d2:	4847      	ldr	r0, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x220>)
 80008d4:	f001 fe04 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DOWN_Pin|SW_UP_Pin|SW_OK_Pin|SW_LEFT_Pin;
 80008d8:	f248 030e 	movw	r3, #32782	; 0x800e
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	483b      	ldr	r0, [pc, #236]	; (80009dc <MX_GPIO_Init+0x20c>)
 80008ee:	f001 fc4d 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 80008f2:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80008f6:	61fb      	str	r3, [r7, #28]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4834      	ldr	r0, [pc, #208]	; (80009dc <MX_GPIO_Init+0x20c>)
 800090c:	f001 fc3e 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	482e      	ldr	r0, [pc, #184]	; (80009e0 <MX_GPIO_Init+0x210>)
 8000928:	f001 fc30 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 800092c:	f242 033c 	movw	r3, #8252	; 0x203c
 8000930:	61fb      	str	r3, [r7, #28]
                          |SEG7_DIG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4827      	ldr	r0, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x214>)
 8000946:	f001 fc21 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 800094a:	f240 237f 	movw	r3, #639	; 0x27f
 800094e:	61fb      	str	r3, [r7, #28]
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0x218>)
 8000964:	f001 fc12 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8000968:	f24c 033b 	movw	r3, #49211	; 0xc03b
 800096c:	61fb      	str	r3, [r7, #28]
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000982:	f001 fc03 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000986:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_GPIO_Init+0x220>)
 80009a0:	f001 fbf4 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LSM303C_RDY_MAG_Pin|LSM303C_INT_ACC_Pin|LSM303C_INT_MAG_Pin|LM75_INT_Pin;
 80009a4:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x224>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x218>)
 80009ba:	f001 fbe7 	bl	800218c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f001 f9bf 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	f001 f9d8 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48001000 	.word	0x48001000
 80009e0:	48001400 	.word	0x48001400
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48001800 	.word	0x48001800
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48000800 	.word	0x48000800
 80009f4:	10210000 	.word	0x10210000

080009f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A60D20;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a34:	f001 fd8f 	bl	8002556 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 fc5d 	bl	80012fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a46:	f001 fe2f 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 fc54 	bl	80012fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a58:	f001 fe71 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fc4b 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001b8 	.word	0x200001b8
 8000a70:	40005400 	.word	0x40005400
 8000a74:	20a60d20 	.word	0x20a60d20

08000a78 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C3_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20A60D20;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <MX_I2C3_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 58;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a8a:	223a      	movs	r2, #58	; 0x3a
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_I2C3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C3_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C3_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_I2C3_Init+0x74>)
 8000ab4:	f001 fd4f 	bl	8002556 <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 fc1d 	bl	80012fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C3_Init+0x74>)
 8000ac6:	f001 fdef 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 fc14 	bl	80012fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2C3_Init+0x74>)
 8000ad8:	f001 fe31 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 fc0b 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000124 	.word	0x20000124
 8000af0:	40005c00 	.word	0x40005c00
 8000af4:	20a60d20 	.word	0x20a60d20

08000af8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	; 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	228c      	movs	r2, #140	; 0x8c
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 fd6d 	bl	80065f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a61      	ldr	r2, [pc, #388]	; (8000ca8 <HAL_I2C_MspInit+0x1b0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d146      	bne.n	8000bb6 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fcef 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f000 fbdc 	bl	80012fc <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a58      	ldr	r2, [pc, #352]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b56      	ldr	r3, [pc, #344]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000b5c:	f001 fea0 	bl	80028a0 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = LM75_I2C1_SDA_Pin|LM75_I2C1_SCL_Pin;
 8000b60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b84:	4619      	mov	r1, r3
 8000b86:	484a      	ldr	r0, [pc, #296]	; (8000cb0 <HAL_I2C_MspInit+0x1b8>)
 8000b88:	f001 fb00 	bl	800218c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	4a46      	ldr	r2, [pc, #280]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b96:	6593      	str	r3, [r2, #88]	; 0x58
 8000b98:	4b44      	ldr	r3, [pc, #272]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201f      	movs	r0, #31
 8000baa:	f001 f8cc 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bae:	201f      	movs	r0, #31
 8000bb0:	f001 f8e5 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bb4:	e074      	b.n	8000ca0 <HAL_I2C_MspInit+0x1a8>
  else if(i2cHandle->Instance==I2C3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <HAL_I2C_MspInit+0x1bc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d16f      	bne.n	8000ca0 <HAL_I2C_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fca2 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_I2C_MspInit+0xe6>
      Error_Handler();
 8000bda:	f000 fb8f 	bl	80012fc <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000bf6:	f001 fe53 	bl	80028a0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = LSM303C_I2C3_SCL_Pin|LSM303C_I2C3_SDA_Pin;
 8000bfa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c02:	2312      	movs	r3, #18
 8000c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <HAL_I2C_MspInit+0x1b8>)
 8000c22:	f001 fab3 	bl	800218c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_I2C_MspInit+0x1b4>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_I2C_MspInit+0x1c4>)
 8000c42:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c76:	f001 f8a3 	bl	8001dc0 <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_I2C_MspInit+0x18c>
      Error_Handler();
 8000c80:	f000 fb3c 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_I2C_MspInit+0x1c0>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2048      	movs	r0, #72	; 0x48
 8000c96:	f001 f856 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000c9a:	2048      	movs	r0, #72	; 0x48
 8000c9c:	f001 f86f 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8000ca0:	bf00      	nop
 8000ca2:	37b8      	adds	r7, #184	; 0xb8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48001800 	.word	0x48001800
 8000cb4:	40005c00 	.word	0x40005c00
 8000cb8:	20000170 	.word	0x20000170
 8000cbc:	40020030 	.word	0x40020030

08000cc0 <LCD_Write>:
};
// @formatter:on

/* Private function prototypes -----------------------------------------------*/
/* Private user code ---------------------------------------------------------*/
static void LCD_Write(uint8_t data) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	481a      	ldr	r0, [pc, #104]	; (8000d38 <LCD_Write+0x78>)
 8000cd0:	f001 fc06 	bl	80024e0 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < 8; ++i) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e016      	b.n	8000d08 <LCD_Write+0x48>
		HAL_GPIO_WritePin(LCD_IO[i].port, LCD_IO[i].pin, (data >> i) & 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <LCD_Write+0x7c>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <LCD_Write+0x7c>)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4413      	add	r3, r2
 8000cea:	8899      	ldrh	r1, [r3, #4]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	fa42 f303 	asr.w	r3, r2, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f001 fbef 	bl	80024e0 <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 8; ++i) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9e5      	bls.n	8000cda <LCD_Write+0x1a>
	}

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <LCD_Write+0x78>)
 8000d14:	f001 fbe4 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f000 ff15 	bl	8001b48 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <LCD_Write+0x78>)
 8000d24:	f001 fbdc 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f000 ff0d 	bl	8001b48 <HAL_Delay>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	48000c00 	.word	0x48000c00
 8000d3c:	20000034 	.word	0x20000034

08000d40 <LCD_Read>:

static uint8_t LCD_Read(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	uint8_t data;

	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2110      	movs	r1, #16
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <LCD_Read+0x78>)
 8000d4c:	f001 fbc8 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f000 fef9 	bl	8001b48 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4817      	ldr	r0, [pc, #92]	; (8000db8 <LCD_Read+0x78>)
 8000d5c:	f001 fbc0 	bl	80024e0 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < 8; ++i) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	e01a      	b.n	8000d9c <LCD_Read+0x5c>
		data |= ((uint8_t) HAL_GPIO_ReadPin(LCD_IO[i].port, LCD_IO[i].pin) << i);
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <LCD_Read+0x7c>)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d6e:	4913      	ldr	r1, [pc, #76]	; (8000dbc <LCD_Read+0x7c>)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	f001 fb98 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	71fb      	strb	r3, [r7, #7]
	for (uint32_t i = 0; i < 8; ++i) {
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9e1      	bls.n	8000d66 <LCD_Read+0x26>
	}
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2120      	movs	r1, #32
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <LCD_Read+0x78>)
 8000da8:	f001 fb9a 	bl	80024e0 <HAL_GPIO_WritePin>

	return data;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	48000c00 	.word	0x48000c00
 8000dbc:	20000034 	.word	0x20000034

08000dc0 <LCD_ReadStatus>:

static uint8_t LCD_ReadStatus(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
	unsigned char status = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]

	GPIO_InitStruct.Pin = LCD_D0_Pin | LCD_D1_Pin | LCD_D2_Pin | LCD_D3_Pin;
 8000dd6:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000dda:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4818      	ldr	r0, [pc, #96]	; (8000e44 <LCD_ReadStatus+0x84>)
 8000de2:	f001 f9d3 	bl	800218c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000de6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000dea:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4815      	ldr	r0, [pc, #84]	; (8000e48 <LCD_ReadStatus+0x88>)
 8000df2:	f001 f9cb 	bl	800218c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <LCD_ReadStatus+0x84>)
 8000dfc:	f001 fb70 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <LCD_ReadStatus+0x8c>)
 8000e06:	f001 fb6b 	bl	80024e0 <HAL_GPIO_WritePin>

	status = LCD_Read();
 8000e0a:	f7ff ff99 	bl	8000d40 <LCD_Read>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]

	GPIO_InitStruct.Pin = LCD_D0_Pin | LCD_D1_Pin | LCD_D2_Pin | LCD_D3_Pin;
 8000e1a:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000e1e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <LCD_ReadStatus+0x84>)
 8000e26:	f001 f9b1 	bl	800218c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000e2a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000e2e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <LCD_ReadStatus+0x88>)
 8000e36:	f001 f9a9 	bl	800218c <HAL_GPIO_Init>

	return status;
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	48001000 	.word	0x48001000
 8000e4c:	48001400 	.word	0x48001400

08000e50 <LCD_Cmd>:
/* Send command to LCD module */
static void LCD_Cmd(unsigned char cmd) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <LCD_Cmd+0x34>)
 8000e60:	f001 fb3e 	bl	80024e0 <HAL_GPIO_WritePin>
	LCD_Write(cmd);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff2a 	bl	8000cc0 <LCD_Write>

	while (LCD_ReadStatus() & 0x80)
 8000e6c:	bf00      	nop
 8000e6e:	f7ff ffa7 	bl	8000dc0 <LCD_ReadStatus>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dbf9      	blt.n	8000e6e <LCD_Cmd+0x1e>
		;
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48001400 	.word	0x48001400

08000e88 <LCD_Data>:

/* Send data to LCD module */
static void LCD_Data(uint8_t data) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2104      	movs	r1, #4
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <LCD_Data+0x34>)
 8000e98:	f001 fb22 	bl	80024e0 <HAL_GPIO_WritePin>
	LCD_Write(data);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff0e 	bl	8000cc0 <LCD_Write>

	while (LCD_ReadStatus() & 0x80)
 8000ea4:	bf00      	nop
 8000ea6:	f7ff ff8b 	bl	8000dc0 <LCD_ReadStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dbf9      	blt.n	8000ea6 <LCD_Data+0x1e>
		;
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	48001400 	.word	0x48001400

08000ec0 <LCD_BacklightOn>:

/* Activate Power Pin that supplies LCD module */
void LCD_BacklightOn(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BKL_GPIO_Port, LCD_BKL_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eca:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <LCD_BacklightOn+0x14>)
 8000ecc:	f001 fb08 	bl	80024e0 <HAL_GPIO_WritePin>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <LCD_Init>:
void LCD_Clear(void) {
	LCD_Cmd(HD44780_CLEAR);
}

/* Initializes HD44780 LCD module in 4-bit mode */
void LCD_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4816      	ldr	r0, [pc, #88]	; (8000f3c <LCD_Init+0x64>)
 8000ee2:	f001 fafd 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4815      	ldr	r0, [pc, #84]	; (8000f40 <LCD_Init+0x68>)
 8000eec:	f001 faf8 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(40); 		//
 8000ef0:	2028      	movs	r0, #40	; 0x28
 8000ef2:	f000 fe29 	bl	8001b48 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8000ef6:	2030      	movs	r0, #48	; 0x30
 8000ef8:	f7ff ffaa 	bl	8000e50 <LCD_Cmd>
	HAL_Delay(5); 		//
 8000efc:	2005      	movs	r0, #5
 8000efe:	f000 fe23 	bl	8001b48 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8000f02:	2030      	movs	r0, #48	; 0x30
 8000f04:	f7ff ffa4 	bl	8000e50 <LCD_Cmd>
	HAL_Delay(1); 		//
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 fe1d 	bl	8001b48 <HAL_Delay>
	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_8_BIT);
 8000f0e:	2030      	movs	r0, #48	; 0x30
 8000f10:	f7ff ff9e 	bl	8000e50 <LCD_Cmd>

	LCD_Cmd(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_8_BIT);
 8000f14:	2038      	movs	r0, #56	; 0x38
 8000f16:	f7ff ff9b 	bl	8000e50 <LCD_Cmd>
	LCD_Cmd(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff ff98 	bl	8000e50 <LCD_Cmd>
	LCD_Cmd(HD44780_CLEAR);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff ff95 	bl	8000e50 <LCD_Cmd>
	HAL_Delay(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f000 fe0e 	bl	8001b48 <HAL_Delay>
	LCD_Cmd(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff ff8f 	bl	8000e50 <LCD_Cmd>
	LCD_Cmd(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON);
 8000f32:	200c      	movs	r0, #12
 8000f34:	f7ff ff8c 	bl	8000e50 <LCD_Cmd>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48001400 	.word	0x48001400

08000f44 <LCD_GoTo>:

/* Set Cursor to a specified location given by row and column information
 * @param  Row Number (1 to 2)
 * @param  Column Number (1 to 16) Assuming a 2 X 16 characters display */
void LCD_GoTo(uint8_t row, uint8_t column) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	column--;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	71bb      	strb	r3, [r7, #6]
	switch (row) {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d002      	beq.n	8000f66 <LCD_GoTo+0x22>
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d009      	beq.n	8000f78 <LCD_GoTo+0x34>
	case 2:
		/* Set cursor to 2nd row address and add index*/
		LCD_Cmd(column |= 0x40 | 0x80);
		break;
	default:
		break;
 8000f64:	e011      	b.n	8000f8a <LCD_GoTo+0x46>
		LCD_Cmd(column |= 0x80);
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6c:	71bb      	strb	r3, [r7, #6]
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff6d 	bl	8000e50 <LCD_Cmd>
		break;
 8000f76:	e008      	b.n	8000f8a <LCD_GoTo+0x46>
		LCD_Cmd(column |= 0x40 | 0x80);
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000f7e:	71bb      	strb	r3, [r7, #6]
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff64 	bl	8000e50 <LCD_Cmd>
		break;
 8000f88:	bf00      	nop
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <LCD_WriteTextXY>:

/* Display a characters string */
void LCD_WriteTextXY(uint8_t *data, uint8_t len, uint8_t row, uint8_t col) {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70bb      	strb	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
	LCD_GoTo(row, col);
 8000fac:	787a      	ldrb	r2, [r7, #1]
 8000fae:	78bb      	ldrb	r3, [r7, #2]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffc6 	bl	8000f44 <LCD_GoTo>
	while (len-- > 0) {
 8000fb8:	e006      	b.n	8000fc8 <LCD_WriteTextXY+0x36>
		LCD_Data(*data++);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff60 	bl	8000e88 <LCD_Data>
	while (len-- > 0) {
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	70fa      	strb	r2, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f3      	bne.n	8000fba <LCD_WriteTextXY+0x28>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe2:	f000 fd3c 	bl	8001a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f8c3 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fea:	f7ff fbf1 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fee:	f7ff fb19 	bl	8000624 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ff2:	f000 fc1f 	bl	8001834 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000ff6:	f7ff fcff 	bl	80009f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000ffa:	f7ff fd3d 	bl	8000a78 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000ffe:	f000 fa7f 	bl	8001500 <MX_TIM4_Init>
  MX_TIM16_Init();
 8001002:	f000 fb0b 	bl	800161c <MX_TIM16_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 char lcd[16];
 LCD_Init();
 8001006:	f7ff ff67 	bl	8000ed8 <LCD_Init>
 LCD_BacklightOn();
 800100a:	f7ff ff59 	bl	8000ec0 <LCD_BacklightOn>
 HAL_TIM_Base_Start_IT(&htim16);
 800100e:	484d      	ldr	r0, [pc, #308]	; (8001144 <main+0x168>)
 8001010:	f002 ffa4 	bl	8003f5c <HAL_TIM_Base_Start_IT>
 HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	484b      	ldr	r0, [pc, #300]	; (8001144 <main+0x168>)
 8001018:	f003 f8d2 	bl	80041c0 <HAL_TIM_IC_Start_IT>
  while (1)
  {
	 if (update)
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <main+0x16c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0fb      	beq.n	800101c <main+0x40>
	 {
		 sprintf(lcd, "%d.%03d.%03d", (int) timeStamp.second,
 8001024:	4b49      	ldr	r3, [pc, #292]	; (800114c <main+0x170>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
				 (int) timeStamp.milisecond, (int) timeStamp.microsecond);
 800102a:	4b48      	ldr	r3, [pc, #288]	; (800114c <main+0x170>)
 800102c:	885b      	ldrh	r3, [r3, #2]
		 sprintf(lcd, "%d.%03d.%03d", (int) timeStamp.second,
 800102e:	4619      	mov	r1, r3
				 (int) timeStamp.milisecond, (int) timeStamp.microsecond);
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <main+0x170>)
 8001032:	889b      	ldrh	r3, [r3, #4]
		 sprintf(lcd, "%d.%03d.%03d", (int) timeStamp.second,
 8001034:	1d38      	adds	r0, r7, #4
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	460b      	mov	r3, r1
 800103a:	4945      	ldr	r1, [pc, #276]	; (8001150 <main+0x174>)
 800103c:	f005 fae4 	bl	8006608 <siprintf>
		 LCD_WriteTextXY((uint8_t*) lcd, strlen(lcd), 1, 1);
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f8d4 	bl	80001f0 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b2d9      	uxtb	r1, r3
 800104c:	1d38      	adds	r0, r7, #4
 800104e:	2301      	movs	r3, #1
 8001050:	2201      	movs	r2, #1
 8001052:	f7ff ff9e 	bl	8000f92 <LCD_WriteTextXY>

		 uint32_t diff = (uint32_t) timeStamp.second * 1000000 + timeStamp.milisecond * 1000 + timeStamp.microsecond;
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <main+0x170>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <main+0x178>)
 800105e:	fb03 f302 	mul.w	r3, r3, r2
 8001062:	4a3a      	ldr	r2, [pc, #232]	; (800114c <main+0x170>)
 8001064:	8852      	ldrh	r2, [r2, #2]
 8001066:	4611      	mov	r1, r2
 8001068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106c:	fb02 f201 	mul.w	r2, r2, r1
 8001070:	4413      	add	r3, r2
 8001072:	4a36      	ldr	r2, [pc, #216]	; (800114c <main+0x170>)
 8001074:	8892      	ldrh	r2, [r2, #4]
 8001076:	4413      	add	r3, r2
 8001078:	61fb      	str	r3, [r7, #28]
		 //przeliczam wszystko na mikrosekundy
		 diff -= ((uint32_t) timeBefore.second * 1000000 + timeBefore.milisecond * 1000 + timeBefore.microsecond);
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <main+0x17c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <main+0x178>)
 8001082:	fb03 f302 	mul.w	r3, r3, r2
 8001086:	4a34      	ldr	r2, [pc, #208]	; (8001158 <main+0x17c>)
 8001088:	8852      	ldrh	r2, [r2, #2]
 800108a:	4611      	mov	r1, r2
 800108c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001090:	fb02 f201 	mul.w	r2, r2, r1
 8001094:	4413      	add	r3, r2
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <main+0x17c>)
 8001098:	8892      	ldrh	r2, [r2, #4]
 800109a:	4413      	add	r3, r2
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	61fb      	str	r3, [r7, #28]
		 // zamiana na format mm:ss:milimili:mikromikro
		 uint16_t minutes = diff / (60 * 1000000);
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <main+0x180>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0a9b      	lsrs	r3, r3, #10
 80010ae:	837b      	strh	r3, [r7, #26]
		 diff = diff % (60 * 1000000);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	0a1a      	lsrs	r2, r3, #8
 80010b4:	4929      	ldr	r1, [pc, #164]	; (800115c <main+0x180>)
 80010b6:	fba1 1202 	umull	r1, r2, r1, r2
 80010ba:	0a92      	lsrs	r2, r2, #10
 80010bc:	4928      	ldr	r1, [pc, #160]	; (8001160 <main+0x184>)
 80010be:	fb01 f202 	mul.w	r2, r1, r2
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	61fb      	str	r3, [r7, #28]
		 uint16_t seconds = diff / 1000000;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <main+0x188>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	833b      	strh	r3, [r7, #24]
		 diff = diff % 1000000;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <main+0x188>)
 80010d6:	fba2 1203 	umull	r1, r2, r2, r3
 80010da:	0c92      	lsrs	r2, r2, #18
 80010dc:	491d      	ldr	r1, [pc, #116]	; (8001154 <main+0x178>)
 80010de:	fb01 f202 	mul.w	r2, r1, r2
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]
		 uint16_t milis = diff / 1000;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <main+0x18c>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	099b      	lsrs	r3, r3, #6
 80010f0:	82fb      	strh	r3, [r7, #22]
		 diff = diff % 1000;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <main+0x18c>)
 80010f6:	fba2 1203 	umull	r1, r2, r2, r3
 80010fa:	0992      	lsrs	r2, r2, #6
 80010fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001100:	fb01 f202 	mul.w	r2, r1, r2
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
		 uint16_t micros = diff;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	82bb      	strh	r3, [r7, #20]
		 sprintf(lcd, "%02d.%02d.%03d.%03d", (int) minutes, (int) seconds,
 800110c:	8b79      	ldrh	r1, [r7, #26]
 800110e:	8b3c      	ldrh	r4, [r7, #24]
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	1d38      	adds	r0, r7, #4
 8001116:	9201      	str	r2, [sp, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4623      	mov	r3, r4
 800111c:	460a      	mov	r2, r1
 800111e:	4913      	ldr	r1, [pc, #76]	; (800116c <main+0x190>)
 8001120:	f005 fa72 	bl	8006608 <siprintf>
		 				 (int) milis, (int) micros);
		 		 LCD_WriteTextXY((uint8_t*) lcd, strlen(lcd), 2, 1);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f862 	bl	80001f0 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b2d9      	uxtb	r1, r3
 8001130:	1d38      	adds	r0, r7, #4
 8001132:	2301      	movs	r3, #1
 8001134:	2202      	movs	r2, #2
 8001136:	f7ff ff2c 	bl	8000f92 <LCD_WriteTextXY>

		 update = RESET;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <main+0x16c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	 if (update)
 8001140:	e76c      	b.n	800101c <main+0x40>
 8001142:	bf00      	nop
 8001144:	20000260 	.word	0x20000260
 8001148:	20000116 	.word	0x20000116
 800114c:	20000204 	.word	0x20000204
 8001150:	08006e7c 	.word	0x08006e7c
 8001154:	000f4240 	.word	0x000f4240
 8001158:	2000020c 	.word	0x2000020c
 800115c:	011e54c7 	.word	0x011e54c7
 8001160:	03938700 	.word	0x03938700
 8001164:	431bde83 	.word	0x431bde83
 8001168:	10624dd3 	.word	0x10624dd3
 800116c:	08006e8c 	.word	0x08006e8c

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b096      	sub	sp, #88	; 0x58
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2244      	movs	r2, #68	; 0x44
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f005 fa3a 	bl	80065f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001196:	f001 fb2d 	bl	80027f4 <HAL_PWREx_ControlVoltageScaling>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011a0:	f000 f8ac 	bl	80012fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80011a4:	2318      	movs	r3, #24
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011bc:	2301      	movs	r3, #1
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011c4:	2328      	movs	r3, #40	; 0x28
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fb71 	bl	80028c0 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011e4:	f000 f88a 	bl	80012fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2303      	movs	r3, #3
 80011ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	2104      	movs	r1, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f001 ff83 	bl	800310c <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800120c:	f000 f876 	bl	80012fc <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3758      	adds	r7, #88	; 0x58
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	SEG_Callback();
 800121c:	f7ff f9bc 	bl	8000598 <SEG_Callback>
	SW_SysTickCallback();
 8001220:	f7ff fa3a 	bl	8000698 <SW_SysTickCallback>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d105      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x1e>
		second++;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001244:	801a      	strh	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40014400 	.word	0x40014400
 8001258:	20000114 	.word	0x20000114

0800125c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x88>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d135      	bne.n	80012da <HAL_TIM_IC_CaptureCallback+0x7e>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7f1b      	ldrb	r3, [r3, #28]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d131      	bne.n	80012da <HAL_TIM_IC_CaptureCallback+0x7e>
		{
			uint32_t microsecond = HAL_TIM_ReadCapturedValue(htim,
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f003 fc6d 	bl	8004b58 <HAL_TIM_ReadCapturedValue>
 800127e:	4602      	mov	r2, r0
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
					TIM_CHANNEL_1) *20;
			// zapisuje stan obecnego do timeBefore
			timeBefore.second = timeStamp.second;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x90>)
 8001290:	801a      	strh	r2, [r3, #0]
			timeBefore.milisecond = timeStamp.milisecond;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001294:	885a      	ldrh	r2, [r3, #2]
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x90>)
 8001298:	805a      	strh	r2, [r3, #2]
			timeBefore.microsecond = timeStamp.microsecond;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800129c:	889a      	ldrh	r2, [r3, #4]
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x90>)
 80012a0:	809a      	strh	r2, [r3, #4]
			// uaktualniam timeStamp
			timeStamp.second = second;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x94>)
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80012a8:	801a      	strh	r2, [r3, #0]
			timeStamp.milisecond = (uint16_t) (microsecond / 1000);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x98>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	099b      	lsrs	r3, r3, #6
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80012b8:	805a      	strh	r2, [r3, #2]
			timeStamp.microsecond = (uint16_t) (microsecond % 1000);
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x98>)
 80012be:	fba3 1302 	umull	r1, r3, r3, r2
 80012c2:	099b      	lsrs	r3, r3, #6
 80012c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80012d2:	809a      	strh	r2, [r3, #4]
			update = SET;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40014400 	.word	0x40014400
 80012e8:	20000204 	.word	0x20000204
 80012ec:	2000020c 	.word	0x2000020c
 80012f0:	20000114 	.word	0x20000114
 80012f4:	10624dd3 	.word	0x10624dd3
 80012f8:	20000116 	.word	0x20000116

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	; 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <HardFault_Handler+0x4>

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 fbd5 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800135e:	f000 fd28 	bl	8001db2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Channel3_IRQHandler+0x10>)
 800136e:	f000 fe5e 	bl	800202e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000170 	.word	0x20000170

0800137c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001382:	f003 f85f 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000260 	.word	0x20000260

08001390 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM4_IRQHandler+0x10>)
 8001396:	f003 f855 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000214 	.word	0x20000214

080013a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <I2C1_EV_IRQHandler+0x10>)
 80013aa:	f001 f963 	bl	8002674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001b8 	.word	0x200001b8

080013b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_D7_Pin);
 80013bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013c0:	f001 f8a6 	bl	8002510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM303C_INT_ACC_Pin);
 80013c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013c8:	f001 f8a2 	bl	8002510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM303C_INT_MAG_Pin);
 80013cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013d0:	f001 f89e 	bl	8002510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_OK_Pin);
 80013d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013d8:	f001 f89a 	bl	8002510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_tx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA2_Channel6_IRQHandler+0x10>)
 80013e6:	f000 fe22 	bl	800202e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000330 	.word	0x20000330

080013f4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA2_Channel7_IRQHandler+0x10>)
 80013fa:	f000 fe18 	bl	800202e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000378 	.word	0x20000378

08001408 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <LPUART1_IRQHandler+0x10>)
 800140e:	f004 fa4d 	bl	80058ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002ac 	.word	0x200002ac

0800141c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <I2C3_EV_IRQHandler+0x10>)
 8001422:	f001 f927 	bl	8002674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000124 	.word	0x20000124

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f005 f8a0 	bl	80065a4 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20040000 	.word	0x20040000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000118 	.word	0x20000118
 8001498:	200003d8 	.word	0x200003d8

0800149c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <SystemInit+0x5c>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <SystemInit+0x5c>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <SystemInit+0x60>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <SystemInit+0x60>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <SystemInit+0x60>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <SystemInit+0x60>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <SystemInit+0x60>)
 80014c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <SystemInit+0x60>)
 80014d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SystemInit+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <SystemInit+0x60>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SystemInit+0x60>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <MX_TIM4_Init+0x114>)
 8001534:	4a38      	ldr	r2, [pc, #224]	; (8001618 <MX_TIM4_Init+0x118>)
 8001536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_TIM4_Init+0x114>)
 800153a:	f240 321f 	movw	r2, #799	; 0x31f
 800153e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <MX_TIM4_Init+0x114>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <MX_TIM4_Init+0x114>)
 8001548:	2263      	movs	r2, #99	; 0x63
 800154a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_TIM4_Init+0x114>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <MX_TIM4_Init+0x114>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001558:	482e      	ldr	r0, [pc, #184]	; (8001614 <MX_TIM4_Init+0x114>)
 800155a:	f002 fca7 	bl	8003eac <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001564:	f7ff feca 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001572:	4619      	mov	r1, r3
 8001574:	4827      	ldr	r0, [pc, #156]	; (8001614 <MX_TIM4_Init+0x114>)
 8001576:	f003 fa29 	bl	80049cc <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001580:	f7ff febc 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <MX_TIM4_Init+0x114>)
 8001586:	f002 fd59 	bl	800403c <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001590:	f7ff feb4 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_TIM4_Init+0x114>)
 80015a4:	f004 f88e 	bl	80056c4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f7ff fea5 	bl	80012fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_TIM4_Init+0x114>)
 80015ca:	f003 f8ef 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015d4:	f7ff fe92 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2204      	movs	r2, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM4_Init+0x114>)
 80015e0:	f003 f8e4 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80015ea:	f7ff fe87 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2208      	movs	r2, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM4_Init+0x114>)
 80015f6:	f003 f8d9 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001600:	f7ff fe7c 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM4_Init+0x114>)
 8001606:	f000 f8bd 	bl	8001784 <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	; 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000214 	.word	0x20000214
 8001618:	40000800 	.word	0x40000800

0800161c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_TIM16_Init+0x90>)
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_TIM16_Init+0x94>)
 8001632:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1599;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM16_Init+0x90>)
 8001636:	f240 623f 	movw	r2, #1599	; 0x63f
 800163a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM16_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM16_Init+0x90>)
 8001644:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001648:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM16_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_TIM16_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM16_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <MX_TIM16_Init+0x90>)
 800165e:	f002 fc25 	bl	8003eac <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8001668:	f7ff fe48 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <MX_TIM16_Init+0x90>)
 800166e:	f002 fd46 	bl	80040fe <HAL_TIM_IC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001678:	f7ff fe40 	bl	80012fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800167c:	2302      	movs	r3, #2
 800167e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM16_Init+0x90>)
 8001694:	f002 fff5 	bl	8004682 <HAL_TIM_IC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 800169e:	f7ff fe2d 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000260 	.word	0x20000260
 80016b0:	40014400 	.word	0x40014400

080016b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_TIM_Base_MspInit+0xc0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d114      	bne.n	8001700 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	201e      	movs	r0, #30
 80016f4:	f000 fb27 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016f8:	201e      	movs	r0, #30
 80016fa:	f000 fb40 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80016fe:	e034      	b.n	800176a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_TIM_Base_MspInit+0xc8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12f      	bne.n	800176a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	6613      	str	r3, [r2, #96]	; 0x60
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_TIM_Base_MspInit+0xc4>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800174a:	230e      	movs	r3, #14
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <HAL_TIM_Base_MspInit+0xcc>)
 8001756:	f000 fd19 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2019      	movs	r0, #25
 8001760:	f000 faf1 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001764:	2019      	movs	r0, #25
 8001766:	f000 fb0a 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40000800 	.word	0x40000800
 8001778:	40021000 	.word	0x40021000
 800177c:	40014400 	.word	0x40014400
 8001780:	48001000 	.word	0x48001000

08001784 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_TIM_MspPostInit+0xa0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d139      	bne.n	800181a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_TIM_MspPostInit+0xa4>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017e8:	2302      	movs	r3, #2
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <HAL_TIM_MspPostInit+0xa8>)
 80017f4:	f000 fcca 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800180a:	2302      	movs	r3, #2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <HAL_TIM_MspPostInit+0xac>)
 8001816:	f000 fcb9 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40000800 	.word	0x40000800
 8001828:	40021000 	.word	0x40021000
 800182c:	48000c00 	.word	0x48000c00
 8001830:	48000400 	.word	0x48000400

08001834 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_LPUART1_UART_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_LPUART1_UART_Init+0x50>)
 8001872:	f003 ffcd 	bl	8005810 <HAL_UART_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800187c:	f7ff fd3e 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002ac 	.word	0x200002ac
 8001888:	40008000 	.word	0x40008000

0800188c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0ac      	sub	sp, #176	; 0xb0
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	228c      	movs	r2, #140	; 0x8c
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fea3 	bl	80065f8 <memset>
  if(uartHandle->Instance==LPUART1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_UART_MspInit+0x164>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	f040 8095 	bne.w	80019e8 <HAL_UART_MspInit+0x15c>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018be:	2320      	movs	r3, #32
 80018c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fe24 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018d6:	f7ff fd11 	bl	80012fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a3f      	ldr	r2, [pc, #252]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_UART_MspInit+0x168>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001922:	2308      	movs	r3, #8
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800192c:	4619      	mov	r1, r3
 800192e:	4832      	ldr	r0, [pc, #200]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 8001930:	f000 fc2c 	bl	800218c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001936:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001938:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_UART_MspInit+0x170>)
 800193c:	2204      	movs	r2, #4
 800193e:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_UART_MspInit+0x170>)
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_UART_MspInit+0x170>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 800196a:	4824      	ldr	r0, [pc, #144]	; (80019fc <HAL_UART_MspInit+0x170>)
 800196c:	f000 fa28 	bl	8001dc0 <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001976:	f7ff fcc1 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_UART_MspInit+0x170>)
 800197e:	671a      	str	r2, [r3, #112]	; 0x70
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART_TX Init */
    hdma_lpuart_tx.Instance = DMA2_Channel6;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_UART_MspInit+0x178>)
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_UART_MspInit+0x17c>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_lpuart_tx.Init.Request = DMA_REQUEST_4;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_UART_MspInit+0x178>)
 800198e:	2204      	movs	r2, #4
 8001990:	605a      	str	r2, [r3, #4]
    hdma_lpuart_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_UART_MspInit+0x178>)
 8001994:	2210      	movs	r2, #16
 8001996:	609a      	str	r2, [r3, #8]
    hdma_lpuart_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0x178>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    hdma_lpuart_tx.Init.MemInc = DMA_MINC_ENABLE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
    hdma_lpuart_tx.Init.Mode = DMA_NORMAL;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_tx) != HAL_OK)
 80019bc:	4811      	ldr	r0, [pc, #68]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019be:	f000 f9ff 	bl	8001dc0 <HAL_DMA_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80019c8:	f7ff fc98 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart_tx);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80019d2:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_UART_MspInit+0x178>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2046      	movs	r0, #70	; 0x46
 80019de:	f000 f9b2 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80019e2:	2046      	movs	r0, #70	; 0x46
 80019e4:	f000 f9cb 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	37b0      	adds	r7, #176	; 0xb0
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40008000 	.word	0x40008000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800
 80019fc:	20000378 	.word	0x20000378
 8001a00:	40020480 	.word	0x40020480
 8001a04:	20000330 	.word	0x20000330
 8001a08:	4002046c 	.word	0x4002046c

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff fd44 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a16:	e003      	b.n	8001a20 <LoopCopyDataInit>

08001a18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a1e:	3104      	adds	r1, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a28:	d3f6      	bcc.n	8001a18 <CopyDataInit>
	ldr	r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a2c:	e002      	b.n	8001a34 <LoopFillZerobss>

08001a2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a30:	f842 3b04 	str.w	r3, [r2], #4

08001a34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LoopForever+0x16>)
	cmp	r2, r3
 8001a36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a38:	d3f9      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f004 fdb9 	bl	80065b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff facd 	bl	8000fdc <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8001a48:	08006f34 	.word	0x08006f34
	ldr	r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a50:	200000e4 	.word	0x200000e4
	ldr	r2, =_sbss
 8001a54:	200000e4 	.word	0x200000e4
	ldr	r3, = _ebss
 8001a58:	200003d4 	.word	0x200003d4

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>

08001a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f961 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f000 f80e 	bl	8001a90 <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a80:	f7ff fc42 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_InitTick+0x70>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_InitTick+0x6c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f96d 	bl	8001d9a <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d809      	bhi.n	8001ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f937 	bl	8001d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_InitTick+0x74>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e007      	b.n	8001af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e004      	b.n	8001af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000007c 	.word	0x2000007c
 8001b00:	20000074 	.word	0x20000074
 8001b04:	20000078 	.word	0x20000078

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000007c 	.word	0x2000007c
 8001b2c:	200003c0 	.word	0x200003c0

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200003c0 	.word	0x200003c0

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000007c 	.word	0x2000007c

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001db6:	f7ff fa2f 	bl	8001218 <HAL_SYSTICK_Callback>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e098      	b.n	8001f04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <HAL_DMA_Init+0x150>)
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d80f      	bhi.n	8001dfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_DMA_Init+0x154>)
 8001de6:	4413      	add	r3, r2
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_DMA_Init+0x158>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	009a      	lsls	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_DMA_Init+0x15c>)
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001dfc:	e00e      	b.n	8001e1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_DMA_Init+0x160>)
 8001e06:	4413      	add	r3, r2
 8001e08:	4a43      	ldr	r2, [pc, #268]	; (8001f18 <HAL_DMA_Init+0x158>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	009a      	lsls	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a42      	ldr	r2, [pc, #264]	; (8001f24 <HAL_DMA_Init+0x164>)
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e76:	d039      	beq.n	8001eec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_DMA_Init+0x15c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11a      	bne.n	8001eb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_DMA_Init+0x168>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f003 031c 	and.w	r3, r3, #28
 8001e8e:	210f      	movs	r1, #15
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4924      	ldr	r1, [pc, #144]	; (8001f28 <HAL_DMA_Init+0x168>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_DMA_Init+0x168>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	f003 031c 	and.w	r3, r3, #28
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	491d      	ldr	r1, [pc, #116]	; (8001f28 <HAL_DMA_Init+0x168>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
 8001eb6:	e019      	b.n	8001eec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_DMA_Init+0x16c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f003 031c 	and.w	r3, r3, #28
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4917      	ldr	r1, [pc, #92]	; (8001f2c <HAL_DMA_Init+0x16c>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_DMA_Init+0x16c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 031c 	and.w	r3, r3, #28
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	4911      	ldr	r1, [pc, #68]	; (8001f2c <HAL_DMA_Init+0x16c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40020407 	.word	0x40020407
 8001f14:	bffdfff8 	.word	0xbffdfff8
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	bffdfbf8 	.word	0xbffdfbf8
 8001f24:	40020400 	.word	0x40020400
 8001f28:	400200a8 	.word	0x400200a8
 8001f2c:	400204a8 	.word	0x400204a8

08001f30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e022      	b.n	8001fa0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 020e 	bic.w	r2, r2, #14
 8001f68:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f003 021c 	and.w	r2, r3, #28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d005      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e029      	b.n	8002024 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 020e 	bic.w	r2, r2, #14
 8001fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 021c 	and.w	r2, r3, #28
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
    }
  }
  return status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f003 031c 	and.w	r3, r3, #28
 800204e:	2204      	movs	r2, #4
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d026      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x7a>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f003 021c 	and.w	r2, r3, #28
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2104      	movs	r1, #4
 8002090:	fa01 f202 	lsl.w	r2, r1, r2
 8002094:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	2b00      	cmp	r3, #0
 800209c:	d071      	beq.n	8002182 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020a6:	e06c      	b.n	8002182 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f003 031c 	and.w	r3, r3, #28
 80020b0:	2202      	movs	r2, #2
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02e      	beq.n	800211a <HAL_DMA_IRQHandler+0xec>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d029      	beq.n	800211a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 020a 	bic.w	r2, r2, #10
 80020e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f003 021c 	and.w	r2, r3, #28
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2102      	movs	r1, #2
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d038      	beq.n	8002182 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002118:	e033      	b.n	8002182 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f003 031c 	and.w	r3, r3, #28
 8002122:	2208      	movs	r2, #8
 8002124:	409a      	lsls	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d02a      	beq.n	8002184 <HAL_DMA_IRQHandler+0x156>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d025      	beq.n	8002184 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 020e 	bic.w	r2, r2, #14
 8002146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f003 021c 	and.w	r2, r3, #28
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f202 	lsl.w	r2, r1, r2
 800215a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002182:	bf00      	nop
 8002184:	bf00      	nop
}
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e166      	b.n	800246a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8158 	beq.w	8002464 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c8:	2b11      	cmp	r3, #17
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0xea>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b12      	cmp	r3, #18
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80b2 	beq.w	8002464 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 8002302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002304:	4a60      	ldr	r2, [pc, #384]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6613      	str	r3, [r2, #96]	; 0x60
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002318:	4a5c      	ldr	r2, [pc, #368]	; (800248c <HAL_GPIO_Init+0x300>)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002342:	d02b      	beq.n	800239c <HAL_GPIO_Init+0x210>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d025      	beq.n	8002398 <HAL_GPIO_Init+0x20c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_GPIO_Init+0x308>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01f      	beq.n	8002394 <HAL_GPIO_Init+0x208>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_GPIO_Init+0x30c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d019      	beq.n	8002390 <HAL_GPIO_Init+0x204>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4f      	ldr	r2, [pc, #316]	; (800249c <HAL_GPIO_Init+0x310>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x200>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_GPIO_Init+0x314>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1fc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4d      	ldr	r2, [pc, #308]	; (80024a4 <HAL_GPIO_Init+0x318>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1f8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x31c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1f4>
 800237c:	2307      	movs	r3, #7
 800237e:	e00e      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002380:	2308      	movs	r3, #8
 8002382:	e00c      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002384:	2306      	movs	r3, #6
 8002386:	e00a      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002388:	2305      	movs	r3, #5
 800238a:	e008      	b.n	800239e <HAL_GPIO_Init+0x212>
 800238c:	2304      	movs	r3, #4
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002390:	2303      	movs	r3, #3
 8002392:	e004      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002394:	2302      	movs	r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x212>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_Init+0x212>
 800239c:	2300      	movs	r3, #0
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	f002 0203 	and.w	r2, r2, #3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4093      	lsls	r3, r2
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ae:	4937      	ldr	r1, [pc, #220]	; (800248c <HAL_GPIO_Init+0x300>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023e0:	4a32      	ldr	r2, [pc, #200]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240a:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_GPIO_Init+0x320>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_GPIO_Init+0x320>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	f47f ae91 	bne.w	800219c <HAL_GPIO_Init+0x10>
  }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	48000c00 	.word	0x48000c00
 800249c:	48001000 	.word	0x48001000
 80024a0:	48001400 	.word	0x48001400
 80024a4:	48001800 	.word	0x48001800
 80024a8:	48001c00 	.word	0x48001c00
 80024ac:	40010400 	.word	0x40010400

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f806 	bl	8002540 <HAL_GPIO_EXTI_Callback>
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e081      	b.n	800266c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fabb 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2224      	movs	r2, #36	; 0x24
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d104      	bne.n	80025f0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002602:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002612:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	ea42 0103 	orr.w	r1, r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69d9      	ldr	r1, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
  }
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d138      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e032      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d139      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275e:	2302      	movs	r3, #2
 8002760:	e033      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d130      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d038      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2232      	movs	r2, #50	; 0x32
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	e002      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d102      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d110      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d007      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	20000074 	.word	0x20000074
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6053      	str	r3, [r2, #4]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 bc16 	b.w	8003100 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4ba0      	ldr	r3, [pc, #640]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028de:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80e4 	beq.w	8002abe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_RCC_OscConfig+0x4c>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f040 808b 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 8087 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290c:	4b92      	ldr	r3, [pc, #584]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x64>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e3ed      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCC_OscConfig+0x7e>
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293c:	e005      	b.n	800294a <HAL_RCC_OscConfig+0x8a>
 800293e:	4b86      	ldr	r3, [pc, #536]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	4293      	cmp	r3, r2
 800294c:	d223      	bcs.n	8002996 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fd80 	bl	8003458 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e3ce      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002962:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7c      	ldr	r2, [pc, #496]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4977      	ldr	r1, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002980:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	4972      	ldr	r1, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
 8002994:	e025      	b.n	80029e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002996:	4b70      	ldr	r3, [pc, #448]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6f      	ldr	r2, [pc, #444]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	496a      	ldr	r1, [pc, #424]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b4:	4b68      	ldr	r3, [pc, #416]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4965      	ldr	r1, [pc, #404]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd40 	bl	8003458 <RCC_SetFlashLatencyFromMSIRange>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e38e      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e2:	f000 fc75 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	495a      	ldr	r1, [pc, #360]	; (8002b5c <HAL_RCC_OscConfig+0x29c>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_OscConfig+0x2a0>)
 8002a00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a02:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f842 	bl	8001a90 <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d052      	beq.n	8002abc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	e372      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a22:	4b4d      	ldr	r3, [pc, #308]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a4c      	ldr	r2, [pc, #304]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff f87f 	bl	8001b30 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a36:	f7ff f87b 	bl	8001b30 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e35b      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	493a      	ldr	r1, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	4935      	ldr	r1, [pc, #212]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a32      	ldr	r2, [pc, #200]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a94:	f7ff f84c 	bl	8001b30 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9c:	f7ff f848 	bl	8001b30 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e328      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1dc>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d073      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x21c>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d10e      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d063      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d15f      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e305      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x24c>
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0x288>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x270>
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x288>
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_RCC_OscConfig+0x298>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe ffee 	bl	8001b30 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	e010      	b.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08006ea8 	.word	0x08006ea8
 8002b60:	20000074 	.word	0x20000074
 8002b64:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe ffe2 	bl	8001b30 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e2c2      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7a:	4baf      	ldr	r3, [pc, #700]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2a8>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe ffd2 	bl	8001b30 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe ffce 	bl	8001b30 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e2ae      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba2:	4ba5      	ldr	r3, [pc, #660]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d0>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d060      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x310>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d116      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x328>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e28b      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b93      	ldr	r3, [pc, #588]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4990      	ldr	r1, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	e040      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d023      	beq.n	8002c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe ff8d 	bl	8001b30 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe ff89 	bl	8001b30 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e269      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	497c      	ldr	r1, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e018      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a79      	ldr	r2, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe ff69 	bl	8001b30 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe ff65 	bl	8001b30 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e245      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d03c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01c      	beq.n	8002cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c94:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9a:	4a67      	ldr	r2, [pc, #412]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe ff44 	bl	8001b30 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe ff40 	bl	8001b30 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e220      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <HAL_RCC_OscConfig+0x3ec>
 8002ccc:	e01b      	b.n	8002d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe ff27 	bl	8001b30 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe ff23 	bl	8001b30 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e203      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80a6 	beq.w	8002e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <HAL_RCC_OscConfig+0x57c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d118      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <HAL_RCC_OscConfig+0x57c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <HAL_RCC_OscConfig+0x57c>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d58:	f7fe feea 	bl	8001b30 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe fee6 	bl	8001b30 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1c6      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_RCC_OscConfig+0x57c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4d8>
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d96:	e024      	b.n	8002de2 <HAL_RCC_OscConfig+0x522>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d110      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x502>
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc0:	e00f      	b.n	8002de2 <HAL_RCC_OscConfig+0x522>
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f023 0304 	bic.w	r3, r3, #4
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fea1 	bl	8001b30 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fe9d 	bl	8001b30 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e17b      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ed      	beq.n	8002df2 <HAL_RCC_OscConfig+0x532>
 8002e16:	e01a      	b.n	8002e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fe8a 	bl	8001b30 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fe86 	bl	8001b30 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d906      	bls.n	8002e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e164      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e40:	4ba8      	ldr	r3, [pc, #672]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e8      	bne.n	8002e20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4ba3      	ldr	r3, [pc, #652]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4aa2      	ldr	r2, [pc, #648]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e74:	4b9b      	ldr	r3, [pc, #620]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7a:	4a9a      	ldr	r2, [pc, #616]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fe54 	bl	8001b30 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8c:	f7fe fe50 	bl	8001b30 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e130      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e9e:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <HAL_RCC_OscConfig+0x5cc>
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb4:	4a8b      	ldr	r2, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fe37 	bl	8001b30 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec6:	f7fe fe33 	bl	8001b30 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e113      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed8:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8107 	beq.w	80030fe <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 80cb 	bne.w	8003090 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002efa:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d12c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d123      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d113      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	3b01      	subs	r3, #1
 8002f62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d06d      	beq.n	8003044 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d068      	beq.n	8003040 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f7a:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0ba      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a55      	ldr	r2, [pc, #340]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f96:	f7fe fdcb 	bl	8001b30 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe fdc7 	bl	8001b30 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0a7      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_RCC_OscConfig+0x828>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd6:	0212      	lsls	r2, r2, #8
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0552      	lsls	r2, r2, #21
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	4311      	orrs	r1, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff6:	06d2      	lsls	r2, r2, #27
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	493a      	ldr	r1, [pc, #232]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003000:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800300c:	4b35      	ldr	r3, [pc, #212]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003018:	f7fe fd8a 	bl	8001b30 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fd86 	bl	8001b30 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e066      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303e:	e05e      	b.n	80030fe <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e05d      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d156      	bne.n	80030fe <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003068:	f7fe fd62 	bl	8001b30 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fd5e 	bl	8001b30 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e03e      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x7b0>
 800308e:	e036      	b.n	80030fe <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d031      	beq.n	80030fa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030b4:	f023 0303 	bic.w	r3, r3, #3
 80030b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fd31 	bl	8001b30 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e00c      	b.n	80030ec <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fd2d 	bl	8001b30 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d905      	bls.n	80030ec <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e00d      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x848>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ec      	bne.n	80030d2 <HAL_RCC_OscConfig+0x812>
 80030f8:	e001      	b.n	80030fe <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0c8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4961      	ldr	r1, [pc, #388]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d04c      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e09e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e092      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e086      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e07e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 0203 	bic.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	493f      	ldr	r1, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fe fcb3 	bl	8001b30 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fe fcaf 	bl	8001b30 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e066      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 020c 	and.w	r2, r3, #12
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d1eb      	bne.n	80031ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	492c      	ldr	r1, [pc, #176]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4924      	ldr	r1, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e036      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4918      	ldr	r1, [pc, #96]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4910      	ldr	r1, [pc, #64]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003282:	f000 f825 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490c      	ldr	r1, [pc, #48]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fbf2 	bl	8001a90 <HAL_InitTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80032b0:	7afb      	ldrb	r3, [r7, #11]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08006ea8 	.word	0x08006ea8
 80032c8:	20000074 	.word	0x20000074
 80032cc:	20000078 	.word	0x20000078

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11e      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d102      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d101      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d134      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0xa6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xac>
 8003374:	e005      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003378:	617b      	str	r3, [r7, #20]
      break;
 800337a:	e005      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	617b      	str	r3, [r7, #20]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	617b      	str	r3, [r7, #20]
      break;
 8003386:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	3301      	adds	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	fb02 f203 	mul.w	r2, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0e5b      	lsrs	r3, r3, #25
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	3301      	adds	r3, #1
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c8:	69bb      	ldr	r3, [r7, #24]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08006ec0 	.word	0x08006ec0
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000074 	.word	0x20000074

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	08006eb8 	.word	0x08006eb8

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003430:	f7ff ffda 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0adb      	lsrs	r3, r3, #11
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08006eb8 	.word	0x08006eb8

08003458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003470:	f7ff f9b2 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003474:	6178      	str	r0, [r7, #20]
 8003476:	e014      	b.n	80034a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a24      	ldr	r2, [pc, #144]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003490:	f7ff f9a2 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d10b      	bne.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d919      	bls.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2ba0      	cmp	r3, #160	; 0xa0
 80034b4:	d902      	bls.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b6:	2302      	movs	r3, #2
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e013      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034bc:	2301      	movs	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e010      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d902      	bls.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034c8:	2303      	movs	r3, #3
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e00a      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d102      	bne.n	80034da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d4:	2302      	movs	r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e004      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d101      	bne.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 0207 	bic.w	r2, r3, #7
 80034ec:	4909      	ldr	r1, [pc, #36]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d001      	beq.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	40022000 	.word	0x40022000

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003520:	2300      	movs	r3, #0
 8003522:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003524:	2300      	movs	r3, #0
 8003526:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003530:	2b00      	cmp	r3, #0
 8003532:	d041      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353c:	d02a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800353e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003542:	d824      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800354a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800354e:	d81e      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d010      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800355a:	e018      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800355c:	4b86      	ldr	r3, [pc, #536]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a85      	ldr	r2, [pc, #532]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003568:	e015      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f000 facd 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800357a:	e00c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3320      	adds	r3, #32
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fbb6 	bl	8003cf4 <RCCEx_PLLSAI2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	74fb      	strb	r3, [r7, #19]
      break;
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359c:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035aa:	4973      	ldr	r1, [pc, #460]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d041      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035cc:	d02a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d2:	d824      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035de:	d81e      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e8:	d010      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ea:	e018      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ec:	4b62      	ldr	r3, [pc, #392]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a61      	ldr	r2, [pc, #388]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035f8:	e015      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fa85 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800360a:	e00c      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3320      	adds	r3, #32
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fb6e 	bl	8003cf4 <RCCEx_PLLSAI2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	74fb      	strb	r3, [r7, #19]
      break;
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800362c:	4b52      	ldr	r3, [pc, #328]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	494f      	ldr	r1, [pc, #316]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003642:	e001      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a0 	beq.w	8003796 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	4a40      	ldr	r2, [pc, #256]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
 800367c:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003688:	2301      	movs	r3, #1
 800368a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3a      	ldr	r2, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003698:	f7fe fa4a 	bl	8001b30 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800369e:	e009      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a0:	f7fe fa46 	bl	8001b30 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	74fb      	strb	r3, [r7, #19]
        break;
 80036b2:	e005      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036b4:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ef      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d15c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036c6:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d019      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f0:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	4a20      	ldr	r2, [pc, #128]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe fa05 	bl	8001b30 <HAL_GetTick>
 8003726:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003728:	e00b      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe fa01 	bl	8001b30 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d902      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	74fb      	strb	r3, [r7, #19]
            break;
 8003740:	e006      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ec      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800376e:	e009      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	74bb      	strb	r3, [r7, #18]
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003784:	7c7b      	ldrb	r3, [r7, #17]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4ba6      	ldr	r3, [pc, #664]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4aa5      	ldr	r2, [pc, #660]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a2:	4ba0      	ldr	r3, [pc, #640]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f023 0203 	bic.w	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	499c      	ldr	r1, [pc, #624]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c4:	4b97      	ldr	r3, [pc, #604]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 020c 	bic.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	4994      	ldr	r1, [pc, #592]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e6:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	498b      	ldr	r1, [pc, #556]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003808:	4b86      	ldr	r3, [pc, #536]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4983      	ldr	r1, [pc, #524]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800382a:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	497a      	ldr	r1, [pc, #488]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384c:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4972      	ldr	r1, [pc, #456]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	4969      	ldr	r1, [pc, #420]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389e:	4961      	ldr	r1, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b2:	4b5c      	ldr	r3, [pc, #368]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	4958      	ldr	r1, [pc, #352]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	4950      	ldr	r1, [pc, #320]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f6:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800391a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	493f      	ldr	r1, [pc, #252]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d028      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d106      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800395a:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a31      	ldr	r2, [pc, #196]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003964:	60d3      	str	r3, [r2, #12]
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003970:	d10c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f8c9 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003998:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	491f      	ldr	r1, [pc, #124]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f89a 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a04:	4907      	ldr	r1, [pc, #28]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d108      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a16:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a02      	ldr	r2, [pc, #8]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e013      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f869 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02f      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a66:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a76:	d10d      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f846 	bl	8003b10 <RCCEx_PLLSAI1_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	74bb      	strb	r3, [r7, #18]
 8003a92:	e011      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3320      	adds	r3, #32
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f925 	bl	8003cf4 <RCCEx_PLLSAI2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad4:	490d      	ldr	r1, [pc, #52]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000

08003b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b1e:	4b74      	ldr	r3, [pc, #464]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b2a:	4b71      	ldr	r3, [pc, #452]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0203 	and.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d10d      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b42:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
       ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d047      	beq.n	8003be6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e044      	b.n	8003be6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d018      	beq.n	8003b96 <RCCEx_PLLSAI1_Config+0x86>
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d825      	bhi.n	8003bb4 <RCCEx_PLLSAI1_Config+0xa4>
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <RCCEx_PLLSAI1_Config+0x62>
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d009      	beq.n	8003b84 <RCCEx_PLLSAI1_Config+0x74>
 8003b70:	e020      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11d      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e01a      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b84:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e013      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b96:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba2:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb2:	e006      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e004      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bca:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	430b      	orrs	r3, r1
 8003be0:	4943      	ldr	r1, [pc, #268]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d17c      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3f      	ldr	r2, [pc, #252]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fd ff9a 	bl	8001b30 <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bfe:	e009      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c00:	f7fd ff96 	bl	8001b30 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d902      	bls.n	8003c14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
        break;
 8003c12:	e005      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ef      	bne.n	8003c00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d15f      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d110      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c2c:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6892      	ldr	r2, [r2, #8]
 8003c3c:	0211      	lsls	r1, r2, #8
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	06d2      	lsls	r2, r2, #27
 8003c44:	430a      	orrs	r2, r1
 8003c46:	492a      	ldr	r1, [pc, #168]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	610b      	str	r3, [r1, #16]
 8003c4c:	e027      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d112      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c54:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6892      	ldr	r2, [r2, #8]
 8003c64:	0211      	lsls	r1, r2, #8
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6912      	ldr	r2, [r2, #16]
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	430a      	orrs	r2, r1
 8003c72:	491f      	ldr	r1, [pc, #124]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	610b      	str	r3, [r1, #16]
 8003c78:	e011      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	0211      	lsls	r1, r2, #8
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6952      	ldr	r2, [r2, #20]
 8003c90:	0852      	lsrs	r2, r2, #1
 8003c92:	3a01      	subs	r2, #1
 8003c94:	0652      	lsls	r2, r2, #25
 8003c96:	430a      	orrs	r2, r1
 8003c98:	4915      	ldr	r1, [pc, #84]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd ff41 	bl	8001b30 <HAL_GetTick>
 8003cae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb0:	e009      	b.n	8003cc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb2:	f7fd ff3d 	bl	8001b30 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d902      	bls.n	8003cc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cc4:	e005      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ef      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d02:	4b69      	ldr	r3, [pc, #420]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d0e:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d10d      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
       ||
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d26:	4b60      	ldr	r3, [pc, #384]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
       ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d047      	beq.n	8003dca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e044      	b.n	8003dca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d018      	beq.n	8003d7a <RCCEx_PLLSAI2_Config+0x86>
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d825      	bhi.n	8003d98 <RCCEx_PLLSAI2_Config+0xa4>
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <RCCEx_PLLSAI2_Config+0x62>
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d009      	beq.n	8003d68 <RCCEx_PLLSAI2_Config+0x74>
 8003d54:	e020      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11d      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d66:	e01a      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d68:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d116      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e013      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d86:	4b48      	ldr	r3, [pc, #288]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d96:	e006      	b.n	8003da6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e004      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dae:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	4938      	ldr	r1, [pc, #224]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d166      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fea8 	bl	8001b30 <HAL_GetTick>
 8003de0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de2:	e009      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de4:	f7fd fea4 	bl	8001b30 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	73fb      	strb	r3, [r7, #15]
        break;
 8003df6:	e005      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ef      	bne.n	8003de4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d149      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d110      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	0211      	lsls	r1, r2, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	06d2      	lsls	r2, r2, #27
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	614b      	str	r3, [r1, #20]
 8003e30:	e011      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	0211      	lsls	r1, r2, #8
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6912      	ldr	r2, [r2, #16]
 8003e48:	0852      	lsrs	r2, r2, #1
 8003e4a:	3a01      	subs	r2, #1
 8003e4c:	0652      	lsls	r2, r2, #25
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	4915      	ldr	r1, [pc, #84]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fd fe65 	bl	8001b30 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e68:	e009      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e6a:	f7fd fe61 	bl	8001b30 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d902      	bls.n	8003e7e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7c:	e005      	b.n	8003e8a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ef      	beq.n	8003e6a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e049      	b.n	8003f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fbee 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fe96 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e04f      	b.n	8004014 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d018      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0x76>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d115      	bne.n	8003ffe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d015      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fea:	d011      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffc:	e008      	b.n	8004010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e000      	b.n	8004012 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	00010007 	.word	0x00010007

0800403c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e049      	b.n	80040e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f841 	bl	80040ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fdce 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e049      	b.n	80041a4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f841 	bl	80041ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f000 fd6d 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <HAL_TIM_IC_Start_IT+0x1a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e023      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x62>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d104      	bne.n	80041ea <HAL_TIM_IC_Start_IT+0x2a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e01b      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x62>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d104      	bne.n	80041fa <HAL_TIM_IC_Start_IT+0x3a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e013      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x62>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0x4a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e00b      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x62>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b10      	cmp	r3, #16
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0x5a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e003      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x62>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_TIM_IC_Start_IT+0x74>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e013      	b.n	800425c <HAL_TIM_IC_Start_IT+0x9c>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d104      	bne.n	8004244 <HAL_TIM_IC_Start_IT+0x84>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e00b      	b.n	800425c <HAL_TIM_IC_Start_IT+0x9c>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b08      	cmp	r3, #8
 8004248:	d104      	bne.n	8004254 <HAL_TIM_IC_Start_IT+0x94>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e003      	b.n	800425c <HAL_TIM_IC_Start_IT+0x9c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800425a:	b2db      	uxtb	r3, r3
 800425c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004264:	7bbb      	ldrb	r3, [r7, #14]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0d8      	b.n	8004420 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_TIM_IC_Start_IT+0xbe>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	e023      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x106>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d104      	bne.n	800428e <HAL_TIM_IC_Start_IT+0xce>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	e01b      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x106>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_TIM_IC_Start_IT+0xde>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	e013      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x106>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_IC_Start_IT+0xee>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x106>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d104      	bne.n	80042be <HAL_TIM_IC_Start_IT+0xfe>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_IC_Start_IT+0x106>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_IC_Start_IT+0x116>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	e013      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x13e>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_IC_Start_IT+0x126>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x13e>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_IC_Start_IT+0x136>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f4:	e003      	b.n	80042fe <HAL_TIM_IC_Start_IT+0x13e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d841      	bhi.n	8004388 <HAL_TIM_IC_Start_IT+0x1c8>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_TIM_IC_Start_IT+0x14c>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004341 	.word	0x08004341
 8004310:	08004389 	.word	0x08004389
 8004314:	08004389 	.word	0x08004389
 8004318:	08004389 	.word	0x08004389
 800431c:	08004353 	.word	0x08004353
 8004320:	08004389 	.word	0x08004389
 8004324:	08004389 	.word	0x08004389
 8004328:	08004389 	.word	0x08004389
 800432c:	08004365 	.word	0x08004365
 8004330:	08004389 	.word	0x08004389
 8004334:	08004389 	.word	0x08004389
 8004338:	08004389 	.word	0x08004389
 800433c:	08004377 	.word	0x08004377
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0202 	orr.w	r2, r2, #2
 800434e:	60da      	str	r2, [r3, #12]
      break;
 8004350:	e01b      	b.n	800438a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0204 	orr.w	r2, r2, #4
 8004360:	60da      	str	r2, [r3, #12]
      break;
 8004362:	e012      	b.n	800438a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0208 	orr.w	r2, r2, #8
 8004372:	60da      	str	r2, [r3, #12]
      break;
 8004374:	e009      	b.n	800438a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0210 	orr.w	r2, r2, #16
 8004384:	60da      	str	r2, [r3, #12]
      break;
 8004386:	e000      	b.n	800438a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004388:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2201      	movs	r2, #1
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f970 	bl	8005678 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_TIM_IC_Start_IT+0x268>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01d      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d018      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_TIM_IC_Start_IT+0x26c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_TIM_IC_Start_IT+0x270>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <HAL_TIM_IC_Start_IT+0x274>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_TIM_IC_Start_IT+0x278>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIM_IC_Start_IT+0x21e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_TIM_IC_Start_IT+0x27c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d115      	bne.n	800440a <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_TIM_IC_Start_IT+0x280>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d015      	beq.n	800441c <HAL_TIM_IC_Start_IT+0x25c>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d011      	beq.n	800441c <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	e008      	b.n	800441c <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e000      	b.n	800441e <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40013400 	.word	0x40013400
 800443c:	40014000 	.word	0x40014000
 8004440:	00010007 	.word	0x00010007

08004444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fee8 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fba6 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fbad 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0204 	mvn.w	r2, #4
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc febe 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb7c 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb83 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b08      	cmp	r3, #8
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0208 	mvn.w	r2, #8
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fe94 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fb52 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb59 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b10      	cmp	r3, #16
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0210 	mvn.w	r2, #16
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2208      	movs	r2, #8
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fe6a 	bl	800125c <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fb28 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb2f 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fe30 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 f8fa 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d10e      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d107      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 f8ed 	bl	80057fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fadd 	bl	8004c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0220 	mvn.w	r2, #32
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 f8ad 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004698:	2302      	movs	r3, #2
 800469a:	e082      	b.n	80047a2 <HAL_TIM_IC_ConfigChannel+0x120>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11b      	bne.n	80046e2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f000 fe1f 	bl	80052fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699a      	ldr	r2, [r3, #24]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 020c 	bic.w	r2, r2, #12
 80046cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6999      	ldr	r1, [r3, #24]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]
 80046e0:	e05a      	b.n	8004798 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d11c      	bne.n	8004722 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f000 fe9d 	bl	8005436 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800470a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	e03a      	b.n	8004798 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f000 feea 	bl	8005510 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 020c 	bic.w	r2, r2, #12
 800474a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69d9      	ldr	r1, [r3, #28]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
 800475e:	e01b      	b.n	8004798 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f000 ff0a 	bl	8005588 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004782:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69d9      	ldr	r1, [r3, #28]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0fd      	b.n	80049c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b14      	cmp	r3, #20
 80047d2:	f200 80f0 	bhi.w	80049b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004831 	.word	0x08004831
 80047e0:	080049b7 	.word	0x080049b7
 80047e4:	080049b7 	.word	0x080049b7
 80047e8:	080049b7 	.word	0x080049b7
 80047ec:	08004871 	.word	0x08004871
 80047f0:	080049b7 	.word	0x080049b7
 80047f4:	080049b7 	.word	0x080049b7
 80047f8:	080049b7 	.word	0x080049b7
 80047fc:	080048b3 	.word	0x080048b3
 8004800:	080049b7 	.word	0x080049b7
 8004804:	080049b7 	.word	0x080049b7
 8004808:	080049b7 	.word	0x080049b7
 800480c:	080048f3 	.word	0x080048f3
 8004810:	080049b7 	.word	0x080049b7
 8004814:	080049b7 	.word	0x080049b7
 8004818:	080049b7 	.word	0x080049b7
 800481c:	08004935 	.word	0x08004935
 8004820:	080049b7 	.word	0x080049b7
 8004824:	080049b7 	.word	0x080049b7
 8004828:	080049b7 	.word	0x080049b7
 800482c:	08004975 	.word	0x08004975
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa8a 	bl	8004d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	619a      	str	r2, [r3, #24]
      break;
 800486e:	e0a3      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fafa 	bl	8004e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]
      break;
 80048b0:	e082      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fb63 	bl	8004f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0208 	orr.w	r2, r2, #8
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
      break;
 80048f0:	e062      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fbcb 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
      break;
 8004932:	e041      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fc14 	bl	8005168 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004972:	e021      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fc58 	bl	8005230 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b4:	e000      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80049b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_ConfigClockSource+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0b5      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x184>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d03e      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a26:	f200 8087 	bhi.w	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	f000 8085 	beq.w	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	d87f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d01a      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xa6>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d87b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d050      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d877      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d03c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d873      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d058      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x13a>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d86f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d064      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d86b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d060      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d867      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d05a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a70:	e062      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6899      	ldr	r1, [r3, #8]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f000 fdd9 	bl	8005638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e04e      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f000 fdc2 	bl	8005638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03b      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 fc80 	bl	80053d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	; 0x50
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd8f 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02b      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 fcdc 	bl	80054b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd7f 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fc60 	bl	80053d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd6f 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 fd66 	bl	8005602 <TIM_ITRx_SetConfig>
        break;
 8004b36:	e002      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b38:	bf00      	nop
 8004b3a:	e000      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004b3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d831      	bhi.n	8004bd0 <HAL_TIM_ReadCapturedValue+0x78>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bb3 	.word	0x08004bb3
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	60fb      	str	r3, [r7, #12]

      break;
 8004bb0:	e00f      	b.n	8004bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	60fb      	str	r3, [r7, #12]

      break;
 8004bba:	e00a      	b.n	8004bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	60fb      	str	r3, [r7, #12]

      break;
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	60fb      	str	r3, [r7, #12]

      break;
 8004bce:	e000      	b.n	8004bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004bd0:	bf00      	nop
  }

  return tmpreg;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a40      	ldr	r2, [pc, #256]	; (8004d30 <TIM_Base_SetConfig+0x114>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3d      	ldr	r2, [pc, #244]	; (8004d34 <TIM_Base_SetConfig+0x118>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3c      	ldr	r2, [pc, #240]	; (8004d38 <TIM_Base_SetConfig+0x11c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a3b      	ldr	r2, [pc, #236]	; (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3a      	ldr	r2, [pc, #232]	; (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <TIM_Base_SetConfig+0x114>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <TIM_Base_SetConfig+0x118>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <TIM_Base_SetConfig+0x11c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <TIM_Base_SetConfig+0x128>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <TIM_Base_SetConfig+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <TIM_Base_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00f      	beq.n	8004d14 <TIM_Base_SetConfig+0xf8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_Base_SetConfig+0xf8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <TIM_Base_SetConfig+0x128>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_Base_SetConfig+0xf8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a10      	ldr	r2, [pc, #64]	; (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0xf8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <TIM_Base_SetConfig+0x130>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d103      	bne.n	8004d1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	615a      	str	r2, [r3, #20]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0302 	bic.w	r3, r3, #2
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <TIM_OC1_SetConfig+0x10c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00f      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <TIM_OC1_SetConfig+0x110>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x80>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <TIM_OC1_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x80>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <TIM_OC1_SetConfig+0x118>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC1_SetConfig+0x80>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <TIM_OC1_SetConfig+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10c      	bne.n	8004dea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0308 	bic.w	r3, r3, #8
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <TIM_OC1_SetConfig+0x10c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_OC1_SetConfig+0xc2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <TIM_OC1_SetConfig+0x110>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_OC1_SetConfig+0xc2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <TIM_OC1_SetConfig+0x114>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_OC1_SetConfig+0xc2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <TIM_OC1_SetConfig+0x118>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC1_SetConfig+0xc2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <TIM_OC1_SetConfig+0x11c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d111      	bne.n	8004e36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800

08004e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0210 	bic.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0320 	bic.w	r3, r3, #32
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <TIM_OC2_SetConfig+0x100>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC2_SetConfig+0x6c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <TIM_OC2_SetConfig+0x104>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10d      	bne.n	8004ef8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <TIM_OC2_SetConfig+0x100>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00f      	beq.n	8004f20 <TIM_OC2_SetConfig+0xb0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <TIM_OC2_SetConfig+0x104>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_OC2_SetConfig+0xb0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <TIM_OC2_SetConfig+0x108>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_OC2_SetConfig+0xb0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <TIM_OC2_SetConfig+0x10c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC2_SetConfig+0xb0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <TIM_OC2_SetConfig+0x110>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d113      	bne.n	8004f48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_OC3_SetConfig+0xfc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC3_SetConfig+0x6a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_OC3_SetConfig+0x100>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <TIM_OC3_SetConfig+0xfc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_OC3_SetConfig+0xae>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <TIM_OC3_SetConfig+0x100>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_OC3_SetConfig+0xae>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1a      	ldr	r2, [pc, #104]	; (8005088 <TIM_OC3_SetConfig+0x104>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_OC3_SetConfig+0xae>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <TIM_OC3_SetConfig+0x108>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC3_SetConfig+0xae>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <TIM_OC3_SetConfig+0x10c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d113      	bne.n	800505a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	031b      	lsls	r3, r3, #12
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a18      	ldr	r2, [pc, #96]	; (8005154 <TIM_OC4_SetConfig+0xc0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_OC4_SetConfig+0x84>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <TIM_OC4_SetConfig+0xc4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_OC4_SetConfig+0x84>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <TIM_OC4_SetConfig+0xc8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_OC4_SetConfig+0x84>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <TIM_OC4_SetConfig+0xcc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC4_SetConfig+0x84>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a14      	ldr	r2, [pc, #80]	; (8005164 <TIM_OC4_SetConfig+0xd0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d109      	bne.n	800512c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	019b      	lsls	r3, r3, #6
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800

08005168 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a17      	ldr	r2, [pc, #92]	; (800521c <TIM_OC5_SetConfig+0xb4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_OC5_SetConfig+0x7a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a16      	ldr	r2, [pc, #88]	; (8005220 <TIM_OC5_SetConfig+0xb8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_OC5_SetConfig+0x7a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <TIM_OC5_SetConfig+0xbc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_OC5_SetConfig+0x7a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <TIM_OC5_SetConfig+0xc0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC5_SetConfig+0x7a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <TIM_OC5_SetConfig+0xc4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d109      	bne.n	80051f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	051b      	lsls	r3, r3, #20
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <TIM_OC6_SetConfig+0xb8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00f      	beq.n	80052ac <TIM_OC6_SetConfig+0x7c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <TIM_OC6_SetConfig+0xbc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_OC6_SetConfig+0x7c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <TIM_OC6_SetConfig+0xc0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_OC6_SetConfig+0x7c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_OC6_SetConfig+0xc4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC6_SetConfig+0x7c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_OC6_SetConfig+0xc8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <TIM_TI1_SetConfig+0xc4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d017      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d013      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <TIM_TI1_SetConfig+0xc8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <TIM_TI1_SetConfig+0xcc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_TI1_SetConfig+0xd0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <TIM_TI1_SetConfig+0xd4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_TI1_SetConfig+0x5e>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <TIM_TI1_SetConfig+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <TIM_TI1_SetConfig+0x62>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <TIM_TI1_SetConfig+0x64>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e003      	b.n	800537e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	b2db      	uxtb	r3, r3
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f023 030a 	bic.w	r3, r3, #10
 8005398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 030a 	and.w	r3, r3, #10
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000

080053d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f023 0210 	bic.w	r2, r3, #16
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	b29b      	uxth	r3, r3
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005488:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f023 0210 	bic.w	r2, r3, #16
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	031b      	lsls	r3, r3, #12
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 0303 	bic.w	r3, r3, #3
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	b2db      	uxtb	r3, r3
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	031b      	lsls	r3, r3, #12
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80055da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	031b      	lsls	r3, r3, #12
 80055e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1a      	ldr	r2, [r3, #32]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d8:	2302      	movs	r3, #2
 80056da:	e068      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d018      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e040      	b.n	80058a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc f82a 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa4e 	bl	8005cf0 <UART_SetConfig>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e022      	b.n	80058a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fccc 	bl	8006204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd53 	bl	8006348 <UART_CheckIdleState>
 80058a2:	4603      	mov	r3, r0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d113      	bne.n	8005904 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 81ce 	beq.w	8005c96 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
      }
      return;
 8005902:	e1c8      	b.n	8005c96 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80e3 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4ba6      	ldr	r3, [pc, #664]	; (8005bb4 <HAL_UART_IRQHandler+0x308>)
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80d8 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d010      	beq.n	800594e <HAL_UART_IRQHandler+0xa2>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <HAL_UART_IRQHandler+0xce>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2202      	movs	r2, #2
 8005968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005970:	f043 0204 	orr.w	r2, r3, #4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d010      	beq.n	80059a6 <HAL_UART_IRQHandler+0xfa>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2204      	movs	r2, #4
 8005994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599c:	f043 0202 	orr.w	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2208      	movs	r2, #8
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d2:	f043 0208 	orr.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <HAL_UART_IRQHandler+0x15e>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8142 	beq.w	8005c9a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d004      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d031      	beq.n	8005abe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fd39 	bl	80064d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d123      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a4b      	ldr	r2, [pc, #300]	; (8005bb8 <HAL_UART_IRQHandler+0x30c>)
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fc fa8a 	bl	8001fac <HAL_DMA_Abort_IT>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d017      	beq.n	8005ace <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	e00f      	b.n	8005ace <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f908 	bl	8005cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	e00b      	b.n	8005ace <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f904 	bl	8005cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e007      	b.n	8005ace <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f900 	bl	8005cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005acc:	e0e5      	b.n	8005c9a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ace:	bf00      	nop
    return;
 8005ad0:	e0e3      	b.n	8005c9a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f040 80a9 	bne.w	8005c2e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80a3 	beq.w	8005c2e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 809d 	beq.w	8005c2e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d158      	bne.n	8005bbc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80c1 	beq.w	8005c9e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b22:	893a      	ldrh	r2, [r7, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f080 80ba 	bcs.w	8005c9e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	893a      	ldrh	r2, [r7, #8]
 8005b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d12a      	bne.n	8005b98 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0210 	bic.w	r2, r2, #16
 8005b8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fc f9cc 	bl	8001f30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f893 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005bb2:	e074      	b.n	8005c9e <HAL_UART_IRQHandler+0x3f2>
 8005bb4:	04000120 	.word	0x04000120
 8005bb8:	08006531 	.word	0x08006531
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d063      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d060      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0210 	bic.w	r2, r2, #16
 8005c20:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f856 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c2c:	e039      	b.n	8005ca2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <HAL_UART_IRQHandler+0x3a8>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fc9e 	bl	800658e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c52:	e029      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01a      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
    }
    return;
 8005c78:	e015      	b.n	8005ca6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fc64 	bl	800655c <UART_EndTransmit_IT>
    return;
 8005c94:	e008      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005c96:	bf00      	nop
 8005c98:	e006      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005c9a:	bf00      	nop
 8005c9c:	e004      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005c9e:	bf00      	nop
 8005ca0:	e002      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005ca6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop

08005cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b5b0      	push	{r4, r5, r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4bad      	ldr	r3, [pc, #692]	; (8005fd0 <UART_SetConfig+0x2e0>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4aa2      	ldr	r2, [pc, #648]	; (8005fd4 <UART_SetConfig+0x2e4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a99      	ldr	r2, [pc, #612]	; (8005fd8 <UART_SetConfig+0x2e8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d121      	bne.n	8005dba <UART_SetConfig+0xca>
 8005d76:	4b99      	ldr	r3, [pc, #612]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d817      	bhi.n	8005db4 <UART_SetConfig+0xc4>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x9c>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005da3 	.word	0x08005da3
 8005d98:	08005daf 	.word	0x08005daf
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	76fb      	strb	r3, [r7, #27]
 8005da0:	e0e7      	b.n	8005f72 <UART_SetConfig+0x282>
 8005da2:	2302      	movs	r3, #2
 8005da4:	76fb      	strb	r3, [r7, #27]
 8005da6:	e0e4      	b.n	8005f72 <UART_SetConfig+0x282>
 8005da8:	2304      	movs	r3, #4
 8005daa:	76fb      	strb	r3, [r7, #27]
 8005dac:	e0e1      	b.n	8005f72 <UART_SetConfig+0x282>
 8005dae:	2308      	movs	r3, #8
 8005db0:	76fb      	strb	r3, [r7, #27]
 8005db2:	e0de      	b.n	8005f72 <UART_SetConfig+0x282>
 8005db4:	2310      	movs	r3, #16
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e0db      	b.n	8005f72 <UART_SetConfig+0x282>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a88      	ldr	r2, [pc, #544]	; (8005fe0 <UART_SetConfig+0x2f0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d132      	bne.n	8005e2a <UART_SetConfig+0x13a>
 8005dc4:	4b85      	ldr	r3, [pc, #532]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d828      	bhi.n	8005e24 <UART_SetConfig+0x134>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0xe8>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e13 	.word	0x08005e13
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e1f 	.word	0x08005e1f
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	76fb      	strb	r3, [r7, #27]
 8005e10:	e0af      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e12:	2302      	movs	r3, #2
 8005e14:	76fb      	strb	r3, [r7, #27]
 8005e16:	e0ac      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e0a9      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	76fb      	strb	r3, [r7, #27]
 8005e22:	e0a6      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e24:	2310      	movs	r3, #16
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e0a3      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a6d      	ldr	r2, [pc, #436]	; (8005fe4 <UART_SetConfig+0x2f4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d120      	bne.n	8005e76 <UART_SetConfig+0x186>
 8005e34:	4b69      	ldr	r3, [pc, #420]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d013      	beq.n	8005e6a <UART_SetConfig+0x17a>
 8005e42:	2b30      	cmp	r3, #48	; 0x30
 8005e44:	d814      	bhi.n	8005e70 <UART_SetConfig+0x180>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d009      	beq.n	8005e5e <UART_SetConfig+0x16e>
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d810      	bhi.n	8005e70 <UART_SetConfig+0x180>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <UART_SetConfig+0x168>
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d006      	beq.n	8005e64 <UART_SetConfig+0x174>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x180>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	76fb      	strb	r3, [r7, #27]
 8005e5c:	e089      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	76fb      	strb	r3, [r7, #27]
 8005e62:	e086      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e64:	2304      	movs	r3, #4
 8005e66:	76fb      	strb	r3, [r7, #27]
 8005e68:	e083      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	76fb      	strb	r3, [r7, #27]
 8005e6e:	e080      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e70:	2310      	movs	r3, #16
 8005e72:	76fb      	strb	r3, [r7, #27]
 8005e74:	e07d      	b.n	8005f72 <UART_SetConfig+0x282>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a5b      	ldr	r2, [pc, #364]	; (8005fe8 <UART_SetConfig+0x2f8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d120      	bne.n	8005ec2 <UART_SetConfig+0x1d2>
 8005e80:	4b56      	ldr	r3, [pc, #344]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e8c:	d013      	beq.n	8005eb6 <UART_SetConfig+0x1c6>
 8005e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e90:	d814      	bhi.n	8005ebc <UART_SetConfig+0x1cc>
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d009      	beq.n	8005eaa <UART_SetConfig+0x1ba>
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d810      	bhi.n	8005ebc <UART_SetConfig+0x1cc>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1b4>
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d006      	beq.n	8005eb0 <UART_SetConfig+0x1c0>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x1cc>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	76fb      	strb	r3, [r7, #27]
 8005ea8:	e063      	b.n	8005f72 <UART_SetConfig+0x282>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	76fb      	strb	r3, [r7, #27]
 8005eae:	e060      	b.n	8005f72 <UART_SetConfig+0x282>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	76fb      	strb	r3, [r7, #27]
 8005eb4:	e05d      	b.n	8005f72 <UART_SetConfig+0x282>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	76fb      	strb	r3, [r7, #27]
 8005eba:	e05a      	b.n	8005f72 <UART_SetConfig+0x282>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	76fb      	strb	r3, [r7, #27]
 8005ec0:	e057      	b.n	8005f72 <UART_SetConfig+0x282>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a49      	ldr	r2, [pc, #292]	; (8005fec <UART_SetConfig+0x2fc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d125      	bne.n	8005f18 <UART_SetConfig+0x228>
 8005ecc:	4b43      	ldr	r3, [pc, #268]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eda:	d017      	beq.n	8005f0c <UART_SetConfig+0x21c>
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d817      	bhi.n	8005f12 <UART_SetConfig+0x222>
 8005ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x210>
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d811      	bhi.n	8005f12 <UART_SetConfig+0x222>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <UART_SetConfig+0x20a>
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x216>
 8005ef8:	e00b      	b.n	8005f12 <UART_SetConfig+0x222>
 8005efa:	2300      	movs	r3, #0
 8005efc:	76fb      	strb	r3, [r7, #27]
 8005efe:	e038      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f00:	2302      	movs	r3, #2
 8005f02:	76fb      	strb	r3, [r7, #27]
 8005f04:	e035      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f06:	2304      	movs	r3, #4
 8005f08:	76fb      	strb	r3, [r7, #27]
 8005f0a:	e032      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	76fb      	strb	r3, [r7, #27]
 8005f10:	e02f      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f12:	2310      	movs	r3, #16
 8005f14:	76fb      	strb	r3, [r7, #27]
 8005f16:	e02c      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2d      	ldr	r2, [pc, #180]	; (8005fd4 <UART_SetConfig+0x2e4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d125      	bne.n	8005f6e <UART_SetConfig+0x27e>
 8005f22:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <UART_SetConfig+0x2ec>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f30:	d017      	beq.n	8005f62 <UART_SetConfig+0x272>
 8005f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f36:	d817      	bhi.n	8005f68 <UART_SetConfig+0x278>
 8005f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3c:	d00b      	beq.n	8005f56 <UART_SetConfig+0x266>
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d811      	bhi.n	8005f68 <UART_SetConfig+0x278>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <UART_SetConfig+0x260>
 8005f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4c:	d006      	beq.n	8005f5c <UART_SetConfig+0x26c>
 8005f4e:	e00b      	b.n	8005f68 <UART_SetConfig+0x278>
 8005f50:	2300      	movs	r3, #0
 8005f52:	76fb      	strb	r3, [r7, #27]
 8005f54:	e00d      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f56:	2302      	movs	r3, #2
 8005f58:	76fb      	strb	r3, [r7, #27]
 8005f5a:	e00a      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	76fb      	strb	r3, [r7, #27]
 8005f60:	e007      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f62:	2308      	movs	r3, #8
 8005f64:	76fb      	strb	r3, [r7, #27]
 8005f66:	e004      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	76fb      	strb	r3, [r7, #27]
 8005f6c:	e001      	b.n	8005f72 <UART_SetConfig+0x282>
 8005f6e:	2310      	movs	r3, #16
 8005f70:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <UART_SetConfig+0x2e4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	f040 8087 	bne.w	800608c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f7e:	7efb      	ldrb	r3, [r7, #27]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d837      	bhi.n	8005ff4 <UART_SetConfig+0x304>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0x29c>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005fb9 	.word	0x08005fb9
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	08005fbf 	.word	0x08005fbf
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005fc7 	.word	0x08005fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb0:	f7fd fa26 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8005fb4:	6178      	str	r0, [r7, #20]
        break;
 8005fb6:	e022      	b.n	8005ffe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <UART_SetConfig+0x300>)
 8005fba:	617b      	str	r3, [r7, #20]
        break;
 8005fbc:	e01f      	b.n	8005ffe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fd f987 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8005fc2:	6178      	str	r0, [r7, #20]
        break;
 8005fc4:	e01b      	b.n	8005ffe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fca:	617b      	str	r3, [r7, #20]
        break;
 8005fcc:	e017      	b.n	8005ffe <UART_SetConfig+0x30e>
 8005fce:	bf00      	nop
 8005fd0:	efff69f3 	.word	0xefff69f3
 8005fd4:	40008000 	.word	0x40008000
 8005fd8:	40013800 	.word	0x40013800
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40004400 	.word	0x40004400
 8005fe4:	40004800 	.word	0x40004800
 8005fe8:	40004c00 	.word	0x40004c00
 8005fec:	40005000 	.word	0x40005000
 8005ff0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	76bb      	strb	r3, [r7, #26]
        break;
 8005ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80f1 	beq.w	80061e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	4413      	add	r3, r2
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	429a      	cmp	r2, r3
 8006014:	d305      	bcc.n	8006022 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d902      	bls.n	8006028 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	76bb      	strb	r3, [r7, #26]
 8006026:	e0df      	b.n	80061e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4618      	mov	r0, r3
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	020b      	lsls	r3, r1, #8
 800603a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800603e:	0202      	lsls	r2, r0, #8
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6849      	ldr	r1, [r1, #4]
 8006044:	0849      	lsrs	r1, r1, #1
 8006046:	4608      	mov	r0, r1
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	1814      	adds	r4, r2, r0
 800604e:	eb43 0501 	adc.w	r5, r3, r1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	461a      	mov	r2, r3
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa f91e 	bl	80002a0 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006072:	d308      	bcc.n	8006086 <UART_SetConfig+0x396>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e0b0      	b.n	80061e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	76bb      	strb	r3, [r7, #26]
 800608a:	e0ad      	b.n	80061e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006094:	d15c      	bne.n	8006150 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006096:	7efb      	ldrb	r3, [r7, #27]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d828      	bhi.n	80060ee <UART_SetConfig+0x3fe>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <UART_SetConfig+0x3b4>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060ef 	.word	0x080060ef
 80060b4:	080060df 	.word	0x080060df
 80060b8:	080060ef 	.word	0x080060ef
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	080060e7 	.word	0x080060e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7fd f99a 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80060cc:	6178      	str	r0, [r7, #20]
        break;
 80060ce:	e013      	b.n	80060f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7fd f9ac 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 80060d4:	6178      	str	r0, [r7, #20]
        break;
 80060d6:	e00f      	b.n	80060f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b49      	ldr	r3, [pc, #292]	; (8006200 <UART_SetConfig+0x510>)
 80060da:	617b      	str	r3, [r7, #20]
        break;
 80060dc:	e00c      	b.n	80060f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060de:	f7fd f8f7 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80060e2:	6178      	str	r0, [r7, #20]
        break;
 80060e4:	e008      	b.n	80060f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ea:	617b      	str	r3, [r7, #20]
        break;
 80060ec:	e004      	b.n	80060f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	76bb      	strb	r3, [r7, #26]
        break;
 80060f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d074      	beq.n	80061e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d916      	bls.n	800614a <UART_SetConfig+0x45a>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d212      	bcs.n	800614a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f023 030f 	bic.w	r3, r3, #15
 800612c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	b29a      	uxth	r2, r3
 800613a:	89fb      	ldrh	r3, [r7, #14]
 800613c:	4313      	orrs	r3, r2
 800613e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	89fa      	ldrh	r2, [r7, #14]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e04e      	b.n	80061e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	76bb      	strb	r3, [r7, #26]
 800614e:	e04b      	b.n	80061e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006150:	7efb      	ldrb	r3, [r7, #27]
 8006152:	2b08      	cmp	r3, #8
 8006154:	d827      	bhi.n	80061a6 <UART_SetConfig+0x4b6>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <UART_SetConfig+0x46c>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	080061a7 	.word	0x080061a7
 800616c:	08006197 	.word	0x08006197
 8006170:	080061a7 	.word	0x080061a7
 8006174:	080061a7 	.word	0x080061a7
 8006178:	080061a7 	.word	0x080061a7
 800617c:	0800619f 	.word	0x0800619f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006180:	f7fd f93e 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8006184:	6178      	str	r0, [r7, #20]
        break;
 8006186:	e013      	b.n	80061b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006188:	f7fd f950 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 800618c:	6178      	str	r0, [r7, #20]
        break;
 800618e:	e00f      	b.n	80061b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <UART_SetConfig+0x510>)
 8006192:	617b      	str	r3, [r7, #20]
        break;
 8006194:	e00c      	b.n	80061b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006196:	f7fd f89b 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800619a:	6178      	str	r0, [r7, #20]
        break;
 800619c:	e008      	b.n	80061b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a2:	617b      	str	r3, [r7, #20]
        break;
 80061a4:	e004      	b.n	80061b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	76bb      	strb	r3, [r7, #26]
        break;
 80061ae:	bf00      	nop
    }

    if (pclk != 0U)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d018      	beq.n	80061e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	085a      	lsrs	r2, r3, #1
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	441a      	add	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d908      	bls.n	80061e4 <UART_SetConfig+0x4f4>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d8:	d204      	bcs.n	80061e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	60da      	str	r2, [r3, #12]
 80061e2:	e001      	b.n	80061e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdb0      	pop	{r4, r5, r7, pc}
 80061fe:	bf00      	nop
 8006200:	00f42400 	.word	0x00f42400

08006204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01a      	beq.n	800631a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006302:	d10a      	bne.n	800631a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006358:	f7fb fbea 	bl	8001b30 <HAL_GetTick>
 800635c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b08      	cmp	r3, #8
 800636a:	d10e      	bne.n	800638a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800636c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f82d 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e023      	b.n	80063d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d10e      	bne.n	80063b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f817 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e00d      	b.n	80063d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ea:	e05e      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d05a      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f4:	f7fb fb9c 	bl	8001b30 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <UART_WaitOnFlagUntilTimeout+0x30>
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d11b      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006418:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e043      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02c      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645e:	d124      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006468:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006478:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e00f      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d091      	beq.n	80063ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0210 	bic.w	r2, r2, #16
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fbb8 	bl	8005cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fb95 	bl	8005cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <__errno>:
 80065a4:	4b01      	ldr	r3, [pc, #4]	; (80065ac <__errno+0x8>)
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000080 	.word	0x20000080

080065b0 <__libc_init_array>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4d0d      	ldr	r5, [pc, #52]	; (80065e8 <__libc_init_array+0x38>)
 80065b4:	4c0d      	ldr	r4, [pc, #52]	; (80065ec <__libc_init_array+0x3c>)
 80065b6:	1b64      	subs	r4, r4, r5
 80065b8:	10a4      	asrs	r4, r4, #2
 80065ba:	2600      	movs	r6, #0
 80065bc:	42a6      	cmp	r6, r4
 80065be:	d109      	bne.n	80065d4 <__libc_init_array+0x24>
 80065c0:	4d0b      	ldr	r5, [pc, #44]	; (80065f0 <__libc_init_array+0x40>)
 80065c2:	4c0c      	ldr	r4, [pc, #48]	; (80065f4 <__libc_init_array+0x44>)
 80065c4:	f000 fc4e 	bl	8006e64 <_init>
 80065c8:	1b64      	subs	r4, r4, r5
 80065ca:	10a4      	asrs	r4, r4, #2
 80065cc:	2600      	movs	r6, #0
 80065ce:	42a6      	cmp	r6, r4
 80065d0:	d105      	bne.n	80065de <__libc_init_array+0x2e>
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d8:	4798      	blx	r3
 80065da:	3601      	adds	r6, #1
 80065dc:	e7ee      	b.n	80065bc <__libc_init_array+0xc>
 80065de:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e2:	4798      	blx	r3
 80065e4:	3601      	adds	r6, #1
 80065e6:	e7f2      	b.n	80065ce <__libc_init_array+0x1e>
 80065e8:	08006f2c 	.word	0x08006f2c
 80065ec:	08006f2c 	.word	0x08006f2c
 80065f0:	08006f2c 	.word	0x08006f2c
 80065f4:	08006f30 	.word	0x08006f30

080065f8 <memset>:
 80065f8:	4402      	add	r2, r0
 80065fa:	4603      	mov	r3, r0
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d100      	bne.n	8006602 <memset+0xa>
 8006600:	4770      	bx	lr
 8006602:	f803 1b01 	strb.w	r1, [r3], #1
 8006606:	e7f9      	b.n	80065fc <memset+0x4>

08006608 <siprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b500      	push	{lr}
 800660c:	b09c      	sub	sp, #112	; 0x70
 800660e:	ab1d      	add	r3, sp, #116	; 0x74
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <siprintf+0x38>)
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	9104      	str	r1, [sp, #16]
 800661e:	4909      	ldr	r1, [pc, #36]	; (8006644 <siprintf+0x3c>)
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	a902      	add	r1, sp, #8
 800662c:	f000 f868 	bl	8006700 <_svfiprintf_r>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	b01c      	add	sp, #112	; 0x70
 8006638:	f85d eb04 	ldr.w	lr, [sp], #4
 800663c:	b003      	add	sp, #12
 800663e:	4770      	bx	lr
 8006640:	20000080 	.word	0x20000080
 8006644:	ffff0208 	.word	0xffff0208

08006648 <__ssputs_r>:
 8006648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800664c:	688e      	ldr	r6, [r1, #8]
 800664e:	429e      	cmp	r6, r3
 8006650:	4682      	mov	sl, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4690      	mov	r8, r2
 8006656:	461f      	mov	r7, r3
 8006658:	d838      	bhi.n	80066cc <__ssputs_r+0x84>
 800665a:	898a      	ldrh	r2, [r1, #12]
 800665c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006660:	d032      	beq.n	80066c8 <__ssputs_r+0x80>
 8006662:	6825      	ldr	r5, [r4, #0]
 8006664:	6909      	ldr	r1, [r1, #16]
 8006666:	eba5 0901 	sub.w	r9, r5, r1
 800666a:	6965      	ldr	r5, [r4, #20]
 800666c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006674:	3301      	adds	r3, #1
 8006676:	444b      	add	r3, r9
 8006678:	106d      	asrs	r5, r5, #1
 800667a:	429d      	cmp	r5, r3
 800667c:	bf38      	it	cc
 800667e:	461d      	movcc	r5, r3
 8006680:	0553      	lsls	r3, r2, #21
 8006682:	d531      	bpl.n	80066e8 <__ssputs_r+0xa0>
 8006684:	4629      	mov	r1, r5
 8006686:	f000 fb47 	bl	8006d18 <_malloc_r>
 800668a:	4606      	mov	r6, r0
 800668c:	b950      	cbnz	r0, 80066a4 <__ssputs_r+0x5c>
 800668e:	230c      	movs	r3, #12
 8006690:	f8ca 3000 	str.w	r3, [sl]
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	6921      	ldr	r1, [r4, #16]
 80066a6:	464a      	mov	r2, r9
 80066a8:	f000 fabe 	bl	8006c28 <memcpy>
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	6126      	str	r6, [r4, #16]
 80066ba:	6165      	str	r5, [r4, #20]
 80066bc:	444e      	add	r6, r9
 80066be:	eba5 0509 	sub.w	r5, r5, r9
 80066c2:	6026      	str	r6, [r4, #0]
 80066c4:	60a5      	str	r5, [r4, #8]
 80066c6:	463e      	mov	r6, r7
 80066c8:	42be      	cmp	r6, r7
 80066ca:	d900      	bls.n	80066ce <__ssputs_r+0x86>
 80066cc:	463e      	mov	r6, r7
 80066ce:	4632      	mov	r2, r6
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	4641      	mov	r1, r8
 80066d4:	f000 fab6 	bl	8006c44 <memmove>
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	1b9b      	subs	r3, r3, r6
 80066de:	4432      	add	r2, r6
 80066e0:	60a3      	str	r3, [r4, #8]
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	2000      	movs	r0, #0
 80066e6:	e7db      	b.n	80066a0 <__ssputs_r+0x58>
 80066e8:	462a      	mov	r2, r5
 80066ea:	f000 fb6f 	bl	8006dcc <_realloc_r>
 80066ee:	4606      	mov	r6, r0
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d1e1      	bne.n	80066b8 <__ssputs_r+0x70>
 80066f4:	6921      	ldr	r1, [r4, #16]
 80066f6:	4650      	mov	r0, sl
 80066f8:	f000 fabe 	bl	8006c78 <_free_r>
 80066fc:	e7c7      	b.n	800668e <__ssputs_r+0x46>
	...

08006700 <_svfiprintf_r>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4698      	mov	r8, r3
 8006706:	898b      	ldrh	r3, [r1, #12]
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	b09d      	sub	sp, #116	; 0x74
 800670c:	4607      	mov	r7, r0
 800670e:	460d      	mov	r5, r1
 8006710:	4614      	mov	r4, r2
 8006712:	d50e      	bpl.n	8006732 <_svfiprintf_r+0x32>
 8006714:	690b      	ldr	r3, [r1, #16]
 8006716:	b963      	cbnz	r3, 8006732 <_svfiprintf_r+0x32>
 8006718:	2140      	movs	r1, #64	; 0x40
 800671a:	f000 fafd 	bl	8006d18 <_malloc_r>
 800671e:	6028      	str	r0, [r5, #0]
 8006720:	6128      	str	r0, [r5, #16]
 8006722:	b920      	cbnz	r0, 800672e <_svfiprintf_r+0x2e>
 8006724:	230c      	movs	r3, #12
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	e0d1      	b.n	80068d2 <_svfiprintf_r+0x1d2>
 800672e:	2340      	movs	r3, #64	; 0x40
 8006730:	616b      	str	r3, [r5, #20]
 8006732:	2300      	movs	r3, #0
 8006734:	9309      	str	r3, [sp, #36]	; 0x24
 8006736:	2320      	movs	r3, #32
 8006738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800673c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006740:	2330      	movs	r3, #48	; 0x30
 8006742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068ec <_svfiprintf_r+0x1ec>
 8006746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800674a:	f04f 0901 	mov.w	r9, #1
 800674e:	4623      	mov	r3, r4
 8006750:	469a      	mov	sl, r3
 8006752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006756:	b10a      	cbz	r2, 800675c <_svfiprintf_r+0x5c>
 8006758:	2a25      	cmp	r2, #37	; 0x25
 800675a:	d1f9      	bne.n	8006750 <_svfiprintf_r+0x50>
 800675c:	ebba 0b04 	subs.w	fp, sl, r4
 8006760:	d00b      	beq.n	800677a <_svfiprintf_r+0x7a>
 8006762:	465b      	mov	r3, fp
 8006764:	4622      	mov	r2, r4
 8006766:	4629      	mov	r1, r5
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ff6d 	bl	8006648 <__ssputs_r>
 800676e:	3001      	adds	r0, #1
 8006770:	f000 80aa 	beq.w	80068c8 <_svfiprintf_r+0x1c8>
 8006774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006776:	445a      	add	r2, fp
 8006778:	9209      	str	r2, [sp, #36]	; 0x24
 800677a:	f89a 3000 	ldrb.w	r3, [sl]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80a2 	beq.w	80068c8 <_svfiprintf_r+0x1c8>
 8006784:	2300      	movs	r3, #0
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800678e:	f10a 0a01 	add.w	sl, sl, #1
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	9307      	str	r3, [sp, #28]
 8006796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800679a:	931a      	str	r3, [sp, #104]	; 0x68
 800679c:	4654      	mov	r4, sl
 800679e:	2205      	movs	r2, #5
 80067a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a4:	4851      	ldr	r0, [pc, #324]	; (80068ec <_svfiprintf_r+0x1ec>)
 80067a6:	f7f9 fd2b 	bl	8000200 <memchr>
 80067aa:	9a04      	ldr	r2, [sp, #16]
 80067ac:	b9d8      	cbnz	r0, 80067e6 <_svfiprintf_r+0xe6>
 80067ae:	06d0      	lsls	r0, r2, #27
 80067b0:	bf44      	itt	mi
 80067b2:	2320      	movmi	r3, #32
 80067b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067b8:	0711      	lsls	r1, r2, #28
 80067ba:	bf44      	itt	mi
 80067bc:	232b      	movmi	r3, #43	; 0x2b
 80067be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c2:	f89a 3000 	ldrb.w	r3, [sl]
 80067c6:	2b2a      	cmp	r3, #42	; 0x2a
 80067c8:	d015      	beq.n	80067f6 <_svfiprintf_r+0xf6>
 80067ca:	9a07      	ldr	r2, [sp, #28]
 80067cc:	4654      	mov	r4, sl
 80067ce:	2000      	movs	r0, #0
 80067d0:	f04f 0c0a 	mov.w	ip, #10
 80067d4:	4621      	mov	r1, r4
 80067d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067da:	3b30      	subs	r3, #48	; 0x30
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d94e      	bls.n	800687e <_svfiprintf_r+0x17e>
 80067e0:	b1b0      	cbz	r0, 8006810 <_svfiprintf_r+0x110>
 80067e2:	9207      	str	r2, [sp, #28]
 80067e4:	e014      	b.n	8006810 <_svfiprintf_r+0x110>
 80067e6:	eba0 0308 	sub.w	r3, r0, r8
 80067ea:	fa09 f303 	lsl.w	r3, r9, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	46a2      	mov	sl, r4
 80067f4:	e7d2      	b.n	800679c <_svfiprintf_r+0x9c>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	1d19      	adds	r1, r3, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	9103      	str	r1, [sp, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bfbb      	ittet	lt
 8006802:	425b      	neglt	r3, r3
 8006804:	f042 0202 	orrlt.w	r2, r2, #2
 8006808:	9307      	strge	r3, [sp, #28]
 800680a:	9307      	strlt	r3, [sp, #28]
 800680c:	bfb8      	it	lt
 800680e:	9204      	strlt	r2, [sp, #16]
 8006810:	7823      	ldrb	r3, [r4, #0]
 8006812:	2b2e      	cmp	r3, #46	; 0x2e
 8006814:	d10c      	bne.n	8006830 <_svfiprintf_r+0x130>
 8006816:	7863      	ldrb	r3, [r4, #1]
 8006818:	2b2a      	cmp	r3, #42	; 0x2a
 800681a:	d135      	bne.n	8006888 <_svfiprintf_r+0x188>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	1d1a      	adds	r2, r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	9203      	str	r2, [sp, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	bfb8      	it	lt
 8006828:	f04f 33ff 	movlt.w	r3, #4294967295
 800682c:	3402      	adds	r4, #2
 800682e:	9305      	str	r3, [sp, #20]
 8006830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068fc <_svfiprintf_r+0x1fc>
 8006834:	7821      	ldrb	r1, [r4, #0]
 8006836:	2203      	movs	r2, #3
 8006838:	4650      	mov	r0, sl
 800683a:	f7f9 fce1 	bl	8000200 <memchr>
 800683e:	b140      	cbz	r0, 8006852 <_svfiprintf_r+0x152>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	eba0 000a 	sub.w	r0, r0, sl
 8006846:	fa03 f000 	lsl.w	r0, r3, r0
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	4303      	orrs	r3, r0
 800684e:	3401      	adds	r4, #1
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006856:	4826      	ldr	r0, [pc, #152]	; (80068f0 <_svfiprintf_r+0x1f0>)
 8006858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800685c:	2206      	movs	r2, #6
 800685e:	f7f9 fccf 	bl	8000200 <memchr>
 8006862:	2800      	cmp	r0, #0
 8006864:	d038      	beq.n	80068d8 <_svfiprintf_r+0x1d8>
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <_svfiprintf_r+0x1f4>)
 8006868:	bb1b      	cbnz	r3, 80068b2 <_svfiprintf_r+0x1b2>
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	3307      	adds	r3, #7
 800686e:	f023 0307 	bic.w	r3, r3, #7
 8006872:	3308      	adds	r3, #8
 8006874:	9303      	str	r3, [sp, #12]
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	4433      	add	r3, r6
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	e767      	b.n	800674e <_svfiprintf_r+0x4e>
 800687e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006882:	460c      	mov	r4, r1
 8006884:	2001      	movs	r0, #1
 8006886:	e7a5      	b.n	80067d4 <_svfiprintf_r+0xd4>
 8006888:	2300      	movs	r3, #0
 800688a:	3401      	adds	r4, #1
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	4619      	mov	r1, r3
 8006890:	f04f 0c0a 	mov.w	ip, #10
 8006894:	4620      	mov	r0, r4
 8006896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800689a:	3a30      	subs	r2, #48	; 0x30
 800689c:	2a09      	cmp	r2, #9
 800689e:	d903      	bls.n	80068a8 <_svfiprintf_r+0x1a8>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0c5      	beq.n	8006830 <_svfiprintf_r+0x130>
 80068a4:	9105      	str	r1, [sp, #20]
 80068a6:	e7c3      	b.n	8006830 <_svfiprintf_r+0x130>
 80068a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ac:	4604      	mov	r4, r0
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7f0      	b.n	8006894 <_svfiprintf_r+0x194>
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	462a      	mov	r2, r5
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <_svfiprintf_r+0x1f8>)
 80068ba:	a904      	add	r1, sp, #16
 80068bc:	4638      	mov	r0, r7
 80068be:	f3af 8000 	nop.w
 80068c2:	1c42      	adds	r2, r0, #1
 80068c4:	4606      	mov	r6, r0
 80068c6:	d1d6      	bne.n	8006876 <_svfiprintf_r+0x176>
 80068c8:	89ab      	ldrh	r3, [r5, #12]
 80068ca:	065b      	lsls	r3, r3, #25
 80068cc:	f53f af2c 	bmi.w	8006728 <_svfiprintf_r+0x28>
 80068d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068d2:	b01d      	add	sp, #116	; 0x74
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	ab03      	add	r3, sp, #12
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	462a      	mov	r2, r5
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <_svfiprintf_r+0x1f8>)
 80068e0:	a904      	add	r1, sp, #16
 80068e2:	4638      	mov	r0, r7
 80068e4:	f000 f87a 	bl	80069dc <_printf_i>
 80068e8:	e7eb      	b.n	80068c2 <_svfiprintf_r+0x1c2>
 80068ea:	bf00      	nop
 80068ec:	08006ef0 	.word	0x08006ef0
 80068f0:	08006efa 	.word	0x08006efa
 80068f4:	00000000 	.word	0x00000000
 80068f8:	08006649 	.word	0x08006649
 80068fc:	08006ef6 	.word	0x08006ef6

08006900 <_printf_common>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	4616      	mov	r6, r2
 8006906:	4699      	mov	r9, r3
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006910:	4293      	cmp	r3, r2
 8006912:	bfb8      	it	lt
 8006914:	4613      	movlt	r3, r2
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800691c:	4607      	mov	r7, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b10a      	cbz	r2, 8006926 <_printf_common+0x26>
 8006922:	3301      	adds	r3, #1
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	0699      	lsls	r1, r3, #26
 800692a:	bf42      	ittt	mi
 800692c:	6833      	ldrmi	r3, [r6, #0]
 800692e:	3302      	addmi	r3, #2
 8006930:	6033      	strmi	r3, [r6, #0]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d106      	bne.n	8006948 <_printf_common+0x48>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc26      	bgt.n	8006996 <_printf_common+0x96>
 8006948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800694c:	1e13      	subs	r3, r2, #0
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	bf18      	it	ne
 8006952:	2301      	movne	r3, #1
 8006954:	0692      	lsls	r2, r2, #26
 8006956:	d42b      	bmi.n	80069b0 <_printf_common+0xb0>
 8006958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800695c:	4649      	mov	r1, r9
 800695e:	4638      	mov	r0, r7
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d01e      	beq.n	80069a4 <_printf_common+0xa4>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	68e5      	ldr	r5, [r4, #12]
 800696a:	6832      	ldr	r2, [r6, #0]
 800696c:	f003 0306 	and.w	r3, r3, #6
 8006970:	2b04      	cmp	r3, #4
 8006972:	bf08      	it	eq
 8006974:	1aad      	subeq	r5, r5, r2
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	bf0c      	ite	eq
 800697c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006980:	2500      	movne	r5, #0
 8006982:	4293      	cmp	r3, r2
 8006984:	bfc4      	itt	gt
 8006986:	1a9b      	subgt	r3, r3, r2
 8006988:	18ed      	addgt	r5, r5, r3
 800698a:	2600      	movs	r6, #0
 800698c:	341a      	adds	r4, #26
 800698e:	42b5      	cmp	r5, r6
 8006990:	d11a      	bne.n	80069c8 <_printf_common+0xc8>
 8006992:	2000      	movs	r0, #0
 8006994:	e008      	b.n	80069a8 <_printf_common+0xa8>
 8006996:	2301      	movs	r3, #1
 8006998:	4652      	mov	r2, sl
 800699a:	4649      	mov	r1, r9
 800699c:	4638      	mov	r0, r7
 800699e:	47c0      	blx	r8
 80069a0:	3001      	adds	r0, #1
 80069a2:	d103      	bne.n	80069ac <_printf_common+0xac>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	3501      	adds	r5, #1
 80069ae:	e7c6      	b.n	800693e <_printf_common+0x3e>
 80069b0:	18e1      	adds	r1, r4, r3
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	2030      	movs	r0, #48	; 0x30
 80069b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ba:	4422      	add	r2, r4
 80069bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069c4:	3302      	adds	r3, #2
 80069c6:	e7c7      	b.n	8006958 <_printf_common+0x58>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4622      	mov	r2, r4
 80069cc:	4649      	mov	r1, r9
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c0      	blx	r8
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0e6      	beq.n	80069a4 <_printf_common+0xa4>
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7d9      	b.n	800698e <_printf_common+0x8e>
	...

080069dc <_printf_i>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	4691      	mov	r9, r2
 80069e4:	7e27      	ldrb	r7, [r4, #24]
 80069e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069e8:	2f78      	cmp	r7, #120	; 0x78
 80069ea:	4680      	mov	r8, r0
 80069ec:	469a      	mov	sl, r3
 80069ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f2:	d807      	bhi.n	8006a04 <_printf_i+0x28>
 80069f4:	2f62      	cmp	r7, #98	; 0x62
 80069f6:	d80a      	bhi.n	8006a0e <_printf_i+0x32>
 80069f8:	2f00      	cmp	r7, #0
 80069fa:	f000 80d8 	beq.w	8006bae <_printf_i+0x1d2>
 80069fe:	2f58      	cmp	r7, #88	; 0x58
 8006a00:	f000 80a3 	beq.w	8006b4a <_printf_i+0x16e>
 8006a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a0c:	e03a      	b.n	8006a84 <_printf_i+0xa8>
 8006a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a12:	2b15      	cmp	r3, #21
 8006a14:	d8f6      	bhi.n	8006a04 <_printf_i+0x28>
 8006a16:	a001      	add	r0, pc, #4	; (adr r0, 8006a1c <_printf_i+0x40>)
 8006a18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a05 	.word	0x08006a05
 8006a28:	08006a05 	.word	0x08006a05
 8006a2c:	08006a05 	.word	0x08006a05
 8006a30:	08006a05 	.word	0x08006a05
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a05 	.word	0x08006a05
 8006a3c:	08006a05 	.word	0x08006a05
 8006a40:	08006a05 	.word	0x08006a05
 8006a44:	08006a05 	.word	0x08006a05
 8006a48:	08006b95 	.word	0x08006b95
 8006a4c:	08006ab9 	.word	0x08006ab9
 8006a50:	08006b77 	.word	0x08006b77
 8006a54:	08006a05 	.word	0x08006a05
 8006a58:	08006a05 	.word	0x08006a05
 8006a5c:	08006bb7 	.word	0x08006bb7
 8006a60:	08006a05 	.word	0x08006a05
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006a05 	.word	0x08006a05
 8006a6c:	08006a05 	.word	0x08006a05
 8006a70:	08006b7f 	.word	0x08006b7f
 8006a74:	680b      	ldr	r3, [r1, #0]
 8006a76:	1d1a      	adds	r2, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	600a      	str	r2, [r1, #0]
 8006a7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0a3      	b.n	8006bd0 <_printf_i+0x1f4>
 8006a88:	6825      	ldr	r5, [r4, #0]
 8006a8a:	6808      	ldr	r0, [r1, #0]
 8006a8c:	062e      	lsls	r6, r5, #24
 8006a8e:	f100 0304 	add.w	r3, r0, #4
 8006a92:	d50a      	bpl.n	8006aaa <_printf_i+0xce>
 8006a94:	6805      	ldr	r5, [r0, #0]
 8006a96:	600b      	str	r3, [r1, #0]
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	da03      	bge.n	8006aa4 <_printf_i+0xc8>
 8006a9c:	232d      	movs	r3, #45	; 0x2d
 8006a9e:	426d      	negs	r5, r5
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	485e      	ldr	r0, [pc, #376]	; (8006c20 <_printf_i+0x244>)
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	e019      	b.n	8006ade <_printf_i+0x102>
 8006aaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006aae:	6805      	ldr	r5, [r0, #0]
 8006ab0:	600b      	str	r3, [r1, #0]
 8006ab2:	bf18      	it	ne
 8006ab4:	b22d      	sxthne	r5, r5
 8006ab6:	e7ef      	b.n	8006a98 <_printf_i+0xbc>
 8006ab8:	680b      	ldr	r3, [r1, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	1d18      	adds	r0, r3, #4
 8006abe:	6008      	str	r0, [r1, #0]
 8006ac0:	0628      	lsls	r0, r5, #24
 8006ac2:	d501      	bpl.n	8006ac8 <_printf_i+0xec>
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	e002      	b.n	8006ace <_printf_i+0xf2>
 8006ac8:	0669      	lsls	r1, r5, #25
 8006aca:	d5fb      	bpl.n	8006ac4 <_printf_i+0xe8>
 8006acc:	881d      	ldrh	r5, [r3, #0]
 8006ace:	4854      	ldr	r0, [pc, #336]	; (8006c20 <_printf_i+0x244>)
 8006ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2308      	moveq	r3, #8
 8006ad6:	230a      	movne	r3, #10
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ade:	6866      	ldr	r6, [r4, #4]
 8006ae0:	60a6      	str	r6, [r4, #8]
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	bfa2      	ittt	ge
 8006ae6:	6821      	ldrge	r1, [r4, #0]
 8006ae8:	f021 0104 	bicge.w	r1, r1, #4
 8006aec:	6021      	strge	r1, [r4, #0]
 8006aee:	b90d      	cbnz	r5, 8006af4 <_printf_i+0x118>
 8006af0:	2e00      	cmp	r6, #0
 8006af2:	d04d      	beq.n	8006b90 <_printf_i+0x1b4>
 8006af4:	4616      	mov	r6, r2
 8006af6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006afa:	fb03 5711 	mls	r7, r3, r1, r5
 8006afe:	5dc7      	ldrb	r7, [r0, r7]
 8006b00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b04:	462f      	mov	r7, r5
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	460d      	mov	r5, r1
 8006b0a:	d9f4      	bls.n	8006af6 <_printf_i+0x11a>
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d10b      	bne.n	8006b28 <_printf_i+0x14c>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07df      	lsls	r7, r3, #31
 8006b14:	d508      	bpl.n	8006b28 <_printf_i+0x14c>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	6861      	ldr	r1, [r4, #4]
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	bfde      	ittt	le
 8006b1e:	2330      	movle	r3, #48	; 0x30
 8006b20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b28:	1b92      	subs	r2, r2, r6
 8006b2a:	6122      	str	r2, [r4, #16]
 8006b2c:	f8cd a000 	str.w	sl, [sp]
 8006b30:	464b      	mov	r3, r9
 8006b32:	aa03      	add	r2, sp, #12
 8006b34:	4621      	mov	r1, r4
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff fee2 	bl	8006900 <_printf_common>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d14c      	bne.n	8006bda <_printf_i+0x1fe>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	b004      	add	sp, #16
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	4835      	ldr	r0, [pc, #212]	; (8006c20 <_printf_i+0x244>)
 8006b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	680e      	ldr	r6, [r1, #0]
 8006b54:	061f      	lsls	r7, r3, #24
 8006b56:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b5a:	600e      	str	r6, [r1, #0]
 8006b5c:	d514      	bpl.n	8006b88 <_printf_i+0x1ac>
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	bf44      	itt	mi
 8006b62:	f043 0320 	orrmi.w	r3, r3, #32
 8006b66:	6023      	strmi	r3, [r4, #0]
 8006b68:	b91d      	cbnz	r5, 8006b72 <_printf_i+0x196>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	f023 0320 	bic.w	r3, r3, #32
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	2310      	movs	r3, #16
 8006b74:	e7b0      	b.n	8006ad8 <_printf_i+0xfc>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f043 0320 	orr.w	r3, r3, #32
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	2378      	movs	r3, #120	; 0x78
 8006b80:	4828      	ldr	r0, [pc, #160]	; (8006c24 <_printf_i+0x248>)
 8006b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b86:	e7e3      	b.n	8006b50 <_printf_i+0x174>
 8006b88:	065e      	lsls	r6, r3, #25
 8006b8a:	bf48      	it	mi
 8006b8c:	b2ad      	uxthmi	r5, r5
 8006b8e:	e7e6      	b.n	8006b5e <_printf_i+0x182>
 8006b90:	4616      	mov	r6, r2
 8006b92:	e7bb      	b.n	8006b0c <_printf_i+0x130>
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	6826      	ldr	r6, [r4, #0]
 8006b98:	6960      	ldr	r0, [r4, #20]
 8006b9a:	1d1d      	adds	r5, r3, #4
 8006b9c:	600d      	str	r5, [r1, #0]
 8006b9e:	0635      	lsls	r5, r6, #24
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0x1cc>
 8006ba4:	6018      	str	r0, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0x1d2>
 8006ba8:	0671      	lsls	r1, r6, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0x1c8>
 8006bac:	8018      	strh	r0, [r3, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	e7ba      	b.n	8006b2c <_printf_i+0x150>
 8006bb6:	680b      	ldr	r3, [r1, #0]
 8006bb8:	1d1a      	adds	r2, r3, #4
 8006bba:	600a      	str	r2, [r1, #0]
 8006bbc:	681e      	ldr	r6, [r3, #0]
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7f9 fb1c 	bl	8000200 <memchr>
 8006bc8:	b108      	cbz	r0, 8006bce <_printf_i+0x1f2>
 8006bca:	1b80      	subs	r0, r0, r6
 8006bcc:	6060      	str	r0, [r4, #4]
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	e7a8      	b.n	8006b2c <_printf_i+0x150>
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	47d0      	blx	sl
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0ab      	beq.n	8006b40 <_printf_i+0x164>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	079b      	lsls	r3, r3, #30
 8006bec:	d413      	bmi.n	8006c16 <_printf_i+0x23a>
 8006bee:	68e0      	ldr	r0, [r4, #12]
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	4298      	cmp	r0, r3
 8006bf4:	bfb8      	it	lt
 8006bf6:	4618      	movlt	r0, r3
 8006bf8:	e7a4      	b.n	8006b44 <_printf_i+0x168>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	47d0      	blx	sl
 8006c04:	3001      	adds	r0, #1
 8006c06:	d09b      	beq.n	8006b40 <_printf_i+0x164>
 8006c08:	3501      	adds	r5, #1
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	9903      	ldr	r1, [sp, #12]
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dcf2      	bgt.n	8006bfa <_printf_i+0x21e>
 8006c14:	e7eb      	b.n	8006bee <_printf_i+0x212>
 8006c16:	2500      	movs	r5, #0
 8006c18:	f104 0619 	add.w	r6, r4, #25
 8006c1c:	e7f5      	b.n	8006c0a <_printf_i+0x22e>
 8006c1e:	bf00      	nop
 8006c20:	08006f01 	.word	0x08006f01
 8006c24:	08006f12 	.word	0x08006f12

08006c28 <memcpy>:
 8006c28:	440a      	add	r2, r1
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c30:	d100      	bne.n	8006c34 <memcpy+0xc>
 8006c32:	4770      	bx	lr
 8006c34:	b510      	push	{r4, lr}
 8006c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c3e:	4291      	cmp	r1, r2
 8006c40:	d1f9      	bne.n	8006c36 <memcpy+0xe>
 8006c42:	bd10      	pop	{r4, pc}

08006c44 <memmove>:
 8006c44:	4288      	cmp	r0, r1
 8006c46:	b510      	push	{r4, lr}
 8006c48:	eb01 0402 	add.w	r4, r1, r2
 8006c4c:	d902      	bls.n	8006c54 <memmove+0x10>
 8006c4e:	4284      	cmp	r4, r0
 8006c50:	4623      	mov	r3, r4
 8006c52:	d807      	bhi.n	8006c64 <memmove+0x20>
 8006c54:	1e43      	subs	r3, r0, #1
 8006c56:	42a1      	cmp	r1, r4
 8006c58:	d008      	beq.n	8006c6c <memmove+0x28>
 8006c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c62:	e7f8      	b.n	8006c56 <memmove+0x12>
 8006c64:	4402      	add	r2, r0
 8006c66:	4601      	mov	r1, r0
 8006c68:	428a      	cmp	r2, r1
 8006c6a:	d100      	bne.n	8006c6e <memmove+0x2a>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c76:	e7f7      	b.n	8006c68 <memmove+0x24>

08006c78 <_free_r>:
 8006c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d048      	beq.n	8006d10 <_free_r+0x98>
 8006c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f1a1 0404 	sub.w	r4, r1, #4
 8006c8a:	bfb8      	it	lt
 8006c8c:	18e4      	addlt	r4, r4, r3
 8006c8e:	f000 f8d3 	bl	8006e38 <__malloc_lock>
 8006c92:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <_free_r+0x9c>)
 8006c94:	9801      	ldr	r0, [sp, #4]
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	4615      	mov	r5, r2
 8006c9a:	b933      	cbnz	r3, 8006caa <_free_r+0x32>
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	6014      	str	r4, [r2, #0]
 8006ca0:	b003      	add	sp, #12
 8006ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ca6:	f000 b8cd 	b.w	8006e44 <__malloc_unlock>
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	d90b      	bls.n	8006cc6 <_free_r+0x4e>
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	1862      	adds	r2, r4, r1
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	bf04      	itt	eq
 8006cb6:	681a      	ldreq	r2, [r3, #0]
 8006cb8:	685b      	ldreq	r3, [r3, #4]
 8006cba:	6063      	str	r3, [r4, #4]
 8006cbc:	bf04      	itt	eq
 8006cbe:	1852      	addeq	r2, r2, r1
 8006cc0:	6022      	streq	r2, [r4, #0]
 8006cc2:	602c      	str	r4, [r5, #0]
 8006cc4:	e7ec      	b.n	8006ca0 <_free_r+0x28>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b10b      	cbz	r3, 8006cd0 <_free_r+0x58>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d9fa      	bls.n	8006cc6 <_free_r+0x4e>
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	1855      	adds	r5, r2, r1
 8006cd4:	42a5      	cmp	r5, r4
 8006cd6:	d10b      	bne.n	8006cf0 <_free_r+0x78>
 8006cd8:	6824      	ldr	r4, [r4, #0]
 8006cda:	4421      	add	r1, r4
 8006cdc:	1854      	adds	r4, r2, r1
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	d1dd      	bne.n	8006ca0 <_free_r+0x28>
 8006ce4:	681c      	ldr	r4, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	4421      	add	r1, r4
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	e7d7      	b.n	8006ca0 <_free_r+0x28>
 8006cf0:	d902      	bls.n	8006cf8 <_free_r+0x80>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	6003      	str	r3, [r0, #0]
 8006cf6:	e7d3      	b.n	8006ca0 <_free_r+0x28>
 8006cf8:	6825      	ldr	r5, [r4, #0]
 8006cfa:	1961      	adds	r1, r4, r5
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf04      	itt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	bf04      	itt	eq
 8006d08:	1949      	addeq	r1, r1, r5
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6054      	str	r4, [r2, #4]
 8006d0e:	e7c7      	b.n	8006ca0 <_free_r+0x28>
 8006d10:	b003      	add	sp, #12
 8006d12:	bd30      	pop	{r4, r5, pc}
 8006d14:	2000011c 	.word	0x2000011c

08006d18 <_malloc_r>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	1ccd      	adds	r5, r1, #3
 8006d1c:	f025 0503 	bic.w	r5, r5, #3
 8006d20:	3508      	adds	r5, #8
 8006d22:	2d0c      	cmp	r5, #12
 8006d24:	bf38      	it	cc
 8006d26:	250c      	movcc	r5, #12
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	db01      	blt.n	8006d32 <_malloc_r+0x1a>
 8006d2e:	42a9      	cmp	r1, r5
 8006d30:	d903      	bls.n	8006d3a <_malloc_r+0x22>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	2000      	movs	r0, #0
 8006d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3a:	f000 f87d 	bl	8006e38 <__malloc_lock>
 8006d3e:	4921      	ldr	r1, [pc, #132]	; (8006dc4 <_malloc_r+0xac>)
 8006d40:	680a      	ldr	r2, [r1, #0]
 8006d42:	4614      	mov	r4, r2
 8006d44:	b99c      	cbnz	r4, 8006d6e <_malloc_r+0x56>
 8006d46:	4f20      	ldr	r7, [pc, #128]	; (8006dc8 <_malloc_r+0xb0>)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	b923      	cbnz	r3, 8006d56 <_malloc_r+0x3e>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f000 f862 	bl	8006e18 <_sbrk_r>
 8006d54:	6038      	str	r0, [r7, #0]
 8006d56:	4629      	mov	r1, r5
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 f85d 	bl	8006e18 <_sbrk_r>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d123      	bne.n	8006daa <_malloc_r+0x92>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	4630      	mov	r0, r6
 8006d68:	f000 f86c 	bl	8006e44 <__malloc_unlock>
 8006d6c:	e7e3      	b.n	8006d36 <_malloc_r+0x1e>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	1b5b      	subs	r3, r3, r5
 8006d72:	d417      	bmi.n	8006da4 <_malloc_r+0x8c>
 8006d74:	2b0b      	cmp	r3, #11
 8006d76:	d903      	bls.n	8006d80 <_malloc_r+0x68>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	441c      	add	r4, r3
 8006d7c:	6025      	str	r5, [r4, #0]
 8006d7e:	e004      	b.n	8006d8a <_malloc_r+0x72>
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	42a2      	cmp	r2, r4
 8006d84:	bf0c      	ite	eq
 8006d86:	600b      	streq	r3, [r1, #0]
 8006d88:	6053      	strne	r3, [r2, #4]
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 f85a 	bl	8006e44 <__malloc_unlock>
 8006d90:	f104 000b 	add.w	r0, r4, #11
 8006d94:	1d23      	adds	r3, r4, #4
 8006d96:	f020 0007 	bic.w	r0, r0, #7
 8006d9a:	1ac2      	subs	r2, r0, r3
 8006d9c:	d0cc      	beq.n	8006d38 <_malloc_r+0x20>
 8006d9e:	1a1b      	subs	r3, r3, r0
 8006da0:	50a3      	str	r3, [r4, r2]
 8006da2:	e7c9      	b.n	8006d38 <_malloc_r+0x20>
 8006da4:	4622      	mov	r2, r4
 8006da6:	6864      	ldr	r4, [r4, #4]
 8006da8:	e7cc      	b.n	8006d44 <_malloc_r+0x2c>
 8006daa:	1cc4      	adds	r4, r0, #3
 8006dac:	f024 0403 	bic.w	r4, r4, #3
 8006db0:	42a0      	cmp	r0, r4
 8006db2:	d0e3      	beq.n	8006d7c <_malloc_r+0x64>
 8006db4:	1a21      	subs	r1, r4, r0
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f82e 	bl	8006e18 <_sbrk_r>
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d1dd      	bne.n	8006d7c <_malloc_r+0x64>
 8006dc0:	e7cf      	b.n	8006d62 <_malloc_r+0x4a>
 8006dc2:	bf00      	nop
 8006dc4:	2000011c 	.word	0x2000011c
 8006dc8:	20000120 	.word	0x20000120

08006dcc <_realloc_r>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	4607      	mov	r7, r0
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	b921      	cbnz	r1, 8006de0 <_realloc_r+0x14>
 8006dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dda:	4611      	mov	r1, r2
 8006ddc:	f7ff bf9c 	b.w	8006d18 <_malloc_r>
 8006de0:	b922      	cbnz	r2, 8006dec <_realloc_r+0x20>
 8006de2:	f7ff ff49 	bl	8006c78 <_free_r>
 8006de6:	4625      	mov	r5, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dec:	f000 f830 	bl	8006e50 <_malloc_usable_size_r>
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d20f      	bcs.n	8006e14 <_realloc_r+0x48>
 8006df4:	4621      	mov	r1, r4
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7ff ff8e 	bl	8006d18 <_malloc_r>
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0f2      	beq.n	8006de8 <_realloc_r+0x1c>
 8006e02:	4631      	mov	r1, r6
 8006e04:	4622      	mov	r2, r4
 8006e06:	f7ff ff0f 	bl	8006c28 <memcpy>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ff33 	bl	8006c78 <_free_r>
 8006e12:	e7e9      	b.n	8006de8 <_realloc_r+0x1c>
 8006e14:	4635      	mov	r5, r6
 8006e16:	e7e7      	b.n	8006de8 <_realloc_r+0x1c>

08006e18 <_sbrk_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	; (8006e34 <_sbrk_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7fa fb04 	bl	8001430 <_sbrk>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_sbrk_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_sbrk_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	200003c4 	.word	0x200003c4

08006e38 <__malloc_lock>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__malloc_lock+0x8>)
 8006e3a:	f000 b811 	b.w	8006e60 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	200003cc 	.word	0x200003cc

08006e44 <__malloc_unlock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__malloc_unlock+0x8>)
 8006e46:	f000 b80c 	b.w	8006e62 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	200003cc 	.word	0x200003cc

08006e50 <_malloc_usable_size_r>:
 8006e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e54:	1f18      	subs	r0, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfbc      	itt	lt
 8006e5a:	580b      	ldrlt	r3, [r1, r0]
 8006e5c:	18c0      	addlt	r0, r0, r3
 8006e5e:	4770      	bx	lr

08006e60 <__retarget_lock_acquire_recursive>:
 8006e60:	4770      	bx	lr

08006e62 <__retarget_lock_release_recursive>:
 8006e62:	4770      	bx	lr

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
