
ExtendProjectHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b94  08001b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001ba4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001ba4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ecc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001180  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00027088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00027640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce4  00000000  00000000  00027b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005aa6  00000000  00000000  0004e844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee4c6  00000000  00000000  000542ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001427b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014f8  00000000  00000000  00142804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001b38 	.word	0x08001b38

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001b38 	.word	0x08001b38

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fab1 	bl	8000756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f890 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f8d4 	bl	80003a4 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (set == 1){
 80001fc:	4b42      	ldr	r3, [pc, #264]	; (8000308 <main+0x11c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	b2db      	uxtb	r3, r3
 8000202:	2b01      	cmp	r3, #1
 8000204:	d10b      	bne.n	800021e <main+0x32>
	 		  HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fb19 	bl	8000840 <HAL_Delay>
	 		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2140      	movs	r1, #64	; 0x40
 8000212:	483e      	ldr	r0, [pc, #248]	; (800030c <main+0x120>)
 8000214:	f000 fddc 	bl	8000dd0 <HAL_GPIO_WritePin>
	 		  set =0;
 8000218:	4b3b      	ldr	r3, [pc, #236]	; (8000308 <main+0x11c>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
	 	  }



	 	  if (set == 2)
 800021e:	4b3a      	ldr	r3, [pc, #232]	; (8000308 <main+0x11c>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	2b02      	cmp	r3, #2
 8000226:	d10b      	bne.n	8000240 <main+0x54>
	 	      {
	 	          HAL_Delay(500);
 8000228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022c:	f000 fb08 	bl	8000840 <HAL_Delay>
	 	          HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	4836      	ldr	r0, [pc, #216]	; (8000310 <main+0x124>)
 8000236:	f000 fdcb 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	          set = 0;
 800023a:	4b33      	ldr	r3, [pc, #204]	; (8000308 <main+0x11c>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	 	      }

	 	   if (set == 3)
 8000240:	4b31      	ldr	r3, [pc, #196]	; (8000308 <main+0x11c>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b03      	cmp	r3, #3
 8000248:	d111      	bne.n	800026e <main+0x82>
	 	      {
	 	          HAL_Delay(500);
 800024a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024e:	f000 faf7 	bl	8000840 <HAL_Delay>
	 	          HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000258:	482c      	ldr	r0, [pc, #176]	; (800030c <main+0x120>)
 800025a:	f000 fdb9 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	          HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	482b      	ldr	r0, [pc, #172]	; (8000310 <main+0x124>)
 8000264:	f000 fdb4 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	          set = 0;
 8000268:	4b27      	ldr	r3, [pc, #156]	; (8000308 <main+0x11c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	 	      }
	 	       if (set == 4)
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <main+0x11c>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b04      	cmp	r3, #4
 8000276:	d110      	bne.n	800029a <main+0xae>
	 	      {
	 	          HAL_Delay(500);
 8000278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027c:	f000 fae0 	bl	8000840 <HAL_Delay>
	 	          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <main+0x120>)
 8000286:	f000 fda3 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	          HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	4820      	ldr	r0, [pc, #128]	; (8000310 <main+0x124>)
 8000290:	f000 fd9e 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	          set = 0;
 8000294:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <main+0x11c>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
	 	      }

	 	       if (set == 5){
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0x11c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	d1ab      	bne.n	80001fc <main+0x10>
	 	      		  HAL_Delay(500);
 80002a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a8:	f000 faca 	bl	8000840 <HAL_Delay>
	 	      		           HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	4816      	ldr	r0, [pc, #88]	; (800030c <main+0x120>)
 80002b2:	f000 fd8d 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <main+0x120>)
 80002bc:	f000 fd88 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c6:	4811      	ldr	r0, [pc, #68]	; (800030c <main+0x120>)
 80002c8:	f000 fd82 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x120>)
 80002d4:	f000 fd7c 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <main+0x124>)
 80002de:	f000 fd77 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	480b      	ldr	r0, [pc, #44]	; (8000314 <main+0x128>)
 80002e8:	f000 fd72 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2120      	movs	r1, #32
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <main+0x124>)
 80002f2:	f000 fd6d 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2140      	movs	r1, #64	; 0x40
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <main+0x124>)
 80002fc:	f000 fd68 	bl	8000dd0 <HAL_GPIO_WritePin>
	 	      		           set = 0;
 8000300:	4b01      	ldr	r3, [pc, #4]	; (8000308 <main+0x11c>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
	  if (set == 1){
 8000306:	e779      	b.n	80001fc <main+0x10>
 8000308:	20000028 	.word	0x20000028
 800030c:	48000800 	.word	0x48000800
 8000310:	48001000 	.word	0x48001000
 8000314:	48000c00 	.word	0x48000c00

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b096      	sub	sp, #88	; 0x58
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2244      	movs	r2, #68	; 0x44
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fbfe 	bl	8001b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800033a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800033e:	f000 fd85 	bl	8000e4c <HAL_PWREx_ControlVoltageScaling>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000348:	f000 f952 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034c:	2310      	movs	r3, #16
 800034e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000358:	2360      	movs	r3, #96	; 0x60
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	2300      	movs	r3, #0
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fdc7 	bl	8000ef8 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000370:	f000 f93e 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 f9d9 	bl	8001744 <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000398:	f000 f92a 	bl	80005f0 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3758      	adds	r7, #88	; 0x58
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ba:	4b4c      	ldr	r3, [pc, #304]	; (80004ec <MX_GPIO_Init+0x148>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a4b      	ldr	r2, [pc, #300]	; (80004ec <MX_GPIO_Init+0x148>)
 80003c0:	f043 0310 	orr.w	r3, r3, #16
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b49      	ldr	r3, [pc, #292]	; (80004ec <MX_GPIO_Init+0x148>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0310 	and.w	r3, r3, #16
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b46      	ldr	r3, [pc, #280]	; (80004ec <MX_GPIO_Init+0x148>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a45      	ldr	r2, [pc, #276]	; (80004ec <MX_GPIO_Init+0x148>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <MX_GPIO_Init+0x148>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ea:	4b40      	ldr	r3, [pc, #256]	; (80004ec <MX_GPIO_Init+0x148>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a3f      	ldr	r2, [pc, #252]	; (80004ec <MX_GPIO_Init+0x148>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <MX_GPIO_Init+0x148>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0308 	and.w	r3, r3, #8
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2170      	movs	r1, #112	; 0x70
 8000406:	483a      	ldr	r0, [pc, #232]	; (80004f0 <MX_GPIO_Init+0x14c>)
 8000408:	f000 fce2 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000412:	4838      	ldr	r0, [pc, #224]	; (80004f4 <MX_GPIO_Init+0x150>)
 8000414:	f000 fcdc 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2108      	movs	r1, #8
 800041c:	4836      	ldr	r0, [pc, #216]	; (80004f8 <MX_GPIO_Init+0x154>)
 800041e:	f000 fcd7 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_DOWN_Pin SW1_UP_Pin SW1_OK_Pin SW1_RIGHT_Pin
                           SW1_LEFT_Pin */
  GPIO_InitStruct.Pin = SW1_DOWN_Pin|SW1_UP_Pin|SW1_OK_Pin|SW1_RIGHT_Pin
 8000422:	f248 030f 	movw	r3, #32783	; 0x800f
 8000426:	60fb      	str	r3, [r7, #12]
                          |SW1_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000428:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	4619      	mov	r1, r3
 8000438:	482d      	ldr	r0, [pc, #180]	; (80004f0 <MX_GPIO_Init+0x14c>)
 800043a:	f000 fb37 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED6_Pin|LED7_Pin;
 800043e:	2370      	movs	r3, #112	; 0x70
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	4826      	ldr	r0, [pc, #152]	; (80004f0 <MX_GPIO_Init+0x14c>)
 8000456:	f000 fb29 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800045a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4619      	mov	r1, r3
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <MX_GPIO_Init+0x150>)
 8000474:	f000 fb1a 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_Pin */
  GPIO_InitStruct.Pin = LED5_Pin;
 8000478:	2308      	movs	r3, #8
 800047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4619      	mov	r1, r3
 800048e:	481a      	ldr	r0, [pc, #104]	; (80004f8 <MX_GPIO_Init+0x154>)
 8000490:	f000 fb0c 	bl	8000aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2101      	movs	r1, #1
 8000498:	2006      	movs	r0, #6
 800049a:	f000 fad0 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800049e:	2006      	movs	r0, #6
 80004a0:	f000 fae9 	bl	8000a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2102      	movs	r1, #2
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 fac8 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004ae:	2007      	movs	r0, #7
 80004b0:	f000 fae1 	bl	8000a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2103      	movs	r1, #3
 80004b8:	2008      	movs	r0, #8
 80004ba:	f000 fac0 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80004be:	2008      	movs	r0, #8
 80004c0:	f000 fad9 	bl	8000a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2104      	movs	r1, #4
 80004c8:	2009      	movs	r0, #9
 80004ca:	f000 fab8 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80004ce:	2009      	movs	r0, #9
 80004d0:	f000 fad1 	bl	8000a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	2028      	movs	r0, #40	; 0x28
 80004da:	f000 fab0 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004de:	2028      	movs	r0, #40	; 0x28
 80004e0:	f000 fac9 	bl	8000a76 <HAL_NVIC_EnableIRQ>

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48001000 	.word	0x48001000
 80004f4:	48000800 	.word	0x48000800
 80004f8:	48000c00 	.word	0x48000c00

080004fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == SW1_OK_Pin)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800050c:	d12c      	bne.n	8000568 <HAL_GPIO_EXTI_Callback+0x6c>
	    {
	        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	4833      	ldr	r0, [pc, #204]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000514:	f000 fc5c 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	4830      	ldr	r0, [pc, #192]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800051e:	f000 fc57 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000528:	482d      	ldr	r0, [pc, #180]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800052a:	f000 fc51 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000534:	482a      	ldr	r0, [pc, #168]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000536:	f000 fc4b 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2110      	movs	r1, #16
 800053e:	4829      	ldr	r0, [pc, #164]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000540:	f000 fc46 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	4827      	ldr	r0, [pc, #156]	; (80005e8 <HAL_GPIO_EXTI_Callback+0xec>)
 800054a:	f000 fc41 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	4824      	ldr	r0, [pc, #144]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000554:	f000 fc3c 	bl	8000dd0 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800055e:	f000 fc37 	bl	8000dd0 <HAL_GPIO_WritePin>
	        set = 5;
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <HAL_GPIO_EXTI_Callback+0xf0>)
 8000564:	2205      	movs	r2, #5
 8000566:	701a      	strb	r2, [r3, #0]
	    }

	  if(GPIO_Pin == SW1_RIGHT_Pin)
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d107      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0x82>
	    {
	        HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000574:	f000 fc2c 	bl	8000dd0 <HAL_GPIO_WritePin>
	        set = 1;
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <HAL_GPIO_EXTI_Callback+0xf0>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
	    }

	  if(GPIO_Pin == SW1_LEFT_Pin)
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d107      	bne.n	8000594 <HAL_GPIO_EXTI_Callback+0x98>
	     {
	         HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4816      	ldr	r0, [pc, #88]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800058a:	f000 fc21 	bl	8000dd0 <HAL_GPIO_WritePin>
	         set = 2;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_GPIO_EXTI_Callback+0xf0>)
 8000590:	2202      	movs	r2, #2
 8000592:	701a      	strb	r2, [r3, #0]
	     }

	  if(GPIO_Pin == SW1_UP_Pin)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	2b08      	cmp	r3, #8
 8000598:	d10d      	bne.n	80005b6 <HAL_GPIO_EXTI_Callback+0xba>
	     {
	         HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005a2:	f000 fc15 	bl	8000dd0 <HAL_GPIO_WritePin>
	         HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2110      	movs	r1, #16
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005ac:	f000 fc10 	bl	8000dd0 <HAL_GPIO_WritePin>
	         set = 3;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_GPIO_EXTI_Callback+0xf0>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	701a      	strb	r2, [r3, #0]
	     }

	  if(GPIO_Pin == SW1_DOWN_Pin)
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d10c      	bne.n	80005d6 <HAL_GPIO_EXTI_Callback+0xda>
	     {
	         HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005c2:	f000 fc05 	bl	8000dd0 <HAL_GPIO_WritePin>
	         HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005cc:	f000 fc00 	bl	8000dd0 <HAL_GPIO_WritePin>
	         set = 4;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_GPIO_EXTI_Callback+0xf0>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	701a      	strb	r2, [r3, #0]
	     }

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	48000800 	.word	0x48000800
 80005e4:	48001000 	.word	0x48001000
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	20000028 	.word	0x20000028

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6613      	str	r3, [r2, #96]	; 0x60
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f8b6 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_RIGHT_Pin);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fbaf 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_LEFT_Pin);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f000 fba8 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_DOWN_Pin);
 80006b8:	2004      	movs	r0, #4
 80006ba:	f000 fba1 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_UP_Pin);
 80006c6:	2008      	movs	r0, #8
 80006c8:	f000 fb9a 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_OK_Pin);
 80006d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006d8:	f000 fb92 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f7ff ffea 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 f9d5 	bl	8001ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fd59 	bl	80001ec <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800073c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000748:	08001b98 	.word	0x08001b98
  ldr r2, =_sbss
 800074c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000750:	20000030 	.word	0x20000030

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>

08000756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f961 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f80e 	bl	8000788 <HAL_InitTick>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e001      	b.n	800077c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000778:	f7ff ff40 	bl	80005fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077c:	79fb      	ldrb	r3, [r7, #7]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_InitTick+0x6c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d023      	beq.n	80007e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_InitTick+0x70>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_InitTick+0x6c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f96d 	bl	8000a92 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10f      	bne.n	80007de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d809      	bhi.n	80007d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f937 	bl	8000a3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_InitTick+0x74>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e007      	b.n	80007e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e004      	b.n	80007e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e001      	b.n	80007e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	2000002c 	.word	0x2000002c

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000002c 	.word	0x2000002c

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff ffee 	bl	8000828 <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffde 	bl	8000828 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff29 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff3e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff31 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffa2 	bl	80009e4 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e166      	b.n	8000d8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 8158 	beq.w	8000d84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x40>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	f003 0201 	and.w	r2, r3, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d017      	beq.n	8000b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d123      	bne.n	8000bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	6939      	ldr	r1, [r7, #16]
 8000bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0203 	and.w	r2, r3, #3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b2 	beq.w	8000d84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c20:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <HAL_GPIO_Init+0x2fc>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	4a60      	ldr	r2, [pc, #384]	; (8000da8 <HAL_GPIO_Init+0x2fc>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2c:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <HAL_GPIO_Init+0x2fc>)
 8000c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c38:	4a5c      	ldr	r2, [pc, #368]	; (8000dac <HAL_GPIO_Init+0x300>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c62:	d02b      	beq.n	8000cbc <HAL_GPIO_Init+0x210>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a52      	ldr	r2, [pc, #328]	; (8000db0 <HAL_GPIO_Init+0x304>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d025      	beq.n	8000cb8 <HAL_GPIO_Init+0x20c>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a51      	ldr	r2, [pc, #324]	; (8000db4 <HAL_GPIO_Init+0x308>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d01f      	beq.n	8000cb4 <HAL_GPIO_Init+0x208>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a50      	ldr	r2, [pc, #320]	; (8000db8 <HAL_GPIO_Init+0x30c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d019      	beq.n	8000cb0 <HAL_GPIO_Init+0x204>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4f      	ldr	r2, [pc, #316]	; (8000dbc <HAL_GPIO_Init+0x310>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <HAL_GPIO_Init+0x200>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_GPIO_Init+0x314>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_GPIO_Init+0x1fc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x318>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x1f8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x31c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_GPIO_Init+0x1f4>
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	e00e      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	e00c      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	e00a      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_Init+0x212>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cce:	4937      	ldr	r1, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x300>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d00:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d2a:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f47f ae91 	bne.w	8000abc <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000c00 	.word	0x48000c00
 8000dbc:	48001000 	.word	0x48001000
 8000dc0:	48001400 	.word	0x48001400
 8000dc4:	48001800 	.word	0x48001800
 8000dc8:	48001c00 	.word	0x48001c00
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dee:	887a      	ldrh	r2, [r7, #2]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb6c 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40007000 	.word	0x40007000

08000e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e5a:	d130      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e68:	d038      	beq.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e72:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2232      	movs	r2, #50	; 0x32
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	0c9b      	lsrs	r3, r3, #18
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e90:	e002      	b.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d102      	bne.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f2      	bne.n	8000e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb8:	d110      	bne.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e00f      	b.n	8000ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eca:	d007      	beq.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	431bde83 	.word	0x431bde83

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 bc16 	b.w	8001738 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0c:	4ba0      	ldr	r3, [pc, #640]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f16:	4b9e      	ldr	r3, [pc, #632]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80e4 	beq.w	80010f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d007      	beq.n	8000f44 <HAL_RCC_OscConfig+0x4c>
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	f040 808b 	bne.w	8001052 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	f040 8087 	bne.w	8001052 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f44:	4b92      	ldr	r3, [pc, #584]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_RCC_OscConfig+0x64>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e3ed      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1a      	ldr	r2, [r3, #32]
 8000f60:	4b8b      	ldr	r3, [pc, #556]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_RCC_OscConfig+0x7e>
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f74:	e005      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
 8000f76:	4b86      	ldr	r3, [pc, #536]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d223      	bcs.n	8000fce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fd48 	bl	8001a20 <RCC_SetFlashLatencyFromMSIRange>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e3ce      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9a:	4b7d      	ldr	r3, [pc, #500]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7c      	ldr	r2, [pc, #496]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4977      	ldr	r1, [pc, #476]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb8:	4b75      	ldr	r3, [pc, #468]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4972      	ldr	r1, [pc, #456]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e025      	b.n	800101a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fce:	4b70      	ldr	r3, [pc, #448]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6f      	ldr	r2, [pc, #444]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	496a      	ldr	r1, [pc, #424]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	4965      	ldr	r1, [pc, #404]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fd08 	bl	8001a20 <RCC_SetFlashLatencyFromMSIRange>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e38e      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800101a:	f000 fc75 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 800101e:	4602      	mov	r2, r0
 8001020:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	495a      	ldr	r1, [pc, #360]	; (8001194 <HAL_RCC_OscConfig+0x29c>)
 800102c:	5ccb      	ldrb	r3, [r1, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_RCC_OscConfig+0x2a0>)
 8001038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800103a:	4b58      	ldr	r3, [pc, #352]	; (800119c <HAL_RCC_OscConfig+0x2a4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fba2 	bl	8000788 <HAL_InitTick>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d052      	beq.n	80010f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	e372      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d032      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001066:	f7ff fbdf 	bl	8000828 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800106e:	f7ff fbdb 	bl	8000828 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e35b      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108c:	4b40      	ldr	r3, [pc, #256]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	493a      	ldr	r1, [pc, #232]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
 80010be:	e01a      	b.n	80010f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fbac 	bl	8000828 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d4:	f7ff fba8 	bl	8000828 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e328      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1dc>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d073      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b08      	cmp	r3, #8
 8001106:	d005      	beq.n	8001114 <HAL_RCC_OscConfig+0x21c>
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d10e      	bne.n	800112c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d10b      	bne.n	800112c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d063      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15f      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e305      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d106      	bne.n	8001144 <HAL_RCC_OscConfig+0x24c>
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0x288>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x270>
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0x288>
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_RCC_OscConfig+0x298>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01b      	beq.n	80011c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fb4e 	bl	8000828 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118e:	e010      	b.n	80011b2 <HAL_RCC_OscConfig+0x2ba>
 8001190:	40021000 	.word	0x40021000
 8001194:	08001b50 	.word	0x08001b50
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fb42 	bl	8000828 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e2c2      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b2:	4baf      	ldr	r3, [pc, #700]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x2a8>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fb32 	bl	8000828 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fb2e 	bl	8000828 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e2ae      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2d0>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d060      	beq.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_OscConfig+0x310>
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d119      	bne.n	8001236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d116      	bne.n	8001236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x328>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e28b      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b93      	ldr	r3, [pc, #588]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	4990      	ldr	r1, [pc, #576]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001234:	e040      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d023      	beq.n	8001286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8b      	ldr	r2, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff faed 	bl	8000828 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fae9 	bl	8000828 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e269      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001264:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	497c      	ldr	r1, [pc, #496]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
 8001284:	e018      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a79      	ldr	r2, [pc, #484]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800128c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fac9 	bl	8000828 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129a:	f7ff fac5 	bl	8000828 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e245      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ac:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03c      	beq.n	800133e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01c      	beq.n	8001306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012cc:	4b68      	ldr	r3, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d2:	4a67      	ldr	r2, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff faa4 	bl	8000828 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff faa0 	bl	8000828 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e220      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80012f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ef      	beq.n	80012e4 <HAL_RCC_OscConfig+0x3ec>
 8001304:	e01b      	b.n	800133e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130c:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff fa87 	bl	8000828 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fa83 	bl	8000828 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e203      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ef      	bne.n	800131e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80a6 	beq.w	8001498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10d      	bne.n	8001378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a43      	ldr	r2, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001374:	2301      	movs	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <HAL_RCC_OscConfig+0x57c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d118      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x57c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <HAL_RCC_OscConfig+0x57c>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001390:	f7ff fa4a 	bl	8000828 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001398:	f7ff fa46 	bl	8000828 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1c6      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <HAL_RCC_OscConfig+0x57c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d108      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4d8>
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ce:	e024      	b.n	800141a <HAL_RCC_OscConfig+0x522>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d110      	bne.n	80013fa <HAL_RCC_OscConfig+0x502>
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f8:	e00f      	b.n	800141a <HAL_RCC_OscConfig+0x522>
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 80013fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001412:	f023 0304 	bic.w	r3, r3, #4
 8001416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001422:	f7ff fa01 	bl	8000828 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff f9fd 	bl	8000828 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e17b      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x578>)
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0ed      	beq.n	800142a <HAL_RCC_OscConfig+0x532>
 800144e:	e01a      	b.n	8001486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff f9ea 	bl	8000828 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001456:	e00f      	b.n	8001478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff f9e6 	bl	8000828 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d906      	bls.n	8001478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e164      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	4ba8      	ldr	r3, [pc, #672]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1e8      	bne.n	8001458 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4ba3      	ldr	r3, [pc, #652]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4aa2      	ldr	r2, [pc, #648]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d03c      	beq.n	800151e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80014ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014b2:	4a9a      	ldr	r2, [pc, #616]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff f9b4 	bl	8000828 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c4:	f7ff f9b0 	bl	8000828 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e130      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014d6:	4b91      	ldr	r3, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80014d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ef      	beq.n	80014c4 <HAL_RCC_OscConfig+0x5cc>
 80014e4:	e01b      	b.n	800151e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80014e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ec:	4a8b      	ldr	r2, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff f997 	bl	8000828 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014fe:	f7ff f993 	bl	8000828 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e113      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001510:	4b82      	ldr	r3, [pc, #520]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ef      	bne.n	80014fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8107 	beq.w	8001736 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	2b02      	cmp	r3, #2
 800152e:	f040 80cb 	bne.w	80016c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001532:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	429a      	cmp	r2, r3
 8001544:	d12c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	3b01      	subs	r3, #1
 8001552:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d123      	bne.n	80015a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d11b      	bne.n	80015a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d113      	bne.n	80015a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d109      	bne.n	80015a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	3b01      	subs	r3, #1
 800159a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d06d      	beq.n	800167c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d068      	beq.n	8001678 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ba      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a55      	ldr	r2, [pc, #340]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ce:	f7ff f92b 	bl	8000828 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f927 	bl	8000828 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0a7      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_RCC_OscConfig+0x828>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001604:	3a01      	subs	r2, #1
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	4311      	orrs	r1, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800160e:	0212      	lsls	r2, r2, #8
 8001610:	4311      	orrs	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001616:	0852      	lsrs	r2, r2, #1
 8001618:	3a01      	subs	r2, #1
 800161a:	0552      	lsls	r2, r2, #21
 800161c:	4311      	orrs	r1, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	3a01      	subs	r2, #1
 8001626:	0652      	lsls	r2, r2, #25
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800162e:	06d2      	lsls	r2, r2, #27
 8001630:	430a      	orrs	r2, r1
 8001632:	493a      	ldr	r1, [pc, #232]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001634:	4313      	orrs	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a37      	ldr	r2, [pc, #220]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a34      	ldr	r2, [pc, #208]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001650:	f7ff f8ea 	bl	8000828 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f8e6 	bl	8000828 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e066      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001676:	e05e      	b.n	8001736 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e05d      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d156      	bne.n	8001736 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x824>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <HAL_RCC_OscConfig+0x824>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016a0:	f7ff f8c2 	bl	8000828 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f8be 	bl	8000828 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e03e      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x7b0>
 80016c6:	e036      	b.n	8001736 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d031      	beq.n	8001732 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x824>)
 80016f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff f891 	bl	8000828 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	e00c      	b.n	8001724 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f88d 	bl	8000828 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d905      	bls.n	8001724 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e00d      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
 800171c:	40021000 	.word	0x40021000
 8001720:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x848>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ec      	bne.n	800170a <HAL_RCC_OscConfig+0x812>
 8001730:	e001      	b.n	8001736 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0c8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d910      	bls.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4961      	ldr	r1, [pc, #388]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b0      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d04c      	beq.n	800182e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179c:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d121      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e09e      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d115      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e092      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e086      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07e      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 0203 	bic.w	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	493f      	ldr	r1, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017fe:	f7ff f813 	bl	8000828 <HAL_GetTick>
 8001802:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e00a      	b.n	800181c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f80f 	bl	8000828 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e066      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 020c 	and.w	r2, r3, #12
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	429a      	cmp	r2, r3
 800182c:	d1eb      	bne.n	8001806 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	492c      	ldr	r1, [pc, #176]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4924      	ldr	r1, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e036      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4918      	ldr	r1, [pc, #96]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4910      	ldr	r1, [pc, #64]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ba:	f000 f825 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490c      	ldr	r1, [pc, #48]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ff52 	bl	8000788 <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80018e8:	7afb      	ldrb	r3, [r7, #11]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08001b50 	.word	0x08001b50
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d121      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11e      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e005      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001964:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d102      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	e004      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d101      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x114>)
 800198e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d134      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0xa6>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d003      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0xac>
 80019ac:	e005      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80019b0:	617b      	str	r3, [r7, #20]
      break;
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x114>)
 80019b6:	617b      	str	r3, [r7, #20]
      break;
 80019b8:	e002      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	617b      	str	r3, [r7, #20]
      break;
 80019be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	3301      	adds	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	fb02 f203 	mul.w	r2, r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	0e5b      	lsrs	r3, r3, #25
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	3301      	adds	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a00:	69bb      	ldr	r3, [r7, #24]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08001b60 	.word	0x08001b60
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a38:	f7ff f9fa 	bl	8000e30 <HAL_PWREx_GetVoltageRange>
 8001a3c:	6178      	str	r0, [r7, #20]
 8001a3e:	e014      	b.n	8001a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a58:	f7ff f9ea 	bl	8000e30 <HAL_PWREx_GetVoltageRange>
 8001a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d10b      	bne.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d919      	bls.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a7c:	d902      	bls.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a7e:	2302      	movs	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e013      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e010      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b80      	cmp	r3, #128	; 0x80
 8001a8e:	d902      	bls.n	8001a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a90:	2303      	movs	r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e00a      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d102      	bne.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	e004      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d101      	bne.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 0207 	bic.w	r2, r3, #7
 8001ab4:	4909      	ldr	r1, [pc, #36]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40022000 	.word	0x40022000

08001ae0 <__libc_init_array>:
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	4d0d      	ldr	r5, [pc, #52]	; (8001b18 <__libc_init_array+0x38>)
 8001ae4:	4c0d      	ldr	r4, [pc, #52]	; (8001b1c <__libc_init_array+0x3c>)
 8001ae6:	1b64      	subs	r4, r4, r5
 8001ae8:	10a4      	asrs	r4, r4, #2
 8001aea:	2600      	movs	r6, #0
 8001aec:	42a6      	cmp	r6, r4
 8001aee:	d109      	bne.n	8001b04 <__libc_init_array+0x24>
 8001af0:	4d0b      	ldr	r5, [pc, #44]	; (8001b20 <__libc_init_array+0x40>)
 8001af2:	4c0c      	ldr	r4, [pc, #48]	; (8001b24 <__libc_init_array+0x44>)
 8001af4:	f000 f820 	bl	8001b38 <_init>
 8001af8:	1b64      	subs	r4, r4, r5
 8001afa:	10a4      	asrs	r4, r4, #2
 8001afc:	2600      	movs	r6, #0
 8001afe:	42a6      	cmp	r6, r4
 8001b00:	d105      	bne.n	8001b0e <__libc_init_array+0x2e>
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
 8001b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b08:	4798      	blx	r3
 8001b0a:	3601      	adds	r6, #1
 8001b0c:	e7ee      	b.n	8001aec <__libc_init_array+0xc>
 8001b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b12:	4798      	blx	r3
 8001b14:	3601      	adds	r6, #1
 8001b16:	e7f2      	b.n	8001afe <__libc_init_array+0x1e>
 8001b18:	08001b90 	.word	0x08001b90
 8001b1c:	08001b90 	.word	0x08001b90
 8001b20:	08001b90 	.word	0x08001b90
 8001b24:	08001b94 	.word	0x08001b94

08001b28 <memset>:
 8001b28:	4402      	add	r2, r0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <memset+0xa>
 8001b30:	4770      	bx	lr
 8001b32:	f803 1b01 	strb.w	r1, [r3], #1
 8001b36:	e7f9      	b.n	8001b2c <memset+0x4>

08001b38 <_init>:
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3a:	bf00      	nop
 8001b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3e:	bc08      	pop	{r3}
 8001b40:	469e      	mov	lr, r3
 8001b42:	4770      	bx	lr

08001b44 <_fini>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	bf00      	nop
 8001b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	469e      	mov	lr, r3
 8001b4e:	4770      	bx	lr
