
3.1.1 Poprawa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a18  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c0c  08001c0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c10  08001c10  00011c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001c20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001c20  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c84  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000133d  00000000  00000000  00026cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  00028000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  000285e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c42  00000000  00000000  00028b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006422  00000000  00000000  0005076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f29b1  00000000  00000000  00056b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014953d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000156c  00000000  00000000  00149590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001bac 	.word	0x08001bac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001bac 	.word	0x08001bac

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08c      	sub	sp, #48	; 0x30
 80001f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	f107 031c 	add.w	r3, r7, #28
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000202:	4b85      	ldr	r3, [pc, #532]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	4a84      	ldr	r2, [pc, #528]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000208:	f043 0310 	orr.w	r3, r3, #16
 800020c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800020e:	4b82      	ldr	r3, [pc, #520]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	f003 0310 	and.w	r3, r3, #16
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800021a:	4b7f      	ldr	r3, [pc, #508]	; (8000418 <MX_GPIO_Init+0x22c>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a7e      	ldr	r2, [pc, #504]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000220:	f043 0320 	orr.w	r3, r3, #32
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b7c      	ldr	r3, [pc, #496]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0320 	and.w	r3, r3, #32
 800022e:	617b      	str	r3, [r7, #20]
 8000230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b79      	ldr	r3, [pc, #484]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	4a78      	ldr	r2, [pc, #480]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023e:	4b76      	ldr	r3, [pc, #472]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	613b      	str	r3, [r7, #16]
 8000248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800024a:	4b73      	ldr	r3, [pc, #460]	; (8000418 <MX_GPIO_Init+0x22c>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	4a72      	ldr	r2, [pc, #456]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000256:	4b70      	ldr	r3, [pc, #448]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000262:	4b6d      	ldr	r3, [pc, #436]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	4a6c      	ldr	r2, [pc, #432]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000268:	f043 0308 	orr.w	r3, r3, #8
 800026c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026e:	4b6a      	ldr	r3, [pc, #424]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000272:	f003 0308 	and.w	r3, r3, #8
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800027a:	f000 fe67 	bl	8000f4c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027e:	4b66      	ldr	r3, [pc, #408]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	4a65      	ldr	r2, [pc, #404]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028a:	4b63      	ldr	r3, [pc, #396]	; (8000418 <MX_GPIO_Init+0x22c>)
 800028c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028e:	f003 0304 	and.w	r3, r3, #4
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b60      	ldr	r3, [pc, #384]	; (8000418 <MX_GPIO_Init+0x22c>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029a:	4a5f      	ldr	r2, [pc, #380]	; (8000418 <MX_GPIO_Init+0x22c>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a2:	4b5d      	ldr	r3, [pc, #372]	; (8000418 <MX_GPIO_Init+0x22c>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80002b4:	4859      	ldr	r0, [pc, #356]	; (800041c <MX_GPIO_Init+0x230>)
 80002b6:	f000 fda9 	bl	8000e0c <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	4858      	ldr	r0, [pc, #352]	; (8000420 <MX_GPIO_Init+0x234>)
 80002c0:	f000 fda4 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 80002c4:	2200      	movs	r2, #0
 80002c6:	f242 013c 	movw	r1, #8252	; 0x203c
 80002ca:	4856      	ldr	r0, [pc, #344]	; (8000424 <MX_GPIO_Init+0x238>)
 80002cc:	f000 fd9e 	bl	8000e0c <HAL_GPIO_WritePin>
                          |SEG7_DIG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 80002d0:	2200      	movs	r2, #0
 80002d2:	f240 217f 	movw	r1, #639	; 0x27f
 80002d6:	4854      	ldr	r0, [pc, #336]	; (8000428 <MX_GPIO_Init+0x23c>)
 80002d8:	f000 fd98 	bl	8000e0c <HAL_GPIO_WritePin>
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D0_Pin|LCD_D0D15_Pin|LCD_D2_Pin|LCD_D3_Pin
 80002dc:	2200      	movs	r2, #0
 80002de:	f24c 013b 	movw	r1, #49211	; 0xc03b
 80002e2:	4852      	ldr	r0, [pc, #328]	; (800042c <MX_GPIO_Init+0x240>)
 80002e4:	f000 fd92 	bl	8000e0c <HAL_GPIO_WritePin>
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80002ee:	4850      	ldr	r0, [pc, #320]	; (8000430 <MX_GPIO_Init+0x244>)
 80002f0:	f000 fd8c 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_DOWN_Pin|SW_UP_Pin|SW_OK_Pin|SW_RIGHT_Pin
 80002f4:	f248 030f 	movw	r3, #32783	; 0x800f
 80002f8:	61fb      	str	r3, [r7, #28]
                          |SW_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <MX_GPIO_Init+0x248>)
 80002fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000302:	f107 031c 	add.w	r3, r7, #28
 8000306:	4619      	mov	r1, r3
 8000308:	4844      	ldr	r0, [pc, #272]	; (800041c <MX_GPIO_Init+0x230>)
 800030a:	f000 fbed 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED6_Pin|LED7_Pin|LCD_D4_Pin
 800030e:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000312:	61fb      	str	r3, [r7, #28]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2300      	movs	r3, #0
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	4619      	mov	r1, r3
 8000326:	483d      	ldr	r0, [pc, #244]	; (800041c <MX_GPIO_Init+0x230>)
 8000328:	f000 fbde 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 800032c:	2304      	movs	r3, #4
 800032e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 031c 	add.w	r3, r7, #28
 8000340:	4619      	mov	r1, r3
 8000342:	4837      	ldr	r0, [pc, #220]	; (8000420 <MX_GPIO_Init+0x234>)
 8000344:	f000 fbd0 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG7_DIG1_Pin|LCD_BKL_Pin|SEG7_DIG2_Pin|SEG7_DIG3_Pin
 8000348:	f242 033c 	movw	r3, #8252	; 0x203c
 800034c:	61fb      	str	r3, [r7, #28]
                          |SEG7_DIG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4619      	mov	r1, r3
 8000360:	4830      	ldr	r0, [pc, #192]	; (8000424 <MX_GPIO_Init+0x238>)
 8000362:	f000 fbc1 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8000366:	f240 237f 	movw	r3, #639	; 0x27f
 800036a:	61fb      	str	r3, [r7, #28]
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin|SEG7_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2300      	movs	r3, #0
 8000376:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	4619      	mov	r1, r3
 800037e:	482a      	ldr	r0, [pc, #168]	; (8000428 <MX_GPIO_Init+0x23c>)
 8000380:	f000 fbb2 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D0D15_Pin|LCD_D2_Pin|LCD_D3_Pin
 8000384:	f24c 033b 	movw	r3, #49211	; 0xc03b
 8000388:	61fb      	str	r3, [r7, #28]
                          |LED5_Pin|LCD_RW_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	4619      	mov	r1, r3
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <MX_GPIO_Init+0x240>)
 800039e:	f000 fba3 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80003a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80003a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	4619      	mov	r1, r3
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <MX_GPIO_Init+0x244>)
 80003bc:	f000 fb94 	bl	8000ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2100      	movs	r1, #0
 80003c4:	2006      	movs	r0, #6
 80003c6:	f000 fb58 	bl	8000a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003ca:	2006      	movs	r0, #6
 80003cc:	f000 fb71 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2007      	movs	r0, #7
 80003d6:	f000 fb50 	bl	8000a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80003da:	2007      	movs	r0, #7
 80003dc:	f000 fb69 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2008      	movs	r0, #8
 80003e6:	f000 fb48 	bl	8000a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003ea:	2008      	movs	r0, #8
 80003ec:	f000 fb61 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2100      	movs	r1, #0
 80003f4:	2009      	movs	r0, #9
 80003f6:	f000 fb40 	bl	8000a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80003fa:	2009      	movs	r0, #9
 80003fc:	f000 fb59 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2100      	movs	r1, #0
 8000404:	2028      	movs	r0, #40	; 0x28
 8000406:	f000 fb38 	bl	8000a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800040a:	2028      	movs	r0, #40	; 0x28
 800040c:	f000 fb51 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

}
 8000410:	bf00      	nop
 8000412:	3730      	adds	r7, #48	; 0x30
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48001000 	.word	0x48001000
 8000420:	48001400 	.word	0x48001400
 8000424:	48000400 	.word	0x48000400
 8000428:	48001800 	.word	0x48001800
 800042c:	48000c00 	.word	0x48000c00
 8000430:	48000800 	.word	0x48000800
 8000434:	10210000 	.word	0x10210000

08000438 <SEG_SetModule>:
	HAL_GPIO_WritePin(GPIOG, SEG7_Msk, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOG, SEG_Bin2Dec[value], GPIO_PIN_SET);

}

void SEG_SetModule(uint8_t module){
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	module &= 0x03;
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f003 0303 	and.w	r3, r3, #3
 8000448:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SEG7_MOD_Msk, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	213c      	movs	r1, #60	; 0x3c
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <SEG_SetModule+0x38>)
 8000450:	f000 fcdc 	bl	8000e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_Module[module], GPIO_PIN_SET);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <SEG_SetModule+0x3c>)
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <SEG_SetModule+0x38>)
 8000462:	f000 fcd3 	bl	8000e0c <HAL_GPIO_WritePin>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	48000400 	.word	0x48000400
 8000474:	08001bc4 	.word	0x08001bc4

08000478 <SEG_DisplayDec>:
		SEG_Mux();
		SEG_Delay=0;
	}
}

void SEG_DisplayDec(uint16_t value){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	80fb      	strh	r3, [r7, #6]
	if((value >=0)&&(value<10000)){
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	f242 720f 	movw	r2, #9999	; 0x270f
 8000488:	4293      	cmp	r3, r2
 800048a:	d85e      	bhi.n	800054a <SEG_DisplayDec+0xd2>
		SEG_Value[0]=(value % 10);
 800048c:	88fa      	ldrh	r2, [r7, #6]
 800048e:	4b32      	ldr	r3, [pc, #200]	; (8000558 <SEG_DisplayDec+0xe0>)
 8000490:	fba3 1302 	umull	r1, r3, r3, r2
 8000494:	08d9      	lsrs	r1, r3, #3
 8000496:	460b      	mov	r3, r1
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	440b      	add	r3, r1
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <SEG_DisplayDec+0xe4>)
 80004a6:	701a      	strb	r2, [r3, #0]
		value /=10;
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <SEG_DisplayDec+0xe0>)
 80004ac:	fba2 2303 	umull	r2, r3, r2, r3
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	80fb      	strh	r3, [r7, #6]
		SEG_Value[1]= value ? (value % 10) : 0;
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00c      	beq.n	80004d4 <SEG_DisplayDec+0x5c>
 80004ba:	88fa      	ldrh	r2, [r7, #6]
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <SEG_DisplayDec+0xe0>)
 80004be:	fba3 1302 	umull	r1, r3, r3, r2
 80004c2:	08d9      	lsrs	r1, r3, #3
 80004c4:	460b      	mov	r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	e000      	b.n	80004d6 <SEG_DisplayDec+0x5e>
 80004d4:	2300      	movs	r3, #0
 80004d6:	4a21      	ldr	r2, [pc, #132]	; (800055c <SEG_DisplayDec+0xe4>)
 80004d8:	7053      	strb	r3, [r2, #1]
		value /= 10;
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <SEG_DisplayDec+0xe0>)
 80004de:	fba2 2303 	umull	r2, r3, r2, r3
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	80fb      	strh	r3, [r7, #6]
		SEG_Value[2]= value ? (value % 10) : 0;
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00c      	beq.n	8000506 <SEG_DisplayDec+0x8e>
 80004ec:	88fa      	ldrh	r2, [r7, #6]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <SEG_DisplayDec+0xe0>)
 80004f0:	fba3 1302 	umull	r1, r3, r3, r2
 80004f4:	08d9      	lsrs	r1, r3, #3
 80004f6:	460b      	mov	r3, r1
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	440b      	add	r3, r1
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	b29b      	uxth	r3, r3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	e000      	b.n	8000508 <SEG_DisplayDec+0x90>
 8000506:	2300      	movs	r3, #0
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <SEG_DisplayDec+0xe4>)
 800050a:	7093      	strb	r3, [r2, #2]
		value /= 10;
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <SEG_DisplayDec+0xe0>)
 8000510:	fba2 2303 	umull	r2, r3, r2, r3
 8000514:	08db      	lsrs	r3, r3, #3
 8000516:	80fb      	strh	r3, [r7, #6]
		SEG_Value[3]= value ? (value % 10) : 0;
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00c      	beq.n	8000538 <SEG_DisplayDec+0xc0>
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <SEG_DisplayDec+0xe0>)
 8000522:	fba3 1302 	umull	r1, r3, r3, r2
 8000526:	08d9      	lsrs	r1, r3, #3
 8000528:	460b      	mov	r3, r1
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	440b      	add	r3, r1
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	b29b      	uxth	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	e000      	b.n	800053a <SEG_DisplayDec+0xc2>
 8000538:	2300      	movs	r3, #0
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <SEG_DisplayDec+0xe4>)
 800053c:	70d3      	strb	r3, [r2, #3]
		value /= 10;
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <SEG_DisplayDec+0xe0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	80fb      	strh	r3, [r7, #6]
	}
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	cccccccd 	.word	0xcccccccd
 800055c:	20000028 	.word	0x20000028

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 f914 	bl	8000792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f819 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f7ff fe3d 	bl	80001ec <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SEG_SetModule(0);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff60 	bl	8000438 <SEG_SetModule>
	  		for(int i=0; i<10000; i++)
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	e00a      	b.n	8000594 <main+0x34>
	  		{
	  			SEG_DisplayDec(i);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff78 	bl	8000478 <SEG_DisplayDec>
	  			HAL_Delay(20);
 8000588:	2014      	movs	r0, #20
 800058a:	f000 f977 	bl	800087c <HAL_Delay>
	  		for(int i=0; i<10000; i++)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f242 720f 	movw	r2, #9999	; 0x270f
 800059a:	4293      	cmp	r3, r2
 800059c:	ddef      	ble.n	800057e <main+0x1e>
	  SEG_SetModule(0);
 800059e:	e7e8      	b.n	8000572 <main+0x12>

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 faf4 	bl	8001b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c6:	f000 fc6b 	bl	8000ea0 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 f82c 	bl	800062c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fcbd 	bl	8000f6c <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005f8:	f000 f818 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f8cf 	bl	80017b8 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000620:	f000 f804 	bl	800062c <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3758      	adds	r7, #88	; 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6613      	str	r3, [r2, #96]	; 0x60
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f8b6 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fbaf 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f000 fba8 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80006f4:	2004      	movs	r0, #4
 80006f6:	f000 fba1 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}

080006fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000702:	2008      	movs	r0, #8
 8000704:	f000 fb9a 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000710:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000714:	f000 fb92 	bl	8000e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000744:	f7ff ffea 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	; (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076e:	f001 f9f1 	bl	8001b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000772:	f7ff fef5 	bl	8000560 <main>

08000776 <LoopForever>:

LoopForever:
    b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000778:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000784:	08001c14 	.word	0x08001c14
  ldr r2, =_sbss
 8000788:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800078c:	20000030 	.word	0x20000030

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>

08000792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f961 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f80e 	bl	80007c4 <HAL_InitTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	e001      	b.n	80007b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b4:	f7ff ff40 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_InitTick+0x70>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_InitTick+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f96d 	bl	8000ace <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10f      	bne.n	800081a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d809      	bhi.n	8000814 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f937 	bl	8000a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_InitTick+0x74>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e007      	b.n	8000824 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e004      	b.n	8000824 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e001      	b.n	8000824 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000000 	.word	0x20000000
 8000838:	20000004 	.word	0x20000004

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	2000002c 	.word	0x2000002c

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000002c 	.word	0x2000002c

0800087c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff ffee 	bl	8000864 <HAL_GetTick>
 8000888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000894:	d005      	beq.n	80008a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_Delay+0x44>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffde 	bl	8000864 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8f7      	bhi.n	80008a4 <HAL_Delay+0x28>
  {
  }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 021f 	and.w	r2, r3, #31
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <__NVIC_EnableIRQ+0x38>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f7ff ff8e 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff29 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff3e 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff8e 	bl	80009b8 <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5d 	bl	8000964 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff31 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa2 	bl	8000a20 <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e166      	b.n	8000dc6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	2101      	movs	r1, #1
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8158 	beq.w	8000dc0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d00b      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	2b11      	cmp	r3, #17
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b12      	cmp	r3, #18
 8000b2e:	d130      	bne.n	8000b92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	f003 0201 	and.w	r2, r3, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0xea>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d123      	bne.n	8000c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	6939      	ldr	r1, [r7, #16]
 8000c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0203 	and.w	r2, r3, #3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 80b2 	beq.w	8000dc0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5c:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <HAL_GPIO_Init+0x2fc>)
 8000c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c60:	4a60      	ldr	r2, [pc, #384]	; (8000de4 <HAL_GPIO_Init+0x2fc>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6613      	str	r3, [r2, #96]	; 0x60
 8000c68:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <HAL_GPIO_Init+0x2fc>)
 8000c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c74:	4a5c      	ldr	r2, [pc, #368]	; (8000de8 <HAL_GPIO_Init+0x300>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c9e:	d02b      	beq.n	8000cf8 <HAL_GPIO_Init+0x210>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a52      	ldr	r2, [pc, #328]	; (8000dec <HAL_GPIO_Init+0x304>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d025      	beq.n	8000cf4 <HAL_GPIO_Init+0x20c>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a51      	ldr	r2, [pc, #324]	; (8000df0 <HAL_GPIO_Init+0x308>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d01f      	beq.n	8000cf0 <HAL_GPIO_Init+0x208>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a50      	ldr	r2, [pc, #320]	; (8000df4 <HAL_GPIO_Init+0x30c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d019      	beq.n	8000cec <HAL_GPIO_Init+0x204>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <HAL_GPIO_Init+0x310>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_GPIO_Init+0x200>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_GPIO_Init+0x314>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00d      	beq.n	8000ce4 <HAL_GPIO_Init+0x1fc>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4d      	ldr	r2, [pc, #308]	; (8000e00 <HAL_GPIO_Init+0x318>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x1f8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <HAL_GPIO_Init+0x31c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_GPIO_Init+0x1f4>
 8000cd8:	2307      	movs	r3, #7
 8000cda:	e00e      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cdc:	2308      	movs	r3, #8
 8000cde:	e00c      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	e00a      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	e008      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d0a:	4937      	ldr	r1, [pc, #220]	; (8000de8 <HAL_GPIO_Init+0x300>)
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d3c:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_GPIO_Init+0x320>)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f47f ae91 	bne.w	8000af8 <HAL_GPIO_Init+0x10>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48000c00 	.word	0x48000c00
 8000df8:	48001000 	.word	0x48001000
 8000dfc:	48001400 	.word	0x48001400
 8000e00:	48001800 	.word	0x48001800
 8000e04:	48001c00 	.word	0x48001c00
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e48:	695a      	ldr	r2, [r3, #20]
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f806 	bl	8000e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eae:	d130      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ebc:	d038      	beq.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ecc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2232      	movs	r2, #50	; 0x32
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee4:	e002      	b.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef8:	d102      	bne.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f2      	bne.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0c:	d110      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e00f      	b.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d007      	beq.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40007000 	.word	0x40007000
 8000f44:	20000000 	.word	0x20000000
 8000f48:	431bde83 	.word	0x431bde83

08000f4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6053      	str	r3, [r2, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f000 bc16 	b.w	80017ac <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f80:	4ba0      	ldr	r3, [pc, #640]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8a:	4b9e      	ldr	r3, [pc, #632]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0310 	and.w	r3, r3, #16
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80e4 	beq.w	800116a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4c>
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b0c      	cmp	r3, #12
 8000fac:	f040 808b 	bne.w	80010c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	f040 8087 	bne.w	80010c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fb8:	4b92      	ldr	r3, [pc, #584]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x64>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e3ed      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_RCC_OscConfig+0x7e>
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fe8:	e005      	b.n	8000ff6 <HAL_RCC_OscConfig+0x8a>
 8000fea:	4b86      	ldr	r3, [pc, #536]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8000fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d223      	bcs.n	8001042 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fd48 	bl	8001a94 <RCC_SetFlashLatencyFromMSIRange>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e3ce      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800100e:	4b7d      	ldr	r3, [pc, #500]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7c      	ldr	r2, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b7a      	ldr	r3, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4977      	ldr	r1, [pc, #476]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001028:	4313      	orrs	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	4972      	ldr	r1, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
 8001040:	e025      	b.n	800108e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	496a      	ldr	r1, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	4965      	ldr	r1, [pc, #404]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fd08 	bl	8001a94 <RCC_SetFlashLatencyFromMSIRange>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e38e      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800108e:	f000 fc75 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001092:	4602      	mov	r2, r0
 8001094:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	495a      	ldr	r1, [pc, #360]	; (8001208 <HAL_RCC_OscConfig+0x29c>)
 80010a0:	5ccb      	ldrb	r3, [r1, r3]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_RCC_OscConfig+0x2a0>)
 80010ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ae:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_RCC_OscConfig+0x2a4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb86 	bl	80007c4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d052      	beq.n	8001168 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	e372      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d032      	beq.n	8001134 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ce:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010da:	f7ff fbc3 	bl	8000864 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e2:	f7ff fbbf 	bl	8000864 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e35b      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f4:	4b43      	ldr	r3, [pc, #268]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a3f      	ldr	r2, [pc, #252]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	493a      	ldr	r1, [pc, #232]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
 8001132:	e01a      	b.n	800116a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a32      	ldr	r2, [pc, #200]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001140:	f7ff fb90 	bl	8000864 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001148:	f7ff fb8c 	bl	8000864 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e328      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1dc>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d073      	beq.n	800125e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b08      	cmp	r3, #8
 800117a:	d005      	beq.n	8001188 <HAL_RCC_OscConfig+0x21c>
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d10b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d063      	beq.n	800125c <HAL_RCC_OscConfig+0x2f0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d15f      	bne.n	800125c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e305      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x24c>
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0x288>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x270>
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0x288>
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_RCC_OscConfig+0x298>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01b      	beq.n	8001234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fb32 	bl	8000864 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	e010      	b.n	8001226 <HAL_RCC_OscConfig+0x2ba>
 8001204:	40021000 	.word	0x40021000
 8001208:	08001bcc 	.word	0x08001bcc
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fb26 	bl	8000864 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e2c2      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001226:	4baf      	ldr	r3, [pc, #700]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x2a8>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fb16 	bl	8000864 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fb12 	bl	8000864 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e2ae      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124e:	4ba5      	ldr	r3, [pc, #660]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x2d0>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d060      	beq.n	800132c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b04      	cmp	r3, #4
 800126e:	d005      	beq.n	800127c <HAL_RCC_OscConfig+0x310>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	d119      	bne.n	80012aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d116      	bne.n	80012aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	4b99      	ldr	r3, [pc, #612]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x328>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e28b      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4990      	ldr	r1, [pc, #576]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a8:	e040      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d023      	beq.n	80012fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b2:	4b8c      	ldr	r3, [pc, #560]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a8b      	ldr	r2, [pc, #556]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fad1 	bl	8000864 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff facd 	bl	8000864 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e269      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d8:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	061b      	lsls	r3, r3, #24
 80012f2:	497c      	ldr	r1, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e018      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b7a      	ldr	r3, [pc, #488]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a79      	ldr	r2, [pc, #484]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff faad 	bl	8000864 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff faa9 	bl	8000864 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e245      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01c      	beq.n	800137a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001346:	4a67      	ldr	r2, [pc, #412]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fa88 	bl	8000864 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fa84 	bl	8000864 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e220      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ef      	beq.n	8001358 <HAL_RCC_OscConfig+0x3ec>
 8001378:	e01b      	b.n	80013b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fa6b 	bl	8000864 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff fa67 	bl	8000864 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e203      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80013a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ef      	bne.n	8001392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80a6 	beq.w	800150c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10d      	bne.n	80013ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a43      	ldr	r2, [pc, #268]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
 80013dc:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <HAL_RCC_OscConfig+0x57c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d118      	bne.n	800142a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x57c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <HAL_RCC_OscConfig+0x57c>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001404:	f7ff fa2e 	bl	8000864 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140c:	f7ff fa2a 	bl	8000864 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1c6      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <HAL_RCC_OscConfig+0x57c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_RCC_OscConfig+0x4d8>
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001438:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001442:	e024      	b.n	800148e <HAL_RCC_OscConfig+0x522>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d110      	bne.n	800146e <HAL_RCC_OscConfig+0x502>
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	e00f      	b.n	800148e <HAL_RCC_OscConfig+0x522>
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff f9e5 	bl	8000864 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff f9e1 	bl	8000864 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e17b      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x578>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ed      	beq.n	800149e <HAL_RCC_OscConfig+0x532>
 80014c2:	e01a      	b.n	80014fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff f9ce 	bl	8000864 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff f9ca 	bl	8000864 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d906      	bls.n	80014ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e164      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ec:	4ba8      	ldr	r3, [pc, #672]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e8      	bne.n	80014cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001500:	4ba3      	ldr	r3, [pc, #652]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4aa2      	ldr	r2, [pc, #648]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b00      	cmp	r3, #0
 8001516:	d03c      	beq.n	8001592 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01c      	beq.n	800155a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001520:	4b9b      	ldr	r3, [pc, #620]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001526:	4a9a      	ldr	r2, [pc, #616]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff f998 	bl	8000864 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001538:	f7ff f994 	bl	8000864 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e130      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800154a:	4b91      	ldr	r3, [pc, #580]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800154c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ef      	beq.n	8001538 <HAL_RCC_OscConfig+0x5cc>
 8001558:	e01b      	b.n	8001592 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800155a:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800155c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001560:	4a8b      	ldr	r2, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff f97b 	bl	8000864 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001572:	f7ff f977 	bl	8000864 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e113      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001584:	4b82      	ldr	r3, [pc, #520]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ef      	bne.n	8001572 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8107 	beq.w	80017aa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	f040 80cb 	bne.w	800173c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015a6:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 0203 	and.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d12c      	bne.n	8001614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	3b01      	subs	r3, #1
 80015c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d123      	bne.n	8001614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d11b      	bne.n	8001614 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d113      	bne.n	8001614 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d109      	bne.n	8001614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	3b01      	subs	r3, #1
 800160e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d06d      	beq.n	80016f0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d068      	beq.n	80016ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001626:	4b5a      	ldr	r3, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0ba      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001636:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a55      	ldr	r2, [pc, #340]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800163c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001640:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001642:	f7ff f90f 	bl	8000864 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f90b 	bl	8000864 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0a7      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_RCC_OscConfig+0x828>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001678:	3a01      	subs	r2, #1
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	4311      	orrs	r1, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001682:	0212      	lsls	r2, r2, #8
 8001684:	4311      	orrs	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800168a:	0852      	lsrs	r2, r2, #1
 800168c:	3a01      	subs	r2, #1
 800168e:	0552      	lsls	r2, r2, #21
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001696:	0852      	lsrs	r2, r2, #1
 8001698:	3a01      	subs	r2, #1
 800169a:	0652      	lsls	r2, r2, #25
 800169c:	4311      	orrs	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a2:	06d2      	lsls	r2, r2, #27
 80016a4:	430a      	orrs	r2, r1
 80016a6:	493a      	ldr	r1, [pc, #232]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4a34      	ldr	r2, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016c4:	f7ff f8ce 	bl	8000864 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f8ca 	bl	8000864 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e066      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ea:	e05e      	b.n	80017aa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e05d      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d156      	bne.n	80017aa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001714:	f7ff f8a6 	bl	8000864 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f8a2 	bl	8000864 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e03e      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x7b0>
 800173a:	e036      	b.n	80017aa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d031      	beq.n	80017a6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_RCC_OscConfig+0x824>)
 800176c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff f875 	bl	8000864 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	e00c      	b.n	8001798 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff f871 	bl	8000864 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d905      	bls.n	8001798 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e00d      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
 8001790:	40021000 	.word	0x40021000
 8001794:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x848>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ec      	bne.n	800177e <HAL_RCC_OscConfig+0x812>
 80017a4:	e001      	b.n	80017aa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0c8      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d910      	bls.n	80017fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 0207 	bic.w	r2, r3, #7
 80017e2:	4961      	ldr	r1, [pc, #388]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b0      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d04c      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d121      	bne.n	8001860 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e09e      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d107      	bne.n	8001838 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d115      	bne.n	8001860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e092      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001840:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e086      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e07e      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001860:	4b42      	ldr	r3, [pc, #264]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 0203 	bic.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	493f      	ldr	r1, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001872:	f7fe fff7 	bl	8000864 <HAL_GetTick>
 8001876:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001878:	e00a      	b.n	8001890 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187a:	f7fe fff3 	bl	8000864 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e066      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 020c 	and.w	r2, r3, #12
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	429a      	cmp	r2, r3
 80018a0:	d1eb      	bne.n	800187a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d210      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0207 	bic.w	r2, r3, #7
 80018d6:	4924      	ldr	r1, [pc, #144]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e036      	b.n	800195e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4918      	ldr	r1, [pc, #96]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4910      	ldr	r1, [pc, #64]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800192e:	f000 f825 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_ClockConfig+0x1b4>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490c      	ldr	r1, [pc, #48]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe ff36 	bl	80007c4 <HAL_InitTick>
 8001958:	4603      	mov	r3, r0
 800195a:	72fb      	strb	r3, [r7, #11]

  return status;
 800195c:	7afb      	ldrb	r3, [r7, #11]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
 8001970:	08001bcc 	.word	0x08001bcc
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001994:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d121      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d11e      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e005      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	e004      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d134      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d003      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xac>
 8001a20:	e005      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a24:	617b      	str	r3, [r7, #20]
      break;
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2a:	617b      	str	r3, [r7, #20]
      break;
 8001a2c:	e002      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	617b      	str	r3, [r7, #20]
      break;
 8001a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	3301      	adds	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	fb02 f203 	mul.w	r2, r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	0e5b      	lsrs	r3, r3, #25
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	3301      	adds	r3, #1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a74:	69bb      	ldr	r3, [r7, #24]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08001bdc 	.word	0x08001bdc
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200

08001a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aac:	f7ff f9ea 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
 8001ab0:	6178      	str	r0, [r7, #20]
 8001ab2:	e014      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001acc:	f7ff f9da 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
 8001ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae4:	d10b      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d919      	bls.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2ba0      	cmp	r3, #160	; 0xa0
 8001af0:	d902      	bls.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e013      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e010      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	d902      	bls.n	8001b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b04:	2303      	movs	r3, #3
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e00a      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d102      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e004      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b70      	cmp	r3, #112	; 0x70
 8001b1a:	d101      	bne.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 0207 	bic.w	r2, r3, #7
 8001b28:	4909      	ldr	r1, [pc, #36]	; (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <__libc_init_array>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4d0d      	ldr	r5, [pc, #52]	; (8001b8c <__libc_init_array+0x38>)
 8001b58:	4c0d      	ldr	r4, [pc, #52]	; (8001b90 <__libc_init_array+0x3c>)
 8001b5a:	1b64      	subs	r4, r4, r5
 8001b5c:	10a4      	asrs	r4, r4, #2
 8001b5e:	2600      	movs	r6, #0
 8001b60:	42a6      	cmp	r6, r4
 8001b62:	d109      	bne.n	8001b78 <__libc_init_array+0x24>
 8001b64:	4d0b      	ldr	r5, [pc, #44]	; (8001b94 <__libc_init_array+0x40>)
 8001b66:	4c0c      	ldr	r4, [pc, #48]	; (8001b98 <__libc_init_array+0x44>)
 8001b68:	f000 f820 	bl	8001bac <_init>
 8001b6c:	1b64      	subs	r4, r4, r5
 8001b6e:	10a4      	asrs	r4, r4, #2
 8001b70:	2600      	movs	r6, #0
 8001b72:	42a6      	cmp	r6, r4
 8001b74:	d105      	bne.n	8001b82 <__libc_init_array+0x2e>
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
 8001b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b7c:	4798      	blx	r3
 8001b7e:	3601      	adds	r6, #1
 8001b80:	e7ee      	b.n	8001b60 <__libc_init_array+0xc>
 8001b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b86:	4798      	blx	r3
 8001b88:	3601      	adds	r6, #1
 8001b8a:	e7f2      	b.n	8001b72 <__libc_init_array+0x1e>
 8001b8c:	08001c0c 	.word	0x08001c0c
 8001b90:	08001c0c 	.word	0x08001c0c
 8001b94:	08001c0c 	.word	0x08001c0c
 8001b98:	08001c10 	.word	0x08001c10

08001b9c <memset>:
 8001b9c:	4402      	add	r2, r0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <memset+0xa>
 8001ba4:	4770      	bx	lr
 8001ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8001baa:	e7f9      	b.n	8001ba0 <memset+0x4>

08001bac <_init>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr

08001bb8 <_fini>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr
